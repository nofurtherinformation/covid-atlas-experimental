{"version":3,"sources":["actions/index.js","GeodaProxy.js","utils/dataFunction.js","utils/mapFunction.js","utils/getJson.js","utils/getCSV.js","utils/getParseCSV.js","utils/mergeData.js","utils/colIndex.js","utils/colLookup.js","utils/findDates.js","utils/getDataForBins.js","utils/getDataForCharts.js","utils/getDataForLisa.js","utils/getCurrentWuuid.js","utils/getLisaValues.js","utils/getVarId.js","utils/getGeoidIndex.js","utils/loadGeojsonToGeoda.js","utils/getCartogramValues.js","config/index.js","components/map.js","styled_components/index.js","components/slider.js","components/legend.js","components/dataPanel.js","components/bottomPanel.js","components/tooltip.js","components/variablePanel.js","components/mainLineChart.js","components/tooltipPopper.js","components/mapTooltipContent.js","components/navbar.js","components/preloader.js","App.js","constants/defaults.js","reducers/index.js","index.js"],"names":["storeData","data","name","type","payload","storeGeojson","setCurrentData","setColumnNames","setDate","date","setVariableParams","params","setMapParams","setAnchorEl","anchorEl","setPanelState","window","Module","isInt","n","Number","GeodaProxy","this","geojson_maps","map_uid","file_target","uint8_t_arr","Uint8Array","result","uint8_t_ptr","_malloc","length","HEAPU8","set","ccall","_free","map_type","get_map_type","cc","get_centroids","xx","get_x","yy","get_y","centroids","i","size","push","get","get_num_obs","col_name","get_numeric_col","order","include_lower_order","precision","rook_weights","queen_weights","is_arc","is_mile","min_distance_threshold","k","power","is_inverse","knn_weights","dist_thres","dist_weights","kernel","adaptive_bandwidth","use_kernel_diagonals","kernel_weights","kernel_bandwidth_weights","weight_uid","local_moran","values","local_moran1","toVecDouble","local_g","local_gstar","local_geary","local_joincount","idx","nbrs","get_neighbors","parseVecInt","vi","j","vvi","sub","vd","input","vs","VectorString","push_back","VectorDouble","isNaN","Infinity","sel_fields","bound_var","min_bound","method","col_names","toVecString","clusters_vec","redcap","parseVecVecInt","tabu_length","cool_rate","n_iter","maxp","break_name","sel_field","breaks_vec","custom_breaks1","custom_breaks","breaks","parseVecDouble","orig_breaks","bins","id_array","txt","toFixed","undefined","unshift","NEGATIVE_INFINITY","POSITIVE_INFINITY","v","min_val","max_val","cart","cartogram","x","y","r","get_radius","min_x","max_x","min_y","max_y","scale_x","scale_y","dataFn","numeratorData","numeratorProperty","index","range","denominatorData","denominatorProperty","denominatorIndex","denominatorRange","scale","mapFn","val","colors","maptype","includes","url","gda_proxy","a","fetch","then","response","responseFromJson","clone","loadGeojsonToGeoda","json","geoidIndex","getGeoidIndex","features","tempData","getJson","ok","text","Promise","reject","status","d3","getCSV","joinCol","accumulate","rtn","indexStart","findDates","Object","keys","vals","tempArr","getParseCSV","mergeData","featureCollection","featureCollectionJoinCol","joinData","joinDataNames","joinDataCol","dataDict","colNumCheck","parseInt","properties","isInteger","cols","merged","merge","colIndex","table","indexOf","colLookup","columns","dataset","property","Date","parse","slice","getDataForBins","tableData","nType","numerProp","numerIndex","numerRange","denomTable","dType","denomProp","denomIndex","denomRange","t0","performance","now","tempIndex","tempDenomIndex","console","log","getDataForCharts","startIndex","dates","tempObj","sum","count","dailyNew","getDataForLisa","tempDict","GEOID","getCurrentWuuid","selectedDataset","w","CreateQueenWeights","get_uid","getLisaValues","geoids","all_zeros","clusters","sig","lisa","map_uuid","w_uuid","significances","getVarId","currentData","dataParams","numerator","nIndex","nRange","denominator","dProperty","dIndex","dRange","geoidOrder","indexOrder","arrayBuffer","ReadGeojsonMap","split","getCartogramValues","cartogramData","value","colorScales","fixedScales","Math","pow","dataPresets","geojson","csv","joinCols","tableNames","tooltipInfo","Choropleth","NaturalBreaksFixed","NaturalBreaks","BoxMap","LocalClustering","LocalMoran","NotSig","HighHigh","LowLow","HighLow","LowHigh","PovChldPrc","IncRt","MedianHouseholdIncome","FdInsPrc","UnEmplyPrc","UnInPrc","PrmPhysRt","PrevHospRt","RsiSgrBlckRt","SvrHsngPrbRt","Over65YearsPrc","AdObPrc","AdDibPrc","SmkPrc","ExcDrkPrc","DrOverdMrtRt","LfExpRt","SlfHlthPrc","SeverityIndex","PredictedDeaths","PredictedDeathsInterval","healthfactor","healthcontext","healthlife","Hypersegregated","href","target","rel","BlackBelt","TestingCapacity","USCongress","ICON_MAPPING","hospital","width","height","clinic","MAPBOX_ACCESS_TOKEN","defaultMapStyle","fromJS","MAP_STYLE","initialViewState","latitude","longitude","zoom","pitch","bearing","DATA_URL","CONTINENTS","process","BLACKBELT","SEG_CITIES","CONGRESS_DISTRICTS","CONGRESS_CENTROIDS","RESERVATIONS","HoverDiv","styled","div","NavBarBacking","button","props","isActive","viewGlobe","GlobeView","id","controller","resolution","view","MapView","repeat","Map","useState","hoverInfo","setHoverInfo","highlightGeog","setHighlightGeog","globalMap","mapStyle","setMapStyle","currLisaData","setCurrLisaData","viewState","setViewState","setCartogramData","currVarId","setCurrVarId","hospitalData","setHospitalData","clinicData","setClinicData","storedData","useSelector","state","storedGeojson","storedLisaData","storedCartogramData","panelState","mapParams","dispatch","useDispatch","useEffect","arr","vizType","tempLayers","map","layer","resource","overlay","setIn","mapRef","useRef","Layers","GeoJsonLayer","pickable","stroked","filled","wireframe","getFillColor","visible","mapType","extruded","opacity","f","hasOwnProperty","nProperty","colorScale","GetFillColor","getElevation","GetHeight","updateTriggers","onHover","info","onClick","object","getLineColor","lineWidthScale","getLineWidth","lineWidthMinPixels","IconLayer","iconAtlas","iconMapping","getIcon","d","getPosition","Longitude","Latitude","sizeUnits","getSize","sizeMinPixels","sizeMaxPixels","lon","lat","PolygonLayer","getPolygon","ScatterplotLayer","position","getRadius","radius","transitions","style","left","top","layers","views","reuseMaps","ref","preventStyleDiffing","mapboxApiAccessToken","onLoad","loaded","onViewportChange","transform","right","bottom","zIndex","transition","positionOptions","enableHighAccuracy","trackUserLocation","onGeolocate","coords","transitionInterpolator","FlyToInterpolator","transitionDuration","handleGeolocate","marginBottom","pointerEvents","content","StyledDropDown","FormControl","component","SwitchContainer","Grid","SliderContainer","PlayPauseButton","Button","LineSlider","Slider","RangeSlider","DateSlider","startDateIndex","timerId","setTimerId","customRange","setCustomRange","rangeSelectVal","setRangeSelectVal","valuetext","visibility","container","spacing","item","xs","rate","interval","setInterval","o","clearInterval","handlePlayPause","viewBox","lg","valueLabelDisplay","onChange","event","newValue","getAriaValueText","valueLabelFormat","aria-labelledby","min","step","max","rIndex","rRange","paddingLeft","InputLabel","htmlFor","Select","MenuItem","LegendContainer","LegendTitle","h3","BinLabels","binLength","firstBinZero","BinBars","Legend","title","currentVariable","color","className","backgroundColor","splice","cleanBins","label","Switch","checked","binMode","DataPanelContainer","DataPanel","sidebarData","cases","deaths","predictions","chr_health_factors","chr_life","chr_health_context","parsePredictedDate","list","NAME","state_name","population","toLocaleString","beds","version","getChartHeight","document","querySelector","offsetHeight","BottomDrawer","OpenCloseButton","BottomPanel","bottomMargin","setBottomMargin","addEventListener","chart","TooltipContainer","Tooltip","onMouseEnter","currentTarget","onMouseLeave","VariablePanelContainer","StyledButtonGroup","ButtonGroup","TwoUp","ControlsContainer","VariablePanel","columnNames","PresetVariables","CountyVariables","StateVariables","handleVizTypeButton","variables","ListSubheader","disabled","variable","tempParams","FormLabel","RadioGroup","aria-label","nBins","FormControlLabel","control","Radio","data-val","src","ChartContainer","ChartTitle","monthNames","millionFormatter","thousandFormatter","dateFormatter","tempDate","getMonth","CustomTick","labelFormatter","getStartDate","getEndDate","CustomTooltip","active","background","padding","borderRadius","boxShadow","textShadow","fontWeight","dataKey","MainLineChart","chartData","logChart","setLogChart","margin","tick","fill","fontSize","fontFamily","yAxisId","domain","allowDataOverflow","ticks","marginTop","angle","orientation","x1","x2","fillOpacity","isAnimationActive","stroke","dot","prev","inputProps","Popover","open","Boolean","Popper","placement","disablePortal","modifiers","flip","enabled","preventOverflow","boundariesElement","maxWidth","MapTooltipContent","testing","caseN","deathN","NavBar","paddingRight","PreloaderContainer","Preloader","setTimeout","display","alt","App","mapLoaded","set_gda_proxy","getColumns","names","loadData","csvs","csvPromises","all","waitForWASM","GetCentroids","getCentroids","setDates","getDates","tempId","storeCartogramData","fixedScale","nb","INITIAL_STATE","geodaProxy","storedCSV","currDate","currDateIndex","currentMethod","currentOverlay","currentResource","activeGeoid","storedRange","currentGeoid","reducer","action","geoid","obj","geojsonObj","lisaObj","cartoObj","centroidsObj","proxy","datesObj","currentDataFn","fn","colObj","binsObj","use3D","dateObj","paramObj","storedIndex","mapParamObj","panelsObj","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","WebFont","load","google","families","ReactDOM","render","getElementById"],"mappings":"iwfAeaA,EAAY,SAACC,EAAMC,GAC5B,MAAO,CACHC,KAAM,kBACNC,QAAS,CACLH,OACAC,UAMCG,EAAe,SAACJ,EAAMC,GAC/B,MAAO,CACHC,KAAM,qBACNC,QAAS,CACLH,OACAC,UA4BCI,EAAiB,SAACL,GAC3B,MAAO,CACHE,KAAM,mBACNC,QAAS,CACLH,UAkDCM,EAAiB,SAACN,EAAMC,GACjC,MAAO,CACHC,KAAM,mBACNC,QAAS,CACLH,OACAC,UAOCM,EAAU,SAACC,GACpB,MAAO,CACHN,KAAM,gBACNC,QAAS,CACLK,UAiECC,EAAoB,SAAEC,GAC/B,MAAO,CACHR,KAAM,sBACNC,QAAS,CACLO,YAMCC,EAAe,SAAED,GAC1B,MAAO,CACHR,KAAM,iBACNC,QAAS,CACLO,YA0BCE,EAAc,SAAEC,GACzB,MAAO,CACHX,KAAM,gBACNC,QAAS,CACLU,cAMCC,EAAgB,SAAEJ,GAC3B,MAAO,CACHR,KAAM,aACNC,QAAS,CACLO,Y,0BCxPCK,OAAOC,OAEpB,SAASC,EAAMC,GACb,OAAOC,OAAOD,KAAOA,GAAKA,EAAI,IAAM,E,IAmRvBE,E,WA9Qb,aAAe,oBACbC,KAAKC,aAAe,G,2DAGPC,EAASC,GAEtB,IAAMC,EAAc,IAAIC,WAAWF,EAAYG,QAEzCC,EAAcb,OAAOC,OAAOa,QAAQJ,EAAYK,QAEtDf,OAAOC,OAAOe,OAAOC,IAAIP,EAAaG,GAGtCb,OAAOC,OAAOiB,MAAM,kBAAmB,KAAM,CAAC,SAAU,SAAU,UAAW,CAACV,EAASK,EAAaH,EAAYK,SAGhHf,OAAOC,OAAOkB,MAAMN,GAEpB,IAAIO,EAAWpB,OAAOC,OAAOoB,aAAab,GAE1C,OADAF,KAAKC,aAAaC,GAAWY,EACtBZ,I,0BAGLA,GACF,OAAOA,KAAWF,KAAKC,e,6BAIvB,OAAOD,KAAKC,e,mCAGDC,GAKX,IAJA,IAAIc,EAAKtB,OAAOC,OAAOsB,cAAcf,GACjCgB,EAAKF,EAAGG,QACRC,EAAKJ,EAAGK,QACRC,EAAY,GACPC,EAAI,EAAGA,EAAIL,EAAGM,SAAUD,EAC/BD,EAAUG,KAAK,CAACP,EAAGQ,IAAIH,GAAIH,EAAGM,IAAIH,KAEpC,OAAOD,I,gCAGCpB,GAER,OADQR,OAAOC,OAAOgC,YAAYzB,K,iCAIzBA,GACT,OAAOF,KAAKC,aAAaC,K,oCAGbA,EAAS0B,GAErB,OAAOlC,OAAOC,OAAOkC,gBAAgB3B,EAAS0B,K,wCAG9B1B,EAAS4B,EAAOC,EAAqBC,GAErD,OADYtC,OAAOC,OAAOsC,aAAa/B,EAAS4B,EAAOC,EAAqBC,K,yCAI3D9B,EAAS4B,EAAOC,EAAqBC,GAEtD,OADYtC,OAAOC,OAAOuC,cAAchC,EAAS4B,EAAOC,EAAqBC,K,0CAI3D9B,EAASiC,EAAQC,GAEnC,OADU1C,OAAOC,OAAO0C,uBAAuBnC,EAASiC,EAAQC,K,uCAIjDlC,EAASoC,EAAGC,EAAOC,EAAYL,EAAQC,GAEtD,OADQ1C,OAAOC,OAAO8C,YAAYvC,EAASoC,EAAGC,EAAOC,EAAYL,EAAQC,K,wCAIzDlC,EAASwC,EAAYH,EAAOC,EAAYL,EAAQC,GAEhE,OADQ1C,OAAOC,OAAOgD,aAAazC,EAASwC,EAAYH,EAAOC,EAAYL,EAAQC,K,0CAIjElC,EAASoC,EAAGM,EAAQC,EAAoBC,EAAsBX,EAAQC,GAExF,OADQ1C,OAAOC,OAAOoD,eAAe7C,EAASoC,EAAGM,EAAQC,EAAoBC,EAAsBX,EAAQC,K,mDAIhFlC,EAASwC,EAAYE,EAAQE,EAAsBX,EAAQC,GAEtF,OADQ1C,OAAOC,OAAOqD,yBAAyB9C,EAASwC,EAAYE,EAAQE,EAAsBX,EAAQC,K,kCAIhGlC,EAAS+C,EAAYrB,GAC/B,OAAOlC,OAAOC,OAAOuD,YAAYhD,EAAS+C,EAAYrB,K,mCAG3C1B,EAAS+C,EAAYE,GAChC,OAAOzD,OAAOC,OAAOyD,aAAalD,EAAS+C,EAAYjD,KAAKqD,YAAYF,M,8BAGlEjD,EAAS+C,EAAYrB,GAC3B,OAAOlC,OAAOC,OAAO2D,QAAQpD,EAAS+C,EAAYrB,K,kCAGxC1B,EAAS+C,EAAYrB,GAC/B,OAAOlC,OAAOC,OAAO4D,YAAYrD,EAAS+C,EAAYrB,K,kCAG5C1B,EAAS+C,EAAYrB,GAC/B,OAAOlC,OAAOC,OAAO6D,YAAYtD,EAAS+C,EAAYrB,K,sCAGxC1B,EAAS+C,EAAYrB,GACnC,OAAOlC,OAAOC,OAAO8D,gBAAgBvD,EAAS+C,EAAYrB,K,mCAG/C1B,EAAS+C,EAAYS,GAChC,IAAIC,EAAOjE,OAAOC,OAAOiE,cAAc1D,EAAS+C,EAAYS,GAC5D,OAAO1D,KAAK6D,YAAYF,K,kCAGdG,GAEV,IADA,IAAIxD,EAAS,GACJyD,EAAI,EAAGA,EAAID,EAAGtC,SAAUuC,EAC/BzD,EAAOmB,KAAKqC,EAAGpC,IAAIqC,IAErB,OAAOzD,I,qCAGM0D,GAEb,IADA,IAAI1D,EAAS,GACJiB,EAAI,EAAGA,EAAIyC,EAAIxC,SAAUD,EAAG,CAGnC,IAFA,IAAI0C,EAAM,GACNH,EAAKE,EAAItC,IAAIH,GACRwC,EAAI,EAAGA,EAAID,EAAGtC,SAAUuC,EAC/BE,EAAIxC,KAAKqC,EAAGpC,IAAIqC,IAElBzD,EAAOmB,KAAKwC,GAEd,OAAO3D,I,qCAGM4D,GAEb,IADA,IAAI5D,EAAS,GACJiB,EAAI,EAAGA,EAAI2C,EAAG1C,SAAUD,EAC/BjB,EAAOmB,KAAKyC,EAAGxC,IAAIH,IAErB,OAAOjB,I,kCAIG6D,GAEV,IADA,IAAIC,EAAK,IAAI1E,OAAOC,OAAO0E,aAClB9C,EAAI,EAAGA,EAAI4C,EAAM1D,SAAUc,EAClC6C,EAAGE,UAAUH,EAAM5C,IAErB,OAAO6C,I,kCAGGD,GAEV,IADA,IAAIC,EAAK,IAAI1E,OAAOC,OAAO4E,aAClBhD,EAAI,EAAGA,EAAI4C,EAAM1D,SAAUc,EAC9BiD,MAAML,EAAM5C,KAAO4C,EAAM5C,IAAMkD,IACjCL,EAAGE,UAAU,GAEbF,EAAGE,UAAUH,EAAM5C,IAEvB,OAAO6C,I,6BAGFlE,EAAS+C,EAAYX,EAAGoC,EAAYC,EAAWC,EAAWC,GAC/D,IAAIC,EAAY9E,KAAK+E,YAAYL,GAC7BM,EAAetF,OAAOC,OAAOsF,OAAO/E,EAAS+C,EAAYX,EAAGwC,EAAWH,EAAWC,EAAWC,GAEjG,OADe7E,KAAKkF,eAAeF,K,2BAIhC9E,EAAS+C,EAAYX,EAAGoC,EAAYC,EAAWC,EAAWC,EAAQM,EAAaC,EAAWC,GAC7F,IAAIP,EAAY9E,KAAK+E,YAAYL,GAC7BM,EAAetF,OAAOC,OAAO2F,KAAKpF,EAAS+C,EAAY6B,EAAWH,EAAWC,EAAWO,EAAaC,EAAWP,EAAQvC,EAAG+C,GAE/H,OADerF,KAAKkF,eAAeF,K,oCAIvB9E,EAASqF,EAAYjD,EAAGkD,EAAWrC,GAC/C,IAAIsC,EAEFA,EADe,MAAbD,EACW9F,OAAOC,OAAO+F,eAAexF,EAASoC,EAAGiD,EAAYvF,KAAKqD,YAAYF,IAEtEzD,OAAOC,OAAOgG,cAAczF,EAASoC,EAAGkD,EAAWD,GAOlE,IALA,IAAIK,EAAS5F,KAAK6F,eAAeJ,GAC7BK,EAAcF,EAEdG,EAAO,GACPC,EAAW,GACNzE,EAAI,EAAGA,EAAIqE,EAAOnF,SAAUc,EAAG,CACtCyE,EAASvE,KAAK,IACd,IAAIwE,EAAMrG,EAAMgG,EAAOrE,IAAMqE,EAAOrE,GAAKqE,EAAOrE,GAAG2E,QAAQ,GAC3DH,EAAKtE,KAAK,GAAKwE,GAEjBD,EAASvE,KAAK,IACd,IAAIwE,EAAML,EAAOA,EAAOnF,OAAS,QACtB0F,GAAPF,IACFA,EAAMrG,EAAMqG,GAAOA,EAAMA,EAAIC,QAAQ,GACrCH,EAAKtE,KAAK,IAAMwE,IAGlBL,EAAOQ,QAAQtG,OAAOuG,mBACtBT,EAAOnE,KAAK3B,OAAOwG,mBAEnB,IAAK,IAAI/E,EAAI,EAAGA,EAAI4B,EAAO1C,SAAUc,EAEnC,IADA,IAAIgF,EAAIpD,EAAO5B,GACNwC,EAAI,EAAGA,EAAI6B,EAAOnF,OAAS,IAAKsD,EAAG,CAC1C,IAAIyC,EAAUZ,EAAO7B,GACjB0C,EAAUb,EAAO7B,EAAI,GACzB,GAAIwC,GAAKC,GAAWD,EAAIE,EAAS,CAC/BT,EAASjC,GAAGtC,KAAKF,GACjB,OAKN,IAAK,IAAIA,EAAI,EAAGA,EAAIwE,EAAKtF,SAAUc,GAInC,MAAO,CACL,EAAKe,EACL,KAAQyD,EACR,OAAUD,EACV,SAAYE,K,gCAIN9F,EAASiD,GAUjB,IATA,IAAIuD,EAAOhH,OAAOC,OAAOgH,UAAUzG,EAASF,KAAKqD,YAAYF,IACzDyD,EAAIF,EAAKvF,QACT0F,EAAIH,EAAKrF,QACTyF,EAAIJ,EAAKK,aAETC,EAAQJ,EAAElF,IAAI,GACduF,EAAQL,EAAElF,IAAI,GACdwF,EAAQL,EAAEnF,IAAI,GACdyF,EAAQN,EAAEnF,IAAI,GACTH,EAAI,EAAGA,EAAIqF,EAAEpF,SAAUD,EAC1ByF,EAAQJ,EAAElF,IAAIH,KAAIyF,EAAQJ,EAAElF,IAAIH,IAChC0F,EAAQL,EAAElF,IAAIH,KAAI0F,EAAQL,EAAElF,IAAIH,IAChC2F,EAAQL,EAAEnF,IAAIH,KAAI2F,EAAQL,EAAEnF,IAAIH,IAChC4F,EAAQN,EAAEnF,IAAIH,KAAI4F,EAAQN,EAAEnF,IAAIH,IAOtC,IALA,IAAI6F,EAAU,KAASH,EAAQD,GAC3BK,EAAU,IAAQF,EAAQD,GAG1B5G,EAAS,GACJiB,EAAI,EAAGA,EAAIqF,EAAEpF,SAAUD,EAAG,CACvBqF,EAAElF,IAAIH,GACNsF,EAAEnF,IAAIH,GAChBjB,EAAOmB,KAAK,CACV,WAAc,CACZ,GAAMF,GAER,SAAY,CAACqF,EAAElF,IAAIH,GAAK,IAASsF,EAAEnF,IAAIH,GAAK,KAC5C,OAAUuF,EAAEpF,IAAIH,KAGpB,OAAOjB,M,KCzNIgH,EAlBA,SAACC,EAAeC,EAAmBC,EAAOC,EAAOC,EAAiBC,EAAqBC,EAAkBC,EAAkBC,GACxI,YAAsB5B,IAAlBoB,EACK,EACwB,OAAtBK,GAAoC,OAARF,GAC7BH,EAAcC,IAAoBD,EAAcE,IAAQM,EACjC,OAAtBH,GAAoC,OAARF,GAC7BH,EAAcE,GAAOF,EAAcE,EAAMC,IAAQA,EAAMK,EAChC,OAAtBH,GAAoC,OAARF,GAC7BH,EAAcC,IAAoBD,EAAcE,KAASE,EAAgBC,IAAsBD,EAAgBE,IAAmBE,EAC3G,OAAtBH,GAAoC,OAARF,GAAiC,OAAnBI,GAC1CP,EAAcE,GAAOF,EAAcE,EAAMC,IAAQA,GAAQC,EAAgBC,IAAsBD,EAAgBE,IAAmBE,EAC5G,OAAtBH,GAAoC,OAARF,GAAiC,OAAnBI,GAC1CP,EAAcE,GAAOF,EAAcE,EAAMC,IAAQA,IAASC,EAAgBE,GAAkBF,EAAgBE,EAAiBC,IAAmBA,GAAkBC,EAEpK,GClCIC,EAnBD,SAACC,EAAKlC,EAAMmC,EAAQC,GAChC,GAAgB,mBAAZA,EAA8B,CAChC,GAAW,GAAPF,EAAU,OAAOC,EAAO,GAC5B,IAAK,IAAI3G,EAAE,EAAGA,EAAEwE,EAAKtF,OAAQc,IAC3B,GAAI0G,EAAMlC,EAAKxE,GACb,OAAO2G,EAAO3G,GAGlB,OAAO2G,EAAO,GACT,GAAIC,EAAQC,SAAS,SAAU,CACpC,IAAK,IAAI7G,EAAE,EAAGA,EAAEwE,EAAKtF,OAAQc,IAC3B,GAAI0G,EAAMlC,EAAKxE,GACb,OAAO2G,EAAO3G,EAAE,GAGpB,OAAO2G,EAAO,K,qDCZlB,WAAuBG,EAAKC,GAA5B,eAAAC,EAAA,sEAC2BC,MAAMH,GAC1BI,MAAK,SAAAC,GACJ,IAAMC,EAAmBD,EAASE,QAElC,OADAC,EAAmBF,EAAkBN,EAAKC,GACnCI,EAASI,UACfL,MAAK,SAAA9J,GAEN,MAAO,CACLA,KAAMA,EACNoK,WAAYC,EAAcrK,EAAKsK,cAVzC,cACUC,EADV,yBAaWA,GAbX,4C,sBAeeC,M,4GChBf,WAAsBd,GAAtB,eAAAE,EAAA,sEAC2BC,MAAMH,GAC1BI,MAAK,SAAAC,GACJ,OAAOA,EAASU,GAAKV,EAASW,OAASC,QAAQC,OAAOb,EAASc,WAC9Df,MAAK,SAAAY,GAGN,OAFWI,IAAYJ,EAAMI,QALrC,cACUP,EADV,yBAUaA,GAVb,4C,sBAaeQ,M,wFCZf,WAA2BrB,EAAKsB,EAASC,GAAzC,eAAArB,EAAA,sEAC2BC,MAAMH,GAC1BI,MAAK,SAAAC,GACJ,OAAOA,EAASU,GAAKV,EAASW,OAASC,QAAQC,OAAOb,EAASc,WAC9Df,MAAK,SAAAY,GACN,IAAI1K,EAAO8K,IAAYJ,EAAMI,KACzBI,EAAM,GACNhK,EAAIlB,EAAK8B,OAEb,GAAImJ,EAEF,IADA,IAAIE,EAAaC,EAAUC,OAAOC,KAAKtL,EAAK,KAAK,GAC1CkB,EAAE,GAAE,CACTA,IAKA,IAJA,IAAIqK,EAAOF,OAAO7G,OAAOxE,EAAKkB,IAC1BsK,EAAU,GACV5I,EAAIuI,EACJ/F,EAAI,EACDxC,EAAE2I,EAAKzJ,QACRc,IAAIuI,EACNK,EAAQ1I,KAAKyI,EAAK3I,KAElB4I,EAAQ1I,KAAKyI,EAAK3I,GAAG4I,EAAQpG,IAC7BA,KAEFxC,IAEF,IAAK,IAAIA,EAAI,EAAGA,EAAIuI,EAAYvI,IAC9B4I,EAAQ/D,QAAQ8D,EAAK3I,IAEvBsI,EAAIlL,EAAKkB,GAAG8J,IAAYQ,OAG1B,KAAOtK,EAAE,GAEPgK,EAAIlL,IADJkB,GACY8J,IAAYK,OAAO7G,OAAOxE,EAAKkB,IAG/C,MAAO,CAACgK,EAAKG,OAAOC,KAAKtL,EAAK,QArCtC,cACUuK,EADV,yBAuCWA,GAvCX,4C,sBA0CekB,M,gDCkBAC,EA7DG,SAACC,EAAmBC,EAA0BC,EAAUC,EAAeC,GAErF,IAAIzB,EAAW,GACX0B,EAAW,GAKXpJ,GAHmByI,OAAOC,KAAKK,EAAkBrB,SAAS,IAAIxI,OAG1D6J,EAAkBrB,SAASxI,QAC/BmK,EAAcC,SAASP,EAAkBrB,SAAS,GAAG6B,WAAWP,IACpE,GAAIzK,OAAOiL,UAAUH,GACnB,KAAOrJ,EAAE,GACPA,IACA0H,EAAS4B,SAASP,EAAkBrB,SAAS1H,GAAGuJ,WAAWP,KAA8BD,EAAkBrB,SAAS1H,GACpHoJ,EAASE,SAASP,EAAkBrB,SAAS1H,GAAGuJ,WAAWP,KAA8B,QAG3F,KAAOhJ,EAAE,GACPA,IACA0H,EAASqB,EAAkBrB,SAAS1H,GAAGuJ,WAAWP,IAA6BD,EAAkBrB,SAAS1H,GAC1GoJ,EAASL,EAAkBrB,SAAS1H,GAAGuJ,WAAWP,IAA6B,GAWnF,IADA,IAAI1K,EAAI2K,EAAS/J,OACVZ,EAAE,GAAG,CACVA,IACA,IAAImL,EAAOhB,OAAOC,KAAKO,EAAS3K,GAAG,IAEnC,IADA0B,EAAIyJ,EAAKvK,OACFc,EAAE,GAAG,CACVA,IACA,IACEoJ,EAASK,EAAKzJ,IAAIkJ,EAAc5K,IAAM2K,EAAS3K,GAAG,GAAGmL,EAAKzJ,IAC1D,YAcN,IATA,IAAI0J,EAASC,gBAAMjC,EAAU0B,GAMzBd,EAAM,GACNI,EAAOD,OAAOC,KAAKgB,GAEd1J,EAAI,EAAGA,EAAI0I,EAAKxJ,OAAQc,IAE/BsI,EAAIpI,KAAKwJ,EAAOhB,EAAK1I,KAGvB,OAAOsI,GCxDIsB,EAJE,SAACxM,EAAMyM,EAAOjM,GAC3B,OAAOR,EAAKyM,GAAOC,QAAQlM,ICMhBmM,EAPG,SAACC,EAASC,EAASJ,EAAOK,GACxC,IACI,OAAOF,EAAQC,GAASJ,GAAOC,QAAQI,GACzC,SACE,OAAO,OCGA1B,EAPG,SAACpL,GACf,IAAK,IAAI4C,EAAI,EAAGA,EAAI5C,EAAK8B,OAAQc,IAC/B,GAAImK,KAAKC,MAAMhN,EAAK4C,IAAK,MAAO,CAAC5C,EAAKiN,MAAMrK,GAAIA,ICkCvCsK,EAhCQ,SAACC,EAAWV,EAAOW,EAAOC,EAAWC,EAAYC,EAAYC,EAAYC,EAAOC,EAAWC,EAAYC,EAAYxE,GACtI,IAAIyE,EAAKC,YAAYC,MAGjB7C,EAAM,GAGNhK,EAAIiM,EAAUrL,OAGlB,GAAmB,OAAfwL,GAAqC,OAAdD,EAOvB,IALA,IAAIW,EAAYb,EAAU,GAAGV,GAAO3K,OAAO,EAEvCmM,EAA2B,gBAAVR,EAA0BN,EAAU,GAAGK,GAAY1L,OAAO,EAAI6L,EAG5EzM,EAAE,GACLA,IACAgK,EAAIzD,QAAQkB,EAAOwE,EAAUjM,GAAGuL,GAAQY,EAAWW,EAAWT,EAAYJ,EAAUjM,GAAGsM,GAAaE,EAAWO,EAAgBL,EAAYxE,SAGhJ,KAAOlI,EAAE,GACJA,IACAgK,EAAIzD,QAAQkB,EAAOwE,EAAUjM,GAAGuL,GAAQY,EAAWC,EAAYC,EAAYJ,EAAUjM,GAAGsM,GAAaE,EAAWC,EAAYC,EAAYxE,IAMhJ,OAFA8E,QAAQC,IAAIL,YAAYC,MAAQF,GAEzB3C,GCEIkD,EAlCU,SAACpO,EAAMyM,EAAO4B,EAAYC,GAO/C,IANA,IAAIT,EAAKC,YAAYC,MACjBzD,EAAWe,OAAOC,KAAKtL,GACvBkB,EAAImN,EACJnD,EAAM,GACN9F,GAAK,EAEFlE,EAAElB,EAAKsK,EAAS,IAAImC,GAAO3K,QAAQ,CAKtC,IAJA,IAAIyM,EAAU,GACVC,EAAM,EACN5L,EAAI,EAEDA,EAAE0H,EAASxI,aACkB0F,IAA5BxH,EAAKsK,EAAS1H,IAAI6J,KAAqB+B,GAAOxO,EAAKsK,EAAS1H,IAAI6J,GAAOvL,IAE3E0B,IAEJ2L,EAAQE,MAAQD,EAChBD,EAAQ/N,KAAO8N,EAAMpN,EAAEmN,GAEnBE,EAAQG,UADH,IAALtJ,EACmBoJ,EAEAA,EAAMtD,EAAI9F,GAAGqJ,MAEpCvD,EAAIpI,KAAKyL,GACTrN,IACAkE,IAIJ,OADA8I,QAAQC,IAAIL,YAAYC,MAAQF,GACzB3C,GCcIyD,EA3CQ,SAACxB,EAAWV,EAAOW,EAAOC,EAAWC,EAAYC,EAAYC,EAAYC,EAAOC,EAAWC,EAAYC,EAAYxE,EAAOjG,GAC7I,IAAI0K,EAAKC,YAAYC,MAGjBa,EAAW,GAGX1N,EAAIiM,EAAUrL,OAGlB,GAAmB,OAAfwL,GAAqC,OAAdD,EAQvB,IANA,IAAIW,EAAYb,EAAU,GAAGV,GAAO3K,OAAO,EAGvCmM,EAA2B,gBAAVR,EAA0BN,EAAU,GAAGK,GAAY1L,OAAO,EAAI6L,EAG5EzM,EAAE,GAEL0N,EAASzB,IADTjM,GACsBiL,WAAW0C,OAASlG,EAAOwE,EAAUjM,GAAGuL,GAAQY,EAAWW,EAAWT,EAAYJ,EAAUjM,GAAGsM,GAAaE,EAAWO,EAAgBL,EAAYxE,QAG9K,KAAOlI,EAAE,GAEJ0N,EAASzB,IADTjM,GACsBiL,WAAW0C,OAASlG,EAAOwE,EAAUjM,GAAGuL,GAAQY,EAAWC,EAAYC,EAAYJ,EAAUjM,GAAGsM,GAAaE,EAAWC,EAAYC,EAAYxE,GAI9K,IAAI8B,EAAM,GAEVhK,EAAI,EAEJ,IADA,IAAIoK,EAAOD,OAAOC,KAAKnI,GAChBjC,EAAEoK,EAAKxJ,QACVoJ,EAAIpI,KAAK8L,EAASzL,EAAMmI,EAAKpK,MAC7BA,IAKJ,OAFAgN,QAAQC,IAAIL,YAAYC,MAAQF,GAEzB3C,GCjCI4D,EAVS,SAACnF,EAAWoF,GAChC,IAAIC,EAAIrF,EAAUsF,mBAAmBF,EAAiB,EAAG,EAAG,GAE5D,MAAO,CACL,SAAYA,EACZ,EAAKC,EACL,OAAUA,EAAEE,YCoBHC,EAxBO,SAACxF,EAAWkD,EAAS7M,EAAMoP,GAG/C,IAFA,IAAIJ,EAAIF,EAAgBnF,EAAWkD,GAC/BwC,GAAY,EACPzM,EAAE,EAAGA,EAAE5C,EAAK8B,SAAUc,EACd,GAAX5C,EAAK4C,KACPyM,GAAY,GAEhB,IAAIC,EAAW,GACXC,EAAM,GAEV,GAAIF,EACF,IAAK,IAAIzM,EAAE,EAAGA,EAAE5C,EAAK8B,SAAUc,EAC7B0M,EAASxM,KAAK,GACdyM,EAAIzM,KAAK,OAEN,CACL,IAAI0M,EAAO7F,EAAUlF,aAAauK,EAAES,SAAUT,EAAEU,OAAQ1P,GACxDsP,EAAW3F,EAAUzC,eAAesI,EAAKF,YACzCC,EAAM5F,EAAUzC,eAAesI,EAAKG,iBAGtC,OAAOL,GCnBMM,EAJE,SAACC,EAAaC,GAC3B,MAAM,GAAN,OAAUD,EAAV,YAAyBC,EAAWC,UAApC,YAAiDD,EAAWE,OAA5D,YAAsEF,EAAWG,OAAjF,YAA2FH,EAAWI,YAAtG,YAAqHJ,EAAWK,UAAhI,YAA6IL,EAAWM,OAAxJ,YAAkKN,EAAWO,OAA7K,YAAuLP,EAAW1G,QCWvLiB,EAZO,SAACC,GAInB,IAHA,IAAIgG,EAAa,GACbC,EAAa,GACb3N,EAAI,EACDA,EAAE0H,EAASxI,QACdwO,EAAWhG,EAAS1H,GAAGuJ,WAAW0C,OAASjM,EAC3C2N,EAAW3N,GAAK0H,EAAS1H,GAAGuJ,WAAW0C,MACvCjM,IAGJ,MAAO,CAAC0N,aAAYC,eCFTrG,EARS,uCAAG,WAAOlK,EAAM0J,EAAKC,GAAlB,eAAAC,EAAA,sEACC5J,EAAKwQ,cADN,OACnBA,EADmB,OAGzB7G,EAAU8G,eAAe/G,EAAIgH,MAAM,KAAKzD,OAAO,GAAI,GAAI,CACnDtL,OAAQ6O,IAJa,2CAAH,0DCUTG,EAVY,SAAChH,EAAWkD,EAAS7M,GAG5C,IAFA,IAAI4Q,EAAgBjH,EAAU3B,UAAU6E,EAAS7M,GAC7CuO,EAAU,GACL3L,EAAE,EAAGA,EAAEgO,EAAc9O,OAAQc,IAClCgO,EAAchO,GAAGiO,MAAQ7Q,EAAK4C,GAC9B2L,EAAQ3L,GAAKgO,EAAchO,GAE/B,OAAO2L,G,qICPEuC,GAAc,CACvB,eAAkB,CACd,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,IACT,CAAC,IAAI,IAAI,IACT,CAAC,IAAI,GAAG,IACR,CAAC,IAAI,GAAG,IACR,CAAC,IAAI,EAAE,KAEX,KAAQ,CACJ,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,EAAE,GACP,CAAC,EAAE,EAAE,KACL,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,MAIf,eAAkB,CACd,CAAC,EAAG,IAAK,IACT,CAAC,GAAI,IAAK,KACV,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,GAAI,KAEd,UAAY,CACR,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,GAAG,KACR,CAAC,IAAI,GAAG,MAGZ,OAAS,CACL,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,GAAG,IAAI,KACR,CAAC,GAAG,IAAI,KACR,CAAC,EAAE,IAAI,MAGX,QAAU,CACN,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,GAAG,IAAI,KACR,CAAC,GAAG,IAAI,KACR,CAAC,EAAE,IAAI,MAGX,YAAe,CACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,GAAG,KAEZ,SAAa,CACT,CAAC,IAAI,IAAI,KACT,CAAC,GAAG,EAAE,KACN,CAAC,GAAG,EAAE,KACN,CAAC,IAAI,GAAG,KACR,CAAC,IAAI,GAAG,KACR,CAAC,IAAI,IAAI,IACT,CAAC,IAAI,IAAI,IACT,CAAC,IAAI,IAAI,KAEX,WAAa,CACX,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,GAAG,IAAI,KACR,CAAC,GAAG,IAAI,KACR,CAAC,EAAE,GAAG,KACN,CAAC,EAAE,GAAG,OAIDC,GAAc,CACvB,QAAW,CACP3J,KAAM,CAAC,UAAU,MAAM,KAAK,MAAM,MAAM,MAAM,QAC9CH,OAAO,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG+J,KAAKC,IAAI,GAAI,MAE3C,WAAc,CACV7J,KAAM,CAAC,UAAU,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,QAC3DH,OAAO,CAAC,EAAE,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI+J,KAAKC,IAAI,GAAI,MAE1D,KAAO,CACH7J,KAAM,CAAC,kBAAmB,YAAa,UAAW,WAAY,cAIzD8J,GAAc,CACvB,yBAA0B,CACtBC,QAAS,yBACTC,IAAK,CAAC,2BAA2B,wBAAyB,uBAAwB,qBAAsB,WAAY,sBACpHC,SAAU,CAAC,QAAS,QACpBC,WAAY,CAAC,QAAQ,SAAU,cAAe,qBAAsB,WAAY,sBAChFrG,WAAY,IAEhB,sBAAuB,CACnBkG,QAAS,sBACTC,IAAK,CAAC,uBAAuB,oBAAqB,uBAAwB,qBAAsB,WAAY,sBAC5GC,SAAU,CAAC,QAAS,QACpBC,WAAY,CAAC,QAAQ,SAAU,cAAe,qBAAsB,WAAY,sBAChFrG,WAAY,CAAC,uBAAuB,sBAExC,qBAAsB,CAClBkG,QAAS,qBACTC,IAAK,CAAC,sBAAuB,mBAAoB,uBAAwB,qBAAsB,WAAY,sBAC3GC,SAAU,CAAC,QAAS,QACpBC,WAAY,CAAC,QAAS,SAAU,cAAe,qBAAsB,WAAY,sBACjFrG,WAAY,IAEhB,qBAAsB,CAClBkG,QAAS,qBACTC,IAAK,CAAC,6BAA6B,0BAA2B,2BAA4B,iBAAkB,2BAA4B,2BAA4B,0BAA2B,wBAAyB,yBACxNC,SAAU,CAAC,QAAS,QACpBC,WAAY,CAAC,QAAS,SAAU,qBAAsB,WAAY,qBAAsB,UAAW,iBAAkB,eAAgB,gBACrIrG,WAAY,CAAC,6BAA6B,6BAIrCsG,GAAc,CACzBC,WAAY,4JACZC,mBAAoB,+KACpBC,cAAe,0KACfC,OAAQ,kFACRC,gBAAiB,mIACjBC,WAAY,yFACZC,OAAQ,mIACRC,SAAU,8GACVC,OAAQ,6GACRC,QAAS,wGACTC,QAAS,kHACTC,WAAY,sFACZC,MAAO,kHACPC,sBAAuB,2HACvBC,SAAU,0FACVC,WAAY,sGACZC,QAAS,oFACTC,UAAW,+EACXC,WAAY,+HACZC,aAAc,6JACdC,aAAc,6LACdC,eAAgB,uEAChBC,QAAS,6JACTC,SAAU,+FACVC,OAAQ,6EACRC,UAAW,uFACXC,aAAc,uFACdC,QAAS,oFACTC,WAAY,mFACZC,cAAe,gIACfC,gBAAiB,wEACjBC,wBAAyB,yFACzBC,aAAa,qKACbC,cAAe,gNACfC,WAAW,0MACXC,gBAAiB,oHAAsF,mBAAGC,KAAK,0FAA0FC,OAAO,SAASC,IAAI,sBAAtH,qBACvGC,UAAW,+HAAiG,mBAAGH,KAAK,iEAAiEC,OAAO,SAASC,IAAI,sBAA7F,qBAC5GE,gBAAiB,wLACjBC,WAAY,0DAA4B,mBAAGL,KAAK,2BAA2BC,OAAO,SAASC,IAAI,sBAAvD,sB,i9BC3J1C,IAAMI,GAAe,CACjBC,SAAU,CAAClM,EAAG,EAAGC,EAAG,EAAGkM,MAAO,IAAKC,OAAQ,KAC3CC,OAAQ,CAACrM,EAAG,IAAKC,EAAG,EAAGkM,MAAO,IAAKC,OAAQ,MAGzCE,GAAsB,6FAEtBC,GAAkBC,YAAOC,IAEzBC,GAAmB,CACrBC,SAAU,UACVC,WAAY,YACZC,KAAM,IACNC,MAAM,EACNC,QAAQ,GAGNC,GAAW,CACbC,WAAW,GAAD,OAAKC,IAAL,0BACVC,UAAU,GAAD,OAAID,IAAJ,wCACTE,WAAW,GAAD,OAAIF,IAAJ,+BACVG,mBAAmB,GAAD,OAAIH,IAAJ,8BAClBI,mBAAmB,GAAD,OAAIJ,IAAJ,uCAClBK,aAAa,GAAD,OAAIL,IAAJ,kCAGVM,GAAWC,IAAOC,IAAV,MA2BRC,IAhBkBF,IAAOG,OAAV,MAMG,SAAAC,GAAK,OAAIA,EAAMC,SAAW,SAAW,aAUvCL,IAAOC,IAAV,OAYbK,GAAY,IAAIC,KAAU,CAACC,GAAI,QAASC,YAAY,EAAOC,WAAW,IACtEC,GAAO,IAAIC,KAAQ,CAACC,QAAQ,IAwdnBC,GArdH,WAAO,IAAD,EAEoBC,oBAAS,GAF7B,mBAEPC,EAFO,KAEIC,EAFJ,OAG4BF,oBAAS,GAHrC,mBAGPG,EAHO,KAGQC,EAHR,OAIoBJ,oBAAS,GAJ7B,mBAIPK,EAJO,aAKkBL,mBAASjC,KAL3B,mBAKPuC,EALO,KAKGC,EALH,OAM0BP,mBAAS,IANnC,mBAMPQ,EANO,KAMOC,EANP,OAOoBT,mBAAS9B,IAP7B,mBAOPwC,EAPO,KAOIC,EAPJ,OAQ4BX,mBAAS,IARrC,mBAQP7F,EARO,KAQQyG,EARR,OASoBZ,mBAAS,MAT7B,mBASPa,EATO,KASIC,EATJ,OAU0Bd,mBAAS,MAVnC,mBAUPe,EAVO,KAUOC,EAVP,OAWsBhB,mBAAS,MAX/B,mBAWPiB,EAXO,KAWKC,EAXL,KAaRC,EAAaC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,cACxCG,EAAgBF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAC3ClI,EAAcgI,aAAY,SAAAC,GAAK,OAAIA,EAAMjI,eACzCmI,EAAiBH,aAAY,SAAAC,GAAK,OAAIA,EAAME,kBAC5CC,EAAsBJ,aAAY,SAAAC,GAAK,OAAIA,EAAMG,uBACjDC,EAAaL,aAAY,SAAAC,GAAK,OAAIA,EAAMI,cAExCpI,GAAa+H,aAAY,SAAAC,GAAK,OAAIA,EAAMhI,cACxCqI,GAAYN,aAAY,SAAAC,GAAK,OAAIA,EAAMK,aAEvCC,GAAWC,cAEjBC,qBAAU,WACN,IAAIC,EAAM,GACV,GAAIX,EAAW/H,IAAsC,cAAtBsI,GAAUK,QACrC,IAAK,IAAI5V,EAAE,EAAGA,EAAEgV,EAAW/H,GAAa/N,OAAQc,IAC5C2V,EAAIzV,KAAK,CAACoT,GAAGtT,IAGrByU,EAAiBkB,KAClB,CAACX,EAAYO,GAAUK,UAE1BF,qBAAU,WACNf,EAAa3H,EAASC,EAAaC,OACpC,CAACA,GAAYqI,KAGhBG,qBAAU,WACN,OAAOH,GAAUK,SACb,IAAK,KACDpB,GAAa,SAAAf,GAAI,kCACVA,GADU,IAEbzB,SAAU,UACVC,WAAY,YACZC,KAAM,IACNE,QAAQ,EACRD,MAAM,OAEV,MACJ,IAAK,KACDqC,GAAa,SAAAf,GAAI,kCACVA,GADU,IAEbzB,SAAU,UACVC,WAAY,YACZC,KAAM,IACNE,SAAS,GACTD,MAAM,QAEV,MACJ,IAAK,YACDqC,GAAa,SAAAf,GAAI,kCACVA,GADU,IAEbzB,SAAU,OACVC,WAAY,OACZC,KAAM,IACNE,QAAQ,EACRD,MAAM,UAMnB,CAACoD,GAAUK,UAEdF,qBAAU,WACN,IAAI/N,EAAWyN,EAAepI,EAASC,EAAaC,UACnCtI,IAAb+C,GAAwB2M,EAAgB3M,KAC7C,CAACyN,EAAgBlI,GAAYqI,KAEhCG,qBAAU,WAEN,IAEIG,EAFkBjE,GAAgBzR,IAAI,UAEX2V,KAAI,SAAAC,GAC/B,OAAIR,GAAUS,SAASnP,SAASkP,EAAM5V,IAAI,QAAUoV,GAAUU,QAAQpP,SAASkP,EAAM5V,IAAI,OAC9E4V,EAAMG,MAAM,CAAC,SAAU,cAAe,WAEtCH,KAIf3B,EAAYxC,GAAgBxS,IAAI,SAAUyW,MAE3C,CAACN,GAAUU,UAEdP,qBAAU,WACe,OAAjBd,GACAzM,EAAO,sJACNjB,MAAK,SAAAtF,GAAM,OAAIiT,EAAgBjT,MAGjB,OAAfkT,GACA3M,EAAO,GAAD,OAAIoK,IAAJ,4BACLrL,MAAK,SAAAtF,GAAM,OAAImT,EAAcnT,QAEpC,IACF,IAAMuU,GAASC,mBA8DTC,GAAS,CACX,IAAIC,KAAa,CACbhD,GAAI,kBACJlW,KAAMiV,GAASC,WACfiE,UAAU,EACVC,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXC,aAAc,CAAC,GAAG,GAAG,MAEzB,IAAIL,KAAa,CACbhD,GAAI,aACJlW,KAAM,CACF,KAAQ,oBACR,KAAQ6P,EACR,IAAO,CAAE,KAAQ,OAAQ,WAAc,CAAE,KAAQ,kCACjD,SAAY+H,EAAW/H,GAAe+H,EAAW/H,GAAe,IAEpE2J,QAA+B,cAAtBrB,GAAUsB,QACnBN,UAAU,EACVC,SAAS,EACTC,QAAQ,EACRC,UAAiC,OAAtBnB,GAAUK,QACrBkB,SAAgC,OAAtBvB,GAAUK,QACpBmB,QAA+B,OAAtBxB,GAAUK,QAAmB,GAA6B,KAAvBL,GAAUS,SAAkB,GAAM,IAC9EW,aAAc,SAAAK,GAAC,OArFF,SAACA,EAAGxS,EAAMqS,GAC3B,OAAKrS,EAAKyS,eAAe,QAEF,SAAZJ,EACA3I,GAAYtB,KAAKyH,EAAac,EAAclI,GAAd,WAAyC+J,EAAEzN,WAAW0C,SAEpFxF,EAAMV,EAAOiR,EAAE9J,GAAWC,WAAYD,GAAWgK,UAAWhK,GAAWE,OAAQF,GAAWG,OAAQ2J,EAAE9J,GAAWI,aAAcJ,GAAWK,UAAWL,GAAWM,OAAQN,GAAWO,OAAQP,GAAW1G,OAAQhC,EAAKH,OAAQkR,GAAU4B,WAAY5B,GAAUsB,SAJzP,CAAC,EAAE,EAAE,GAmFOO,CAAaJ,EAAGzB,GAAU/Q,KAAM+Q,GAAUsB,UAC7DQ,aAAc,SAAAL,GAAC,OA5EL,SAACA,EAAGxS,GAAJ,OAAaA,EAAKyS,eAAe,QAA+M,IAArMlR,EAAOiR,EAAE9J,GAAWC,WAAYD,GAAWgK,UAAWhK,GAAWE,OAAQF,GAAWG,OAAQ2J,EAAE9J,GAAWI,aAAcJ,GAAWK,UAAWL,GAAWM,OAAQN,GAAWO,OAAQP,GAAW1G,OAAc,EA4E9O8Q,CAAUN,EAAGzB,GAAU/Q,KAAM+Q,GAAUsB,UAC1DU,eAAgB,CACZna,KAAM6P,EACN0J,aAAc,CAACzJ,GAAYqI,IAC3B8B,aAAc,CAACnK,GAAYqI,KAE/BiC,QAAS,SAAAC,GACL,IACI1D,EAAa0D,GACf,SACE1D,EAAa,QAGrB2D,QAAS,SAAAD,GACL,IACIjC,GrBlIT,CACHlY,KAAM,mBACNC,QAAS,CACLH,KqB+HgCqa,EAAKE,UAC7B1D,EAAiBwD,EAAKE,OAAOpO,WAAW0C,OAC1C,cAIV,IAAIqK,KAAa,CACbhD,GAAI,iBACJlW,KAAM,CACF,KAAQ,oBACR,KAAQ6P,EACR,IAAO,CAAE,KAAQ,OAAQ,WAAc,CAAE,KAAQ,kCACjD,SAAY+H,EAAW/H,GAAe+H,EAAW/H,GAAe,IAEpEsJ,UAAU,EACVC,SAAS,EACTC,QAAO,EACPmB,aAAc,SAAAZ,GAAC,OAAKhD,IAAkBgD,EAAEzN,WAAW0C,MAAQ,CAAC,IAAI,IAAI,KAAO,CAAC,IAAI,IAAI,IAAI,IACxF4L,eAAgB,GAChBC,aAAc,EACdC,mBAAoB,EACpBR,eAAgB,CACZna,KAAM6P,EACN2K,aAAc5D,KAGtB,IAAIgE,KAAU,CACV1E,GAAI,iBACJlW,KAAMwX,EACNgC,QAASrB,GAAUS,SAASnP,SAAS,YACrCoR,UAAU,GAAD,OAAK1F,IAAL,8BACT2F,YAAa5G,GACb6G,QAAS,SAAAC,GAAC,MAAI,YACdC,YAAa,SAAAD,GAAC,MAAI,CAACA,EAAEE,UAAWF,EAAEG,WAClCC,UAAW,SACXC,QAAS,MACTC,cAAc,EACdC,cAAc,GACdpB,eAAgB,CACZna,KAAMwX,EACNgC,QAASrB,MAGjB,IAAIyC,KAAU,CACV1E,GAAI,gBACJlW,KAAM0X,EACN8B,QAASrB,GAAUS,SAASnP,SAAS,UACrCoR,UAAU,GAAD,OAAK1F,IAAL,8BACT2F,YAAa5G,GACb6G,QAAS,SAAAC,GAAC,MAAI,UACdC,YAAa,SAAAD,GAAC,MAAI,CAACA,EAAEQ,IAAKR,EAAES,MAC5BL,UAAW,SACXC,QAAS,MACTC,cAAc,EACdC,cAAc,GACdpB,eAAgB,CACZna,KAAM0X,EACN8B,QAASrB,MAGjB,IAAIe,KAAa,CACbhD,GAAI,YACJlW,KAAMiV,GAASG,UACf+D,UAAU,EACVC,SAAS,EACTC,QAAO,EACPmB,aAAc,CAAC,EAAE,EAAE,GACnBb,QAAQ,GACRH,QAA+B,cAAtBrB,GAAUU,QACnBsB,eAAgB,CACZX,QAASrB,MAGjB,IAAIe,KAAa,CACbhD,GAAI,oBACJlW,KAAMiV,GAASI,WACf8D,UAAU,EACVC,SAAS,EACTC,QAAO,EACPmB,aAAc,CAAC,EAAE,EAAE,GACnBb,QAAQ,GACRH,QAA+B,sBAAtBrB,GAAUU,QACnBsB,eAAgB,CACZX,QAASrB,MAGjB,IAAIe,KAAa,CACbhD,GAAI,+BACJlW,KAAMiV,GAASO,aACf2D,UAAU,EACVC,SAAS,EACTC,QAAO,EACPmB,aAAc,CAAC,EAAE,EAAE,GACnBb,QAAQ,GACRH,QAA+B,iCAAtBrB,GAAUU,QACnBsB,eAAgB,CACZX,QAASrB,MAGjB,IAAIe,KAAa,CACbhD,GAAI,4BACJlW,KAAMiV,GAASK,mBACf6D,UAAU,EACVC,SAAS,EACTC,QAAO,EACPmB,aAAc,CAAC,EAAE,EAAE,GACnBG,mBAAmB,EACnBnB,QAA+B,8BAAtBrB,GAAUU,QACnBsB,eAAgB,CACZX,QAASrB,MAGjB,IAAIuD,KAAa,CACbxF,GAAI,aACJlW,KAAM,CAEF,CAAC,EAAE,IAAK,IAAK,CAAC,EAAG,IAAK,CAAC,IAAK,IAAK,CAAC,KAAM,IAAK,CAAC,GAAI,IAAK,EAAE,KAAM,MAEnE2Z,QAAS,EACTgC,WAAY,SAAAX,GAAC,OAAIA,GACjB5B,SAAS,EACTC,QAAQ,EACRG,QAA+B,cAAtBrB,GAAUK,QACnBe,aAAc,CAAC,GAAG,GAAG,IACrBY,eAAgB,CACZX,QAASrB,GAAUK,WAG3B,IAAIoD,KAAiB,CACjB1F,GAAI,kBACJlW,KAAM4Q,EACN4I,QAA+B,cAAtBrB,GAAUK,QACnByC,YAAa,SAAArB,GAAC,OAAI3B,EAAoBX,GAAWsC,EAAE1D,IAAI2F,UACvDtC,aAAc,SAAAK,GAAC,OAzLQtQ,EAyLkB2O,EAAoBX,GAAWsC,EAAE1D,IAAIrF,MAzLlDzJ,EAyLyD+Q,GAAU/Q,KAAM+Q,GAAUsB,QAxL9GrS,EAAKyS,eAAe,QAKdxQ,EAAMC,EAAKlC,EAAKH,OAAQkR,GAAU4B,WAAY5B,GAAUsB,SAJxD,CAAC,EAAE,EAAE,GAFU,IAACnQ,EAAKlC,GA0L5B0U,UAAW,SAAAlC,GAAC,OAAgD,GAA5C3B,EAAoBX,GAAWsC,EAAE1D,IAAI6F,QACrDC,YAAa,CACTf,YAAa,IACb1B,aAAc,IACduC,UAAW,KAEf3B,eAAgB,CACZc,YAAa,CAAChD,EAAqBE,GAAWrI,GAAYwH,GAC1DiC,aAAc,CAACtB,EAAqBE,GAAWrI,GAAYwH,GAC3DwE,UAAW,CAAC7D,EAAqBE,GAAWrI,GAAYwH,GACxDkC,QAAS,CAACvB,EAAqBE,GAAWrI,GAAYwH,OA6BlE,OACI,qBAAKpB,GAAG,eAAe+F,MAAO,CAACJ,SAAS,QAAQK,KAAK,EAAEC,IAAI,EAAE/H,MAAM,OAAOC,OAAO,QAAjF,SACI,eAAC,KAAD,CACIM,iBAAkBwC,EAClBhB,YAAY,EACZiG,OAAQnD,GACRoD,MAAOvF,EAAYd,GAAYK,GAJnC,UAMI,eAAC,KAAD,CACIiG,WAAS,EACTC,IAAKxD,GACLhC,SAAUA,EACVyF,qBAAqB,EACrBC,qBAAsBlI,GACtBmI,OAAQ,kBAAMtE,GrB9OvB,CACHlY,KAAM,iBACNC,QAAS,CACLwc,QqB2O4C,MANxC,UASI,cAAC,KAAD,CACA5D,OAAQA,GACR6D,iBAAkB,SAAAzF,GAAS,OAAKC,EAAaD,IAC7CsF,qBAAsBlI,GACtBsH,SAAS,YACTI,MAAO,CAACY,UAAU,sBAElB,cAACjH,GAAD,IAEA,sBAAKqG,MAAO,CAACJ,SAAU,WAAYiB,MAAO5E,EAAWmC,KAAO,IAAM,GAAI0C,OAAQ,GAAIC,OAAQ,GAAIC,WAAY,aAA1G,UAoCI,cAAC,KAAD,CACIC,gBAAiB,CAACC,oBAAoB,GACtCC,mBAAmB,EACnBC,YAAa,SAAAlG,GAAS,OA/StB,SAACA,GACrBC,GAAa,SAAAf,GAAI,kCACVA,GADU,IAEbzB,SAAUuC,EAAUmG,OAAO1I,SAC3BC,UAAWsC,EAAUmG,OAAOzI,UAC5BC,KAAM,EACNyI,uBAAwB,IAAIC,KAC5BC,mBAAoB,SAwSuBC,CAAgBvG,IAC3C8E,MAAO,CAAC0B,aAAc,MAE1B,cAAC,KAAD,CACIf,iBAAkB,SAAAzF,GAAS,OAAKC,EAAaD,SAGrD,2BAEHT,EAAU6D,QACX,cAAC9E,GAAD,CAAUwG,MAAO,CAACJ,SAAU,WAAYmB,OAAQ,EAAGY,cAAe,OAAQ1B,KAAMxF,EAAUzO,EAAGkU,IAAKzF,EAAUxO,GAA5G,SACI,cAAC,GAAD,CAAmB2V,QAASnH,EAAU6D,iB,qkDCtiBnD,IAAMuD,GAAiBpI,YAAOqI,KAAPrI,CAAH,MACX,SAAAI,GAAK,MAAwB,WAApBA,EAAMkI,UAAyB,KAAO,QAgDlDC,GAAkBvI,YAAOwI,KAAPxI,CAAH,M,4iFCxC5B,IAAMyI,GAAkBzI,IAAOC,IAAV,MAoCfyI,IA7Ba1I,YAAO2I,KAAP3I,CAAH,MA6BQA,YAAO2I,KAAP3I,CAAH,OAef4I,GAAa5I,YAAO6I,KAAP7I,CAAH,MA6BV8I,GAAc9I,YAAO6I,KAAP7I,CAAH,MAgMF+I,GAtKI,WACf,IAAMrG,EAAWC,cAEXxI,EAAcgI,aAAY,SAAAC,GAAK,OAAIA,EAAMjI,eACzCvB,EAAQuJ,aAAY,SAAAC,GAAK,OAAIA,EAAMxJ,SACnCwB,EAAa+H,aAAY,SAAAC,GAAK,OAAIA,EAAMhI,cACxC4O,EAAiB7G,aAAY,SAAAC,GAAK,OAAIA,EAAM4G,kBAN7B,EAQSjI,mBAAS,MARlB,mBAQdkI,EARc,KAQLC,EARK,OASiBnI,oBAAS,GAT1B,mBASdoI,EATc,KASDC,EATC,OAUuBrI,mBAAS,GAVhC,mBAUdsI,EAVc,KAUEC,EAVF,KAgFfC,EAAY,SAACpO,GAAD,gBAAcvC,EAAMuB,GAAagB,EAAM6N,KAEzD,YAA2BlX,IAAvB8G,EAAMuB,GAEF,cAACsO,GAAD,CAAiBlC,MAAO,CAACiD,WAAkC,gBAArBpP,EAAW1C,MAA0B,UAAY,UAAvF,SACI,eAAC8Q,GAAA,EAAD,CAAMiB,WAAS,EAACC,QAAS,EAAzB,UAII,cAAClB,GAAA,EAAD,CAAMmB,MAAI,EAACC,GAAI,EAAf,SACI,cAAClB,GAAD,CAAiBlI,GAAG,YAAYoE,QAAS,kBA7CrC,SAACqE,EAASY,EAAMC,GACpB,OAAZb,EACAC,EAAWa,aAAY,SAAAC,GAAC,OAAItH,EvBmB7B,CACHlY,KAAM,iBACNC,QAAS,CACL2I,MuBtBmDyW,OAAQC,KAE3DG,cAAchB,GACdC,EAAW,OAwCgDgB,CAAgBjB,EAAS,EAAG,MAA3E,SACiB,OAAZA,EACG,qBAAK1W,EAAE,MAAMC,EAAE,MAAM2X,QAAQ,cAA7B,SACI,mBAAGhD,UAAU,iEAAb,SACI,4BACI,sBAAM7B,EAAE,+NAOpB,qBAAK/S,EAAE,MAAMC,EAAE,MAAM2X,QAAQ,cAA7B,SACI,mBAAGhD,UAAU,iEAAb,SACI,4BACI,sBAAM7B,EAAE,8vBAchC,eAACkD,GAAA,EAAD,CAAMmB,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAvB,WACMjB,GAAe,cAACP,GAAD,CACbzN,MAAOf,EAAWE,OAClB+P,kBAAkB,KAClBC,SA/GH,SAACC,EAAOC,GACzBhS,QAAQC,IAAI+R,GACa,gBAArBpQ,EAAW1C,OAAgD,gBAArB0C,EAAWrC,MACjD2K,EAAS3X,EAAkB,CAACuP,OAAQkQ,EAAU9P,OAAQ8P,KAC1B,gBAArBpQ,EAAW1C,MAClBgL,EAAS3X,EAAkB,CAACuP,OAAQkQ,KACR,gBAArBpQ,EAAWrC,OAClB2K,EAAS3X,EAAkB,CAAC2P,OAAQ8P,KAExC9H,EAAS7X,EAAQ+N,EAAMuB,GAAaqQ,MAuGhBC,iBAAkBlB,EAClBmB,iBAAkBnB,EAClBoB,kBAAgB,iBAChBC,IAAK5B,EACL6B,KAAM,EACNC,IAAK9B,EAAepQ,EAAMuB,GAAa/N,OAAO,IAEjD+c,GAAe,cAACL,GAAD,CACZ3N,MAAO,CAACf,EAAWE,OAAOF,EAAWG,OAAQH,EAAWE,QACxD+P,kBAAkB,KAClBC,SA9GE,SAACC,EAAOC,GAC9BhS,QAAQC,IAAI+R,GACRpQ,EAAWO,OACX+H,EAAS3X,EACL,CACIuP,OAAQkQ,EAAS,GACjBjQ,OAAQiQ,EAAS,GAAGA,EAAS,GAC7BO,OAAQP,EAAS,GACjBQ,OAAQR,EAAS,GAAGA,EAAS,MAIrC9H,EAAS3X,EACL,CACIuP,OAAQkQ,EAAS,GACjBjQ,OAAQiQ,EAAS,GAAGA,EAAS,OAgGrBC,iBAAkBlB,EAClBmB,iBAAkBnB,EAClBoB,kBAAgB,iBAChBC,IAAK5B,EACL6B,KAAM,EACNC,IAAK9B,EAAepQ,EAAMuB,GAAa/N,OAAO,OAGtD,cAACoc,GAAA,EAAD,CAAMmB,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAG7D,MAAO,CAAC0E,YAAY,QAA9C,SACI,eAAC7C,GAAD,WACI,cAAC8C,GAAA,EAAD,CAAYC,QAAQ,cAApB,wBACA,eAACC,GAAA,EAAD,CACI5K,GAAG,cACHrF,MAAOkO,EACPiB,SA/FF,SAACC,GACvB,IAAI3W,EAAM2W,EAAMpM,OAAOhD,MAEX,WAARvH,GACAwV,GAAe,GACU,gBAArBhP,EAAW1C,OAAgD,gBAArB0C,EAAWrC,MACjD2K,EAAS3X,EAAkB,CAACwP,OAAQ,GAAII,OAAQ,MACpB,gBAArBP,EAAW1C,MAClBgL,EAAS3X,EAAkB,CAACwP,OAAQ,MACR,gBAArBH,EAAWrC,OAClB2K,EAAS3X,EAAkB,CAAC4P,OAAQ,QAGxCyO,GAAe,GACU,gBAArBhP,EAAW1C,OAAgD,gBAArB0C,EAAWrC,MACjD2K,EAAS3X,EAAkB,CAACwP,OAAQ3G,EAAK+G,OAAQ/G,KACrB,gBAArBwG,EAAW1C,MAClBgL,EAAS3X,EAAkB,CAACwP,OAAQ3G,KACR,gBAArBwG,EAAWrC,OAClB2K,EAAS3X,EAAkB,CAAC4P,OAAQ/G,MAI5C0V,EAAkB1V,IAqEE,UAKI,cAACyX,GAAA,EAAD,CAAUlQ,MAAO,KAAjB,uBAA4B,cAC5B,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,EAAjB,sBAAyB,SACzB,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,EAAjB,2BAAyB,UACzB,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,SAAjB,yBAAgC,4BAQjD,cAACsN,GAAD,K,ipCCjRf,IAAM6C,GAAkBtL,IAAOC,IAAV,MAOfsL,GAAcvL,IAAOwL,GAAV,MASXC,GAAYzL,IAAOC,IAAV,MAKE,SAAAG,GAAK,OAAIA,EAAMsL,UAAY,EAAI,IAAItL,EAAMsL,UAAU,EAAE,EAAI,KAYrD,SAAAtL,GAAK,OAAIA,EAAMuL,aAAe,mBAAqB,UAGlEC,GAAU5L,IAAOC,IAAV,MAaQ,SAAAG,GAAK,OAAIA,EAAMuL,aAAe,eAAiB,UAoErDE,GA/DC,WACZ,IAAMnJ,EAAWC,cAEXF,EAAYN,aAAY,SAAAC,GAAK,OAAIA,EAAMK,aAEvCqJ,GADa3J,aAAY,SAAAC,GAAK,OAAIA,EAAMhI,cAChC+H,aAAY,SAAAC,GAAK,OAAIA,EAAM2J,oBAqBzC,OACI,cAACT,GAAD,UACI,eAAC9C,GAAA,EAAD,CAAMiB,WAAS,EAACC,QAAS,EAAGlJ,GAAG,wBAA/B,UACI,cAACgI,GAAA,EAAD,CAAMmB,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAvB,SACI,cAACmB,GAAD,UACKO,MAGT,eAACtD,GAAA,EAAD,CAAMmB,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAvB,UACI,cAACwB,GAAD,CAASD,aAAc,0BAAGlJ,EAAU4B,WAAW,IAA/C,cAEiCvS,IAAzB2Q,EAAU4B,YACV5B,EAAU4B,WAAWrB,KAAI,SAAAgJ,GAAK,OAAI,qBAAKC,UAAU,YAA0C1F,MAAO,CAAC2F,gBAAgB,OAAD,OAAQF,EAAM,GAAd,YAAoBA,EAAM,GAA1B,YAAgCA,EAAM,GAAtC,OAAhF,UAAmCA,EAAM,IAAzC,OAA8CA,EAAM,UAG9F,eAACP,GAAD,CAAWE,aAAc,0BAAGlJ,EAAU4B,WAAW,IAAwBqH,UAAWjJ,EAAU/Q,KAAKA,KAAKtF,OAAxG,UACK,0BAAGqW,EAAU4B,WAAW,KAA0B,qBAAK4H,UAAU,eAAf,oBAGvBna,IAAxB2Q,EAAU/Q,KAAKA,MAtCrB,SAACA,GACf,QAAaI,IAATJ,EAEG,OAAIA,EAAK6F,OAAO,GAAI,KAAhB,WAA0B7F,EAAK6F,OAAO,GAAG,GAAG,MAGvD7F,EAAKya,OAAO,EAAG,EAAf,WAAsBza,EAAK,KAC3BA,EAAKya,QAAQ,EAAG,IAHLza,EAmCS0a,CAAU3J,EAAU/Q,KAAKA,MAAMsR,KAAI,SAAAqJ,GAAK,OAAI,qBAAKJ,UAAU,YAAf,SAAwCI,GAARA,YAIxF,eAAC9D,GAAD,CAAiBoB,MAAI,EAACC,GAAI,GAAIQ,GAAI,EAAlC,UACI,cAACkC,GAAA,EAAD,CACIC,QAA+B,YAAtB9J,EAAU+J,QACnBlC,SAnCC,WACS,YAAtB7H,EAAU+J,QACV9J,EAASzX,EAAa,CAACuhB,QAAQ,MAE/B9J,EAASzX,EAAa,CAACuhB,QAAQ,cAgCnBjiB,KAAK,qBAET,4BAA0B,YAAtBkY,EAAU+J,QAAwB,aAAe,wB,w5CC1GzE,IAAMC,GAAqBzM,IAAOC,IAAV,MAuLTyM,GAhHG,WAEhB,IAAMhK,EAAWC,cAFK,EAMiCR,aAAY,SAAAC,GAAK,OAAIA,EAAMuK,eAD1ElW,EALc,EAKdA,WAAYmW,EALE,EAKFA,MAAOC,EALL,EAKKA,OAAQC,EALb,EAKaA,YACjCC,EANoB,EAMpBA,mBAAoBC,EANA,EAMAA,SAAUC,EANV,EAMUA,mBAE1B9S,EAAcgI,aAAY,SAAAC,GAAK,OAAIA,EAAMjI,eAEzCqI,EAAaL,aAAY,SAAAC,GAAK,OAAIA,EAAMI,cAExC7L,EAAOwL,aAAY,SAAAC,GAAK,OAAIA,EAAMzL,QAGlCuW,EAAqB,SAACC,GAAD,gBAAaA,EAAK5V,OAAO,GAAI,GAA7B,YAAmC4V,EAAK5V,OAAO,GAAI,KAK9E,OACE,cAACkV,GAAD,CAAoBlG,MAAO,CAACY,UAAY3E,EAAWmC,KAAO,GAAK,oBAAsBnE,GAAG,aAAxF,SACE,sBAAKyL,UAAU,YAAf,UACGxV,GAAc,+BAAKA,EAAW2W,KAAhB,KAAwB3W,EAAW4W,cACjD5W,GACC,8BACE,6CAAgBA,EAAW6W,WAAWC,eAAe,WAGvDX,GAASC,GACT,8BACE,8CACgBD,EAAMrV,OAAO,GAAI,GAAGgW,eAAe,MAAM,uBADzD,iBAEiBV,EAAOtV,OAAO,GAAI,GAAGgW,eAAe,MAAM,uBAF3D,8BAG8Bta,EAAO2Z,EAAO,KAAMA,EAAMxgB,OAAO,EAAG,KAAMqK,EAAY,aAAc,KAAM,KAAM,KAAQ5E,QAAQ,GAAG0b,eAAe,MAAM,uBAHtJ,+BAI+Bta,EAAO4Z,EAAQ,KAAMA,EAAOzgB,OAAO,EAAG,KAAMqK,EAAY,aAAc,KAAM,KAAM,KAAQ5E,QAAQ,GAAG0b,eAAe,MAAM,uBAJzJ,kCAKkCta,EAAO2Z,EAAO,KAAMA,EAAMxgB,OAAO,EAAG,EAAGqK,EAAY,aAAc,KAAM,KAAM,KAAQ5E,QAAQ,GAAG0b,eAAe,MAAM,uBALvJ,mCAMmCta,EAAO4Z,EAAQ,KAAMA,EAAOzgB,OAAO,EAAG,EAAGqK,EAAY,aAAc,KAAM,KAAM,KAAQ5E,QAAQ,GAAG0b,eAAe,MAAM,uBAN1J,2BAO2B9W,EAAW+W,KAAKD,eAAe,MAAM,uBAPhE,kBAQkBta,EAAO2Z,EAAO,KAAMA,EAAMxgB,OAAO,EAAG,KAAMqK,EAAY,OAAQ,KAAM,KAAM,GAAG5E,QAAQ,GAAG0b,eAAe,MAAM,4BAIlIR,GACC,gCACE,0DACA,wDAC0BA,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,eAAe,uBAD/G,sBAEsB4S,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,UAAU,uBAFtG,4BAG4B4S,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,0BAA0BoT,eAAe,MAAM,uBAHjJ,sBAIsBR,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,aAAa,uBAJzG,mBAKmB4S,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,eAAe,uBALxG,gBAMgB4S,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,YAAY,uBANlG,4BAO4B4S,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,cAAc,uBAPhH,+BAQ+B4S,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,eAAeoT,eAAe,MAAM,uBARzI,wCASwCR,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,iBAAiB,uBAT/H,8BAU8B4S,EAAmB9V,EAAUN,EAAMwD,EAAa,qBAAsB,iBAAiB,6BAIxH8S,GACC,gCACE,0DACA,iDACmBA,EAAmBhW,EAAUN,EAAMwD,EAAa,qBAAsB,mBADzF,IAC6G,uBAD7G,oBAEoB8S,EAAmBhW,EAAUN,EAAMwD,EAAa,qBAAsB,YAF1F,IAEuG,uBAFvG,0BAG0B8S,EAAmBhW,EAAUN,EAAMwD,EAAa,qBAAsB,aAHhG,IAG8G,uBAH9G,oBAIoB8S,EAAmBhW,EAAUN,EAAMwD,EAAa,qBAAsB,WAJ1F,IAIsG,uBAJtG,yBAKyB8S,EAAmBhW,EAAUN,EAAMwD,EAAa,qBAAsB,cAL/F,IAK8G,uBAL9G,yBAMyB8S,EAAmBhW,EAAUN,EAAMwD,EAAa,qBAAsB,kBAAkB,IANjH,IAMsH,6BAIzH6S,GACC,gCACE,4DACA,kDACoBA,EAAS/V,EAAUN,EAAMwD,EAAa,WAAY,YADtE,IACmF,uBADnF,wBAEwB6S,EAAS/V,EAAUN,EAAMwD,EAAa,WAAY,eAF1E,IAE0F,6BAI7F2S,GACC,gCACE,6CACA,uDACyB,CAAC,GAAG,OAAO,SAAS,OAAOA,EAAY,IADhE,IACqE,uBADrE,uBAEuBI,EAAmBvW,EAAKwD,GAAa2S,YAAY,GAAG9R,MAAM,MAFjF,KAE0F8R,EAAY,GAFtG,IAE0G,uBAF1G,uBAGuBI,EAAmBvW,EAAKwD,GAAa2S,YAAY,GAAG9R,MAAM,MAHjF,KAG0F8R,EAAY,GAHtG,IAG0G,uBAH1G,uBAIuBI,EAAmBvW,EAAKwD,GAAa2S,YAAY,GAAG9R,MAAM,MAJjF,KAI0F8R,EAAY,GAJtG,IAI0G,uBAJ1G,uBAKuBI,EAAmBvW,EAAKwD,GAAa2S,YAAY,GAAG9R,MAAM,MALjF,KAK0F8R,EAAY,GALtG,IAK0G,uBAL1G,uBAMuBI,EAAmBvW,EAAKwD,GAAa2S,YAAY,IAAI9R,MAAM,MANlF,KAM2F8R,EAAY,IANvG,IAM4G,uBAN5G,uBAOuBI,EAAmBvW,EAAKwD,GAAa2S,YAAY,IAAI9R,MAAM,MAPlF,KAO2F8R,EAAY,IAPvG,IAO4G,uBAP5G,uBAQuBI,EAAmBvW,EAAKwD,GAAa2S,YAAY,IAAI9R,MAAM,MARlF,KAQ2F8R,EAAY,IARvG,IAQ4G,6BAK/GF,GAAS,wBAAQhI,QAhFA,kBAAMpC,EAAWmC,KAAOjC,EAAStX,EAAc,CAACuZ,MAAK,KAAWjC,EAAStX,EAAc,CAACuZ,MAAK,MAgFnEnE,GAAG,gBAAgByL,UAAWzJ,EAAWmC,KAAO,SAAW,SAA7F,SACR,qBAAK8I,QAAQ,MAAMlb,EAAE,MAAMC,EAAE,MAAM2X,QAAQ,cAA3C,SACE,mBAAGhD,UAAU,iEAAb,SACE,sBAAM7B,EAAE,gM,20BC9KtB,IAAMoI,GAAiB,WAAQ,IAAM,OAAOC,SAASC,cAAc,yBAAyBC,aAAc,SAAQ,OAAO,IAGnHC,GAAe9N,IAAOC,IAAV,MAEJ,SAAAG,GAAK,OAAIA,EAAMiH,UAgBvB0G,GAAkB/N,IAAOG,OAAV,MAIR,SAAAC,GAAK,OAAIA,EAAMiH,UAIZ,SAAAjH,GAAK,OAAmB,IAAfA,EAAMiH,OAAW,iBAAiB,mBAwD5C2G,GA1CK,WAEhB,IAAMtL,EAAWC,cAEXH,EAAaL,aAAY,SAAAC,GAAK,OAAIA,EAAMI,cAJxB,EAQkBzB,mBAAS,GAR3B,mBAQfkN,EARe,KAQDC,EARC,KAuBtB,OAFA7iB,OAAO8iB,iBAAiB,UADH,kBAAMD,EAAgBR,SAIvC,eAACI,GAAD,CAAczG,OAAQ7E,EAAW4L,MAAQ,EAAIH,EAA7C,UACI,cAAC,GAAD,IACA,cAAC,GAAD,IACA,uBACA,cAAC,GAAD,IACA,cAACF,GAAD,CAAiBnJ,QApBA,WACjBpC,EAAW4L,OACXF,EAAgBR,MAChBhL,EAAStX,EAAc,CAACgjB,OAAM,OAE9BF,EAAgBR,MAChBhL,EAAStX,EAAc,CAACgjB,OAAM,OAcc/G,OAAQ7E,EAAW4L,MAAQ,EAAIH,EAA3E,SACI,qBAAKR,QAAQ,MAAMlb,EAAE,MAAMC,EAAE,MAAM2X,QAAQ,cAA3C,SACI,mBAAGhD,UAAU,iEAAb,SACI,sBAAM7B,EAAE,8L,kWChFhC,IAAM+I,GAAmBrO,IAAOG,OAAV,KAGAV,KAyBP6O,GAhBC,SAAClO,GACb,IAAMsC,EAAWC,cAUjB,OACI,cAAC0L,GAAD,CAAkB7N,GAAIJ,EAAMI,GAAmB+N,aAT3B,SAAChE,GACrB7H,EAASxX,EAAYqf,EAAMiE,iBAQmDC,aALzD,cAKgBrO,EAAMI,K,o3ECPnD,IAAMkO,GAAyB1O,IAAOC,IAAV,MA0FtB0O,GAAoB3O,YAAO4O,KAAP5O,CAAH,MAgBjB6O,GAAQ7O,IAAOC,IAAV,MASL6O,GAAoB9O,IAAOC,IAAV,MAmaR8O,GA/ZO,SAAC3O,GACrB,IAAMsC,EAAWC,cACXqM,EAAc7M,aAAY,SAAAC,GAAK,OAAIA,EAAMzL,QACzCwD,EAAcgI,aAAY,SAAAC,GAAK,OAAIA,EAAMjI,eACzC4R,EAAkB5J,aAAY,SAAAC,GAAK,OAAIA,EAAM2J,mBAC7CtJ,EAAYN,aAAY,SAAAC,GAAK,OAAIA,EAAMK,aACvCD,EAAaL,aAAY,SAAAC,GAAK,OAAIA,EAAMI,cAExCyM,EAAkB,CACtB,eAAe,GACf,kBAAmB,CACf5U,UAAW,QACX3C,MAAO,cACP0M,UAAW,KACX5J,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,GAEV,sCAAuC,CACnC2G,UAAW,QACX3C,MAAO,cACP0M,UAAW,KACX5J,YAAa,aACbzC,MAAO,iBACP0C,UAAW,aACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,KAEV,mCAAoC,CAChC2G,UAAW,QACX3C,MAAO,cACP0M,UAAW,KACX5J,YAAa,aACbzC,MAAO,iBACP0C,UAAW,OACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,GAEV,gBAAgB,GAChB,cAAc,CACZ2G,UAAW,SACX3C,MAAO,cACP0M,UAAW,KACX5J,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,GAGR,kCAAkC,CAChC2G,UAAW,SACX3C,MAAO,cACP0M,UAAW,KACX5J,YAAa,aACbzC,MAAO,iBACP0C,UAAW,aACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,KAGR,gCAAgC,CAC9B2G,UAAW,SACX3C,MAAO,cACP0M,UAAW,KACX5J,YAAa,QACbzC,MAAO,cACP0C,UAAW,KACX/G,MAAM,GAGR,0BAA0B,GAC1B,wCAAwC,CACtC2G,UAAW,qBACX3C,MAAO,iBACP0M,UAAWnN,EAAU+X,EAAa7U,EAAa,qBAAsB,WACrEI,OAAQ,KACRC,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,EACN2Q,WAAYjJ,GAAW,WAGzB,6CAA6C,CAC3Cf,UAAW,qBACX3C,MAAO,iBACP0M,UAAWnN,EAAU+X,EAAa7U,EAAa,qBAAsB,kBACrEI,OAAQ,KACRC,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,EACN2Q,WAAYjJ,GAAW,QAEzB,+CAA+C,CAC7Cf,UAAW,WACX3C,MAAO,iBACP0M,UAAWnN,EAAU+X,EAAa7U,EAAa,WAAY,WAC3DI,OAAQ,KACRC,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,EACN2Q,WAAYjJ,GAAW,UAIrB8T,EAAkB,CACtB,qBAAqB,GACrB,qCAAsC,CACpC7U,UAAW,cACX3C,MAAO,iBACP0M,UAAWnN,EAAU+X,EAAa7U,EAAa,cAAe,kBAC9DI,OAAQ,KACRC,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,IAIJyb,EAAiB,CACrB,iBAAiB,GACjB,kCAAmC,CACjC9U,UAAW,iBACX3C,MAAO,cACP0M,UAAW,KACX7J,OAAQ,KACRC,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,GAER,yBAA0B,CACxB2G,UAAW,eACX3C,MAAO,cACP0M,UAAW,KACX7J,OAAQ,KACRC,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,GAER,sCAAsC,CACpC2G,UAAW,eACX3C,MAAO,cACP0M,UAAW,KACX7J,OAAQ,KACRC,YAAa,aACbzC,MAAO,OACP0C,UAAW,KACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,IAoFJ0b,EAAsB,SAACtM,GACvBL,EAAUK,UAAYA,GACxBJ,EAASzX,EAAa,CAAC6X,cAI3B,OACE,eAAC4L,GAAD,CAAwBnI,MAAO,CAACY,UAAY3E,EAAW6M,UAAY,GAAK,qBAAxE,UACE,eAACP,GAAD,WACE,gDAAsB,uBAAtB,oBACA,eAAC1G,GAAD,WACE,cAAC8C,GAAA,EAAD,CAAYC,QAAQ,cAApB,yBACA,eAACC,GAAA,EAAD,CACE5K,GAAG,cACHrF,MAAOhB,EACPmQ,SAxEe,SAACC,GACxB7H,EAAS/X,EAAe4f,EAAMpM,OAAOhD,SAoE/B,UAMA,cAACmU,GAAA,EAAD,0BACE,cAACjE,GAAA,EAAD,CAAUlQ,MAAO,yBAAjB,sBAAgD,0BAChD,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,qBAAjB,2BAA4C,sBAC5C,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,sBAAjB,yBAA6C,uBAC/C,cAACmU,GAAA,EAAD,yBACE,cAACjE,GAAA,EAAD,CAAUlQ,MAAO,qBAAjB,yBAA4C,sBAC5C,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,oBAA+CoU,UAAQ,EAAxE,2BAA2C,2BAG/C,uBACA,eAACnH,GAAD,WACE,cAAC8C,GAAA,EAAD,CAAYC,QAAQ,mBAApB,6BACA,eAACC,GAAA,EAAD,CACEjQ,MAAO4Q,EACPvL,GAAG,mBACH8J,SAjHa,SAACC,GACtB,IAAIiF,EAAWjF,EAAMpM,OAAOhD,MAC5BuH,E5B/FO,CACHlY,KAAM,oBACNC,QAAS,CACLF,K4B4FiBilB,KAEzB,IAAIC,EACFR,EAAgB9K,eAAeqL,GAC7BP,EAAgBO,GAClBN,EAAgB/K,eAAeqL,GAC7BN,EAAgBM,GAClBL,EAAehL,eAAeqL,GAC5BL,EAAeK,GACjB,KAEF9M,EAAS3X,EAAkB,eAAI0kB,KACL,mBAAtBhN,EAAUsB,UACR0L,EAAWtL,eAAe,cAC5BzB,EAASzX,EAAa,CAACoZ,WAAYoL,EAAWpL,cAE9C3B,EAASzX,EAAa,CAACoZ,WAAYjJ,GAAW,oBA4F5C,UAMIzF,OAAOC,KAAKqZ,GAAiBjM,KAAI,SAACwM,GAChC,MAA6B,WAAzBA,EAASxU,MAAM,KAAK,GACf,cAACsU,GAAA,EAAD,UAA6CE,EAASxU,MAAM,KAAK,IAA7CwU,EAASxU,MAAM,KAAK,IAExC,cAACqQ,GAAA,EAAD,CAAUlQ,MAAOqU,EAAjB,SAA2CA,GAAXA,MAM3CrV,EAAYpG,SAAS,WAAa4B,OAAOC,KAAKsZ,GAAiBlM,KAAI,SAACwM,GAClE,MAA6B,WAAzBA,EAASxU,MAAM,KAAK,GACf,cAACsU,GAAA,EAAD,UAA6CE,EAASxU,MAAM,KAAK,IAA7CwU,EAASxU,MAAM,KAAK,IAExC,cAACqQ,GAAA,EAAD,CAAUlQ,MAAOqU,EAAjB,SAA2CA,GAAXA,MAM3CrV,EAAYpG,SAAS,UAAY4B,OAAOC,KAAKuZ,GAAgBnM,KAAI,SAACwM,GAChE,MAA6B,WAAzBA,EAASxU,MAAM,KAAK,GACf,cAACsU,GAAA,EAAD,UAA6CE,EAASxU,MAAM,KAAK,IAA7CwU,EAASxU,MAAM,KAAK,IAExC,cAACqQ,GAAA,EAAD,CAAUlQ,MAAOqU,EAAjB,SAA2CA,GAAXA,YAMjD,uBACA,eAACpH,GAAD,CAAgBE,UAAU,QAA1B,UACE,cAACoH,GAAA,EAAD,CAAWpH,UAAU,SAArB,sBACA,eAACqH,GAAA,EAAD,CACEC,aAAW,UACXrlB,KAAK,WACL+f,SA7HY,SAACC,EAAOC,GAG1B9H,EACEzX,EAFa,SAAbuf,EAGE,CACEzG,QAASyG,EACTqF,MAAO,EACPne,KAAM2J,GAAYmP,GAClBnG,WAAYjJ,GAAYoP,IAO1B,CACEqF,MAhBiB,mBAAbrF,EAAgC,EAAI,EAiBxCzG,QAASyG,MA4GTrP,MAAOsH,EAAUsB,QAJnB,UAME,cAAC+L,GAAA,EAAD,CACE3U,MAAM,iBAEN4U,QAAS,cAACC,GAAA,EAAD,IACT3D,MAAM,kBAFF,kBAIN,cAACyD,GAAA,EAAD,CACE3U,MAAM,iBAEN4U,QAAS,cAACC,GAAA,EAAD,IACT3D,MAAM,WAFF,kBAIN,cAACyD,GAAA,EAAD,CACE3U,MAAM,OAEN4U,QAAS,cAACC,GAAA,EAAD,IACT3D,MAAM,eAFF,cAMV,mDACA,eAACsC,GAAD,CAAmB3C,MAAM,UAAU4D,aAAW,oBAA9C,UACE,cAACjH,GAAA,EAAD,CAAQsD,UAAiC,OAAtBxJ,EAAUK,QAAmB,SAAW,GAAImN,WAAS,KAAkBrL,QAAS,kBAAMwK,EAAoB,OAA7H,eAAiF,UACjF,cAACzG,GAAA,EAAD,CAAQsD,UAAiC,OAAtBxJ,EAAUK,QAAmB,SAAW,GAAImN,WAAS,KAAkBrL,QAAS,kBAAMwK,EAAoB,OAA7H,eAAiF,UACjF,cAACzG,GAAA,EAAD,CAAQsD,UAAiC,cAAtBxJ,EAAUK,QAA0B,SAAW,GAAImN,WAAS,YAAgCrL,QAAS,kBAAMwK,EAAoB,cAAlJ,sBAA+F,oBAEjG,uBACA,eAACP,GAAD,WACE,eAACzG,GAAD,WACE,cAAC8C,GAAA,EAAD,CAAYC,QAAQ,iBAApB,qBACA,eAACC,GAAA,EAAD,CACE5K,GAAG,iBACHrF,MAAOsH,EAAUU,QACjBmH,SAxIa,SAACC,GACxB7H,EACEzX,EACE,CACEkY,QAASoH,EAAMpM,OAAOhD,UAiIpB,UAKE,cAACkQ,GAAA,EAAD,CAAUlQ,MAAM,GAAhB,iBAAwB,QACxB,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,+BAAjB,yCAAsD,gCACtD,eAACkQ,GAAA,EAAD,CAAUlQ,MAAO,oBAAjB,mCAAsF,cAAC,GAAD,CAASqF,GAAG,sBAAvD,qBAC3C,eAAC6K,GAAA,EAAD,CAAUlQ,MAAO,YAAjB,gCAAmE,cAAC,GAAD,CAASqF,GAAG,gBAA5C,aACnC,eAAC6K,GAAA,EAAD,CAAUlQ,MAAO,4BAAjB,wCAA2G,cAAC,GAAD,CAASqF,GAAG,iBAApE,mCAGvD,eAAC4H,GAAD,WACE,cAAC8C,GAAA,EAAD,CAAYC,QAAQ,kBAApB,sBACA,eAACC,GAAA,EAAD,CACE5K,GAAG,kBACHrF,MAAOsH,EAAUS,SACjBoH,SA5Ic,SAACC,GACzB7H,EACEzX,EACE,CACEiY,SAAUqH,EAAMpM,OAAOhD,UAqIrB,UAKE,cAACkQ,GAAA,EAAD,CAAUlQ,MAAM,GAAhB,iBAAuB,QACvB,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,oBAAjB,kCAA2C,aAC3C,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,UAAjB,oBAAiC,aACjC,cAACkQ,GAAA,EAAD,CAAUlQ,MAAO,YAAjB,sBAAmC,yBAK3C,oBAAG8Q,UAAU,OAAb,2NAGsB,mBAAG/N,KAAK,YAAR,kBAHtB,KAGoD,mBAAGA,KAAK,eAAR,qBAHpD,SAIM,mBAAGA,KAAK,WAAR,iBAJN,oBAMA,qBAAK+N,UAAU,iBAAf,SACM,oBAAG/N,KAAK,gCAAgCC,OAAO,SAASC,IAAI,sBAA5D,UACE,qBAAK8R,IAAG,UAAKzQ,IAAL,gCADV,wBAKN,wBAAQmF,QAxJY,WAClBpC,EAAW6M,UACb3M,EAAStX,EAAc,CAACikB,WAAU,KAElC3M,EAAStX,EAAc,CAACikB,WAAU,MAoJA7O,GAAG,eAAeyL,UAAWzJ,EAAW6M,UAAY,SAAW,SAAjG,SACE,qBAAK5B,QAAQ,MAAMlb,EAAE,MAAMC,EAAE,MAAM2X,QAAQ,cAA3C,SACE,mBAAGhD,UAAU,iEAAb,SACE,sBAAM7B,EAAE,8L,2UCvhBpB,IAAM6K,GAAiBnQ,YAAOwI,KAAPxI,CAAH,MAIdoQ,GAAapQ,IAAOwL,GAAV,MAQV6E,GAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,OAAQ,OAAQ,MAAO,MAAO,MAAO,MAAO,OAE7FC,GAAmB,SAAA1c,GAAS,MAAM,GAAN,OAAUA,EAAI,IAAd,MAC5B2c,GAAoB,SAAA3c,GAAS,MAAM,GAAN,OAAUA,EAAI,IAAd,MAC7B4c,GAAgB,SAAA5c,GAClB,IAAI6c,EAAW,IAAIpZ,KAAKzD,GAAK8c,WAC7B,MAAM,GAAN,OAAUL,GAAWI,KAGnBE,GAAa,SAAAvQ,GACf,OAAO,gDAAUA,GAAV,aAAkBA,EAAMwQ,eAAexQ,EAAM3V,QAAQ0Q,WAG1D0V,GAAe,SAACxd,EAAOD,EAAO9I,GAChC,GAAc,OAAV+I,EACA,IACI,OAAO/I,EAAKiN,MAAM,EAAE,GAAG,GAAGzM,KAC5B,SACE,OAAO,UAGX,IACI,OAAOR,EAAK8I,EAAMC,GAAOvI,KAC3B,SACE,OAAO,OAKbgmB,GAAa,SAAC1d,EAAO9I,GACvB,IACI,OAAOA,EAAK8I,GAAOtI,KACrB,SACE,OAAO,OAITimB,GAAgB,SAAA3Q,GAClB,GAAIA,EAAM4Q,OAAQ,CACd,IAAI1mB,EAAO8V,EAAM3V,QACjB,OACI,sBACI8b,MAAO,CACH0K,WAAW,UACXC,QAAQ,WACRC,aAAa,MACbC,UAAW,0GALnB,UAQA,mBAAG7K,MAAO,CAACyF,MAAM,QAASkF,QAAQ,GAAlC,SAAwC5mB,EAAK,GAAGG,QAAQK,OACnDR,EAAK0Y,KAAI,SAAA1Y,GAAI,OACV,oBAAGic,MAAO,CAACyF,MAAO1hB,EAAK0hB,MAAOqF,WAAY,sBAAuBC,WAAW,KAA5E,UAAmFhnB,EAAKC,KAAxF,KAAgGkB,OAAOiL,UAAUpM,EAAKG,QAAQH,EAAKinB,UAC/HjnB,EAAKG,QAAQH,EAAKinB,SAAShE,eAAe,MACxCjjB,EAAKG,QAAQH,EAAKinB,kBAOxC,OAAO,MA0GIC,GAvGO,WAElB,IAAMC,EAAYtP,aAAY,SAAAC,GAAK,OAAIA,EAAMqP,aACvCrX,EAAa+H,aAAY,SAAAC,GAAK,OAAIA,EAAMhI,cAHtB,EAIQ2G,oBAAS,GAJjB,mBAIjB2Q,EAJiB,KAIPC,EAJO,KAWxB,OACI,eAACxB,GAAD,CAAgB1G,WAAS,EAACC,QAAS,EAAGlJ,GAAG,uBAAzC,UACI,cAACgI,GAAA,EAAD,CAAMmB,MAAI,EAACC,GAAI,GAAf,SACI,cAACwG,GAAD,4CAEJ,cAAC5H,GAAA,EAAD,CAAMmB,MAAI,EAACC,GAAI,GAAIrD,MAAO,CAAC5H,OAAO,QAAlC,SACI,cAAC,KAAD,CAAqBD,MAAM,OAAOC,OAAO,OAAzC,SACI,eAAC,KAAD,CACIrU,KAAMmnB,EACNG,OAAQ,CACJnL,IAAK,GAAIW,MAAO,GAAIZ,KAAM,GAAIa,OAAQ,IAH9C,UAOI,cAAC,KAAD,CACIkK,QAAQ,OAERM,KACI,cAAC,GAAD,CACAtL,MAAO,CACHuL,KAAM,YACNC,SAAU,OACVC,WAAY,OACZV,WAAY,IACZnK,UAAU,oBAEdyJ,eAAgBJ,OAKxB,cAAC,KAAD,CAAOyB,QAAQ,OAAOznB,KAAK,SAAS+mB,QAAQ,QAAS7d,MAAOge,EAAW,MAAQ,SAAUQ,OAAQ,CAAC,IAAM,WAAYC,mBAAiB,EACjIC,MAAO,CAAC,IAAQ,IAAQ,IAAQ,IAAQ,KACxCP,KACI,cAAC,GAAD,CACAtL,MAAO,CACHuL,KAAM,UACNC,SAAU,OACVC,WAAY,OACZV,WAAY,KAEhBV,eAAgBN,KAVxB,SAcI,cAAC,KAAD,CAAOnV,MAAM,cAAcgL,SAAS,aAAaI,MAAO,CAAC8L,UAAU,GAAIP,KAAK,UAAWE,WAAY,OAAQV,WAAY,KAAMgB,OAAQ,OAEzI,cAAC,KAAD,CAAOL,QAAQ,QAAQM,YAAY,QAAQhB,QAAQ,WAAW7d,MAAOge,EAAW,MAAQ,SAAUQ,OAAQ,CAAC,IAAM,WAAYC,mBAAiB,EAC1IC,MAAO,CAAC,IAAM,IAAM,IAAM,IAAM,IAAQ,KAAQ,MAChDP,KACI,cAAC,GAAD,CACItL,MAAO,CACHuL,KAAM,UACNC,SAAU,OACVC,WAAY,OACZV,WAAY,KAEhBV,eAAgBL,KAV5B,SAcI,cAAC,KAAD,CAAOpV,MAAM,cAAcgL,SAAS,iBAAiBI,MAAO,CAAC8L,UAAU,GAAIP,KAAK,UAAWE,WAAY,OAAQV,WAAY,KAAMgB,OAAQ,OAE7I,cAAC,KAAD,CACInK,QAAS4I,KAEb,cAAC,KAAD,CACIkB,QAAQ,OACRO,GAAI3B,GAAazW,EAAWG,OAAQH,EAAWE,OAAQmX,GACvDgB,GAAI3B,GAAW1W,EAAWE,OAAQmX,GAClCK,KAAK,QACLY,YAAa,IACbC,mBAAmB,IAEvB,cAAC,KAAD,CAAMnoB,KAAK,WAAWynB,QAAQ,OAAOV,QAAQ,QAAQhnB,KAAK,cAAcqoB,OAAO,UAAUC,KAAK,IAC9F,cAAC,KAAD,CAAMroB,KAAK,WAAWynB,QAAQ,QAAQV,QAAQ,WAAWhnB,KAAK,cAAcqoB,OAAO,UAAUC,KAAK,WAI9G,eAACtK,GAAD,CAAiBoB,MAAI,EAACC,GAAI,GAAIrD,MAAO,CAACJ,SAAS,WAAYiB,MAAM,EAAGC,OAAO,IAA3E,UACI,cAACiF,GAAA,EAAD,CACIC,QAASmF,EACTpH,SAtFK,WACjBqH,GAAY,SAAAmB,GAAI,OAAKA,MAsFTvoB,KAAK,mBACLwoB,WAAY,CAAE,aAAc,wBAEhC,4BAAIrB,EAAW,YAAc,wB,UCpH9BsB,GA5DC,WAEZ,IAAMtQ,EAAWC,cAEXxX,EAAWgX,aAAY,SAAAC,GAAK,OAAIA,EAAMjX,YACtC8nB,EAAOC,QAAQ/nB,GACfqV,EAAKyS,EAAO,qBAAkBnhB,EAUpC,OACI,cAACqhB,GAAA,EAAD,CACI3S,GAAIA,EACJyS,KAAMA,EACN9nB,SAAUA,EACVioB,UAAU,OACVC,eAAe,EACfC,UAAW,CACPC,KAAM,CACNC,SAAS,GAETC,gBAAiB,CACjBD,SAAS,EACTE,kBAAmB,iBAGvBnN,MAAO,CACHe,OAAO,IACPqM,SAAS,QACT1C,WAAW,OACXC,QAAQ,EACRU,OAAO,EACP1J,cAAe,QAEnBqG,aAhCgB,SAAChE,GACrB7H,EAASxX,EAAYC,KAgCjBsjB,aA7BiB,WACrB/L,EAASxX,EAAY,QAIrB,SA0BI,qBAAKqb,MAAO,CACR0K,WAAW,QACXC,QAAQ,WACRU,OAAO,EACPT,aAAc,MACdnF,MAAM,QACN7E,UAAU,kBACViK,UAAW,yGACXlJ,cAAe,OARnB,SAWK/c,GAAY0Q,GAAY1Q,EAASqV,SCxBnCoT,GAhCW,SAACxT,GAAU,MAEcA,EAAM+H,QAA7C1R,EAFyB,EAEzBA,WAAYmW,EAFa,EAEbA,MAAOC,EAFM,EAENA,OAAQgH,EAFF,EAEEA,QAG/BC,EAAQlH,GAASA,EAAMxgB,OAAO,EAC9B2nB,EAASlH,GAAUA,EAAOzgB,OAAO,EACtBynB,GAAWA,EAAQznB,OAIlC,OAAIqK,GAAcmW,GAASC,EAEnB,gCACI,+BACKpW,EAAW2W,KADhB,IACuB3W,EAAW4W,YAAX,YAA8B5W,EAAW4W,eAEhE,0CACYT,EAAMkH,GAAOvG,eAAe,MAAM,uBAD9C,WAEaV,EAAOkH,GAAQxG,eAAe,MAAM,uBAFjD,eAGiBX,EAAMkH,GAAOlH,EAAMkH,EAAM,IAAIvG,eAAe,MAAM,uBAHnE,gBAIkBV,EAAOkH,GAAQlH,EAAOkH,EAAO,IAAIxG,eAAe,MAAM,6BAM5E,yBCZGyG,GAnBA,WACX,OACI,sBAAK/H,UAAU,SAAf,UACI,sBAAKA,UAAU,WAAf,UACE,qBAAKiE,IAAG,UAAKzQ,IAAL,qCAAgE8G,MAAO,CAAC5H,OAAQ,OAAQsV,aAAc,SAAU,mBAAG/V,KAAK,aAAR,gCAE5H,+BACE,6BAAI,mBAAGA,KAAK,YAAR,oBACJ,6BAAI,mBAAGA,KAAK,WAAR,mBACJ,6BAAI,mBAAGA,KAAK,eAAR,uBACJ,6BAAI,mBAAGA,KAAK,WAAR,mBACJ,6BAAI,mBAAGA,KAAK,aAAR,wBACJ,6BAAI,mBAAGA,KAAK,aAAR,qBACJ,6BAAI,mBAAGA,KAAK,eAAR,8B,+nCCXhB,IAAMgW,GAAqBlU,IAAOC,IAAV,MA+ETkU,GAvBG,SAAE/T,GAOhB,OALIA,EAAM6G,QACNmN,YAAW,WACPzG,SAASC,cAAc,uBAAuBrH,MAAM8N,QAAU,SAC/D,KAGH,cAACH,GAAD,CAAoBjI,UAAW7L,EAAM6G,OAAS,UAAY,GAAIzG,GAAG,qBAAjE,SACI,qBAAK0P,IAAG,UAAKzQ,IAAL,6BAAwD6U,IAAI,iBCsPjEC,OAjTf,WACE,IAAMrS,EAAaC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,cACxCG,EAAgBF,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAC3CC,EAAiBH,aAAY,SAAAC,GAAK,OAAIA,EAAME,kBAC5CC,EAAsBJ,aAAY,SAAAC,GAAK,OAAIA,EAAMG,uBACjDpI,EAAcgI,aAAY,SAAAC,GAAK,OAAIA,EAAMjI,eACzC6U,EAAc7M,aAAY,SAAAC,GAAK,OAAIA,EAAMzL,QACzCiC,EAAQuJ,aAAY,SAAAC,GAAK,OAAIA,EAAMxJ,SACnC6J,EAAYN,aAAY,SAAAC,GAAK,OAAIA,EAAMK,aACvCrI,EAAa+H,aAAY,SAAAC,GAAK,OAAIA,EAAMhI,cACxC4O,EAAiB7G,aAAY,SAAAC,GAAK,OAAIA,EAAM4G,kBAC5CwL,EAAYrS,aAAY,SAAAC,GAAK,OAAIA,EAAMoS,aAXhC,EAasBzT,mBAAS,MAb/B,mBAaN9M,EAbM,KAaKwgB,EAbL,KAeP/R,EAAWC,cAYX+R,EAAa,SAACpqB,EAAMqqB,GAExB,IADA,IAAInf,EAAM,GACDtI,EAAE,EAAGA,EAAI5C,EAAK8B,OAAQc,IAC7BsI,EAAImf,EAAMznB,IAAM5C,EAAK4C,GAAG,GAE5B,OAAOsI,GAhCM,SAmCEof,EAnCF,wFAmCb,WAAwBnZ,EAASoZ,EAAMlZ,EAAUgZ,EAAOpf,EAAYtB,GAApE,eAAAC,EAAA,sDACQ4gB,EAAcD,EAAK7R,KAAI,SAAAtH,GAAG,OAAI3F,EAAY,GAAD,OAAI0J,IAAJ,gBAAkC/D,EAAlC,QAA6CC,EAAS,GAAIpG,EAAWxB,SAAS2H,IAAMtH,MAAK,SAAAnI,GAAW,OAAOA,QAC1JgJ,QAAQ8f,IAAR,CACEjgB,EAAQ,GAAD,OAAI2K,IAAJ,oBAAsChE,GAAWxH,IAD1D,mBAEK6gB,KACF1gB,MAAK,SAAAtF,GACN4T,EAAShY,EAAaoE,EAAO,GAAP,WAAyB2M,IAC/C,IAAI5G,EAAWmB,EAAUlH,EAAO,GAAP,KAAmB6M,EAAS,GAAI7M,EAAOyI,MAAM,GAAKod,EAAOhZ,EAAS,IAC3F+G,EAASrY,EAAUwK,EAAU4G,IAC7BiH,EAAS/X,EAAe8Q,IACxBiH,EAAS9X,EAAe8pB,EAAW5lB,EAAOyI,MAAM,GAAKod,GAAQlZ,OAVjE,4CAnCa,sBAyQb,OAvNAmH,qBAAU,YACY,SAAdoS,IACJZ,YAAW,gBACatiB,IAAlBzG,OAAOC,OACT0pB,IAEkB,OAAd/gB,GACFwgB,EAAc,IAAI/oB,KAGrB,KAGLspB,KACA,CAAC3pB,OAAOC,SAGVsX,qBAAU,WACW,OAAd3O,GAAwC,KAAhBkG,GAC3Bya,EACE,yBACA,CAAC,2BAA2B,wBAAyB,uBAAwB,qBAAsB,WAAY,sBAC/G,CAAC,QAAS,QACV,CAAC,QAAQ,SAAU,cAAe,qBAAsB,WAAY,sBACpE,GACA3gB,KAGJ,CAACA,IAEH2O,qBAAU,WACW,OAAd3O,GAAwC,KAAhBkG,QACKrI,IAA5BoQ,EAAW/H,IACbya,EACEpZ,GAAYrB,GAAasB,QACzBD,GAAYrB,GAAauB,IACzBF,GAAYrB,GAAawB,SACzBH,GAAYrB,GAAayB,WACzBJ,GAAYrB,GAAa5E,WACzBtB,KAIN,CAACkG,IAIHyI,qBAAU,WACW,IAAfzI,IACGvB,EAAMuL,eAAehK,KAlFT,SAACsB,EAASxH,GAAeyO,ElCuDrC,CACHlY,KAAM,gBACNC,QAAS,CACLH,KkC1D0D2J,EAAUghB,aAAaxZ,GlC2DjFlR,KkC3D2FkR,KAmF/FyZ,CAAa/a,EAAalG,GAjFf,SAAC3J,EAAMyM,EAAO0E,GAC7B,IAAI7C,EAAQlD,EAAUpL,EAAKyM,IAC3B2L,ElC6DoB,SAACpY,EAAMC,GAC3B,MAAO,CACHC,KAAM,YACNC,QAAS,CACLH,OACAC,SkClEC4qB,CAASvc,EAAM,GAAI6C,IAC5BiH,EAAS7X,EAAQ+N,EAAM,GAAGrB,OAAO,GAAI,KACrCmL,EAAS3X,EAAkB,CAACuP,OAAQxD,EAASxM,EAAMyM,EAAO6B,EAAM,GAAGrB,OAAO,GAAI,OAC9EmL,ElCkHO,CACHlY,KAAM,uBACNC,QAAS,CACL2I,MkCrHmBwF,EAAM,MA6E7Bwc,CAASpG,EAAY7U,GAAc,QAASA,OAGhD,CAAC6U,IAEHpM,qBAAU,WACJV,EAAW/H,IACbuI,ElCmGK,CACHlY,KAAM,iBACNC,QAAS,CACLH,KkCpGFoO,EACEwJ,EAAW/H,GACX,QACA6O,EACApQ,EAAMuB,SAKb,CAAC6O,IAGJpG,qBAAU,WAER,GADApK,QAAQC,IAAI,sBACM,OAAdxE,GAA4C,SAAtBwO,EAAUsB,QAAmB,CACrD,IAAIsR,EAASnb,EAASC,EAAaC,GAC7BkI,EAAe6B,eAAekR,IAClC3S,ElCjGG,CACHlY,KAAM,uBACNC,QAAS,CACLH,KkCgGAmP,EACExF,EACAkG,EACAlB,EACEiJ,EAAW/H,GACXC,EAAWC,UACXD,EAAW1C,MACX0C,EAAWgK,UACXhK,EAAWE,OACXF,EAAWG,OACXH,EAAWI,YACXJ,EAAWrC,MACXqC,EAAWK,UACXL,EAAWM,OACXN,EAAWO,OACXP,EAAW1G,MACX2O,EAAclI,GAAaU,alC/G/BtQ,KkCkHA8qB,KAKR,GAAkB,OAAdphB,GAA4C,cAAtBwO,EAAUK,QAAwB,CAC1D,IAAIuS,EAASnb,EAASC,EAAaC,GAC7BmI,EAAoB4B,eAAekR,IACvC3S,ElCpH0B,SAACpY,EAAMC,GACrC,MAAO,CACHC,KAAM,4BACNC,QAAS,CACLH,OACAC,SkCgHF+qB,CACEra,EACEhH,EACAkG,EACAlB,EACEiJ,EAAW/H,GACXC,EAAWC,UACXD,EAAW1C,MACX0C,EAAWgK,UACXhK,EAAWE,OACXF,EAAWG,OACXH,EAAWI,YACXJ,EAAWrC,MACXqC,EAAWK,UACXL,EAAWM,OACXN,EAAWO,OACXP,EAAW1G,MACX2O,EAAclI,GAAaU,aAG/Bwa,OAKP,CAACjb,EAAYqI,IAGhBG,qBAAU,WACR,GAAkB,OAAd3O,GAAsC,KAAhBkG,GAA4C,SAAtBsI,EAAUsB,QACxD,GAA6B,OAAzBtB,EAAU8S,WACZ7S,EACEzX,EAAa,CACXyG,KAAM2J,GAAYoH,EAAU8S,YAC5BlR,WAAYjJ,GAAYqH,EAAU8S,mBAGjC,CACL,IAAIC,EAAKvhB,EAAU3C,cACjB6I,EACAsI,EAAUsB,QACVtB,EAAUoN,MACV,KACArY,EACE0K,EAAW/H,GACXC,EAAWC,UACXD,EAAW1C,MACX0C,EAAWgK,UACW,YAAtB3B,EAAU+J,QAAwBpS,EAAWE,OAAS,KACtDF,EAAWG,OACXH,EAAWI,YACXJ,EAAWrC,MACXqC,EAAWK,UACW,YAAtBgI,EAAU+J,QAAwBpS,EAAWM,OAAS,KACtDN,EAAWO,OACXP,EAAW1G,QAIfgP,EACEzX,EAAa,CACXyG,KAAM,CACJA,KAA4B,mBAAtB+Q,EAAUsB,QAA+ByR,EAAG9jB,KAAO,CAAC,gBAAgB,QAAQ,SAAS,SAAS,OAAO,iBAC3GH,OAAO,EAAG+J,KAAKC,IAAI,GAAI,KAAjB,mBAAyBia,EAAGjkB,OAAOgG,MAAM,GAAG,IAA5C,CAAgD+D,KAAKC,IAAI,GAAI,OAErE8I,WAAYjJ,GAAYqH,EAAUsB,eAKzC,CAACnL,EAAOwB,EAAWC,UAAWD,EAAWgK,UAAWhK,EAAWG,OAAQH,EAAWI,YAAaJ,EAAWK,UAAWL,EAAWO,OAAQP,EAAW1G,MAAO+O,EAAUsB,UAGvKnB,qBAAU,WACR,GAAkB,OAAd3O,GAA4C,YAAtBwO,EAAU+J,SAAyC,KAAhBrS,GAA4C,SAAtBsI,EAAUsB,QAAmB,CAC9G,IAAIyR,EAAKvhB,EAAU3C,cACjB6I,EACAsI,EAAUsB,QACVtB,EAAUoN,MACV,KACArY,EACE0K,EAAW/H,GACXC,EAAWC,UACXD,EAAW1C,MACX0C,EAAWgK,UACXhK,EAAWE,OACXF,EAAWG,OACXH,EAAWI,YACXJ,EAAWrC,MACXqC,EAAWK,UACXL,EAAWM,OACXN,EAAWO,OACXP,EAAW1G,QAGfgP,EACEzX,EAAa,CACXyG,KAAM,CACJA,KAA4B,mBAAtB+Q,EAAUsB,QAA+ByR,EAAG9jB,KAAO,CAAC,gBAAgB,QAAQ,SAAS,SAAS,OAAO,iBAC3GH,OAAO,EAAG+J,KAAKC,IAAI,GAAI,KAAjB,mBAAyBia,EAAGjkB,OAAOgG,MAAM,GAAG,IAA5C,CAAgD+D,KAAKC,IAAI,GAAI,OAErE8I,WAAYjJ,GAAYqH,EAAUsB,eAKvC,CAAC3J,EAAWE,OAAQF,EAAWM,OAAQ+H,EAAU+J,UAGlD,sBAAKP,UAAU,MAAf,UACE,cAAC,GAAD,CAAWhF,OAAQuN,IACnB,cAAC,GAAD,IA0BA,sBAAKhU,GAAG,gBAAR,UACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,W,UCnTKiV,GAAgB,CAC3BC,WAAY,KACZxT,WAAY,GACZG,cAAe,GACfC,eAAgB,GAChBC,oBAAqB,GACrBoT,UAAW,GACXhf,KAAM,GACNwD,YAAa,GACbsX,UAAW,CAAC,IACZxkB,UAAW,GACX2L,MAAO,GACPgd,SAAU,GACVC,cAAe,GACf7M,eAAgB,GAChB+C,gBAAiB,sCACjB+J,cAAe,iBACfC,eAAgB,GAChBC,gBAAiB,GACjB5b,WAAY,CACVC,UAAW,QACX3C,MAAO,cACP0M,UAAW,KACX7J,OAAQ,EACRD,OAAO,KACPE,YAAa,aACbzC,MAAO,iBACP0C,UAAW,aACXE,OAAO,KACPD,OAAO,KACPhH,MAAM,KAER+O,UAAW,CACTsB,QAAS,iBACTrS,KAAM,CACJA,KAAM,GACNH,OAAQ,IAEVib,QAAS,GACT+I,WAAY,KACZ1F,MAAO,EACP/M,QAAS,KACTmT,YAAa,GACb9S,QAAS,GACTD,SAAU,GACVmB,WAAY,CACV,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,KACT,CAAC,IAAI,IAAI,IACT,CAAC,IAAI,IAAI,IACT,CAAC,IAAI,GAAG,IACR,CAAC,IAAI,GAAG,IACR,CAAC,IAAI,EAAE,MAGX7B,WAAY,CACV6M,WAAU,EACV1K,MAAK,EACLyJ,OAAM,GAER8H,YAAa,KACbC,aAAc,GACdxJ,YAAa,GACbxhB,SAAU,KACVqpB,WAAW,GC+IE4B,GA/MD,WAAoC,IAAnChU,EAAkC,uDAA1BqT,GAAeY,EAAW,uCAC7C,OAAOA,EAAO7rB,MACV,IAAK,YACD,OAAO,2BACA4X,GADP,IAEI+T,aAAcE,EAAO5rB,QAAQ6rB,QAErC,IAAK,kBACD,IAAIC,EAAG,eACAnU,EAAMF,YAGb,OADAqU,EAAIF,EAAO5rB,QAAQF,MAAQ8rB,EAAO5rB,QAAQH,KACnC,2BACA8X,GADP,IAEIF,WAAYqU,IAEpB,IAAK,qBACD,IAAIC,EAAU,eACPpU,EAAMC,eAGb,OADAmU,EAAWH,EAAO5rB,QAAQF,MAAQ8rB,EAAO5rB,QAAQH,KAC1C,2BACA8X,GADP,IAEIC,cAAemU,IAEvB,IAAK,uBACD,IAAIC,EAAO,eACJrU,EAAME,gBAGb,OADAmU,EAAQJ,EAAO5rB,QAAQF,MAAQ8rB,EAAO5rB,QAAQH,KACvC,2BACA8X,GADP,IAEIE,eAAgBmU,IAExB,IAAK,4BACD,IAAIC,EAAQ,eACLtU,EAAMG,qBAGb,OADAmU,EAASL,EAAO5rB,QAAQF,MAAQ8rB,EAAO5rB,QAAQH,KACxC,2BACA8X,GADP,IAEIG,oBAAqBmU,IAE7B,IAAK,gBACD,IAAIC,EAAY,eACTvU,EAAMnV,WAGb,OADA0pB,EAAaN,EAAO5rB,QAAQF,MAAQ8rB,EAAO5rB,QAAQH,KAC5C,2BACA8X,GADP,IAEInV,UAAW0pB,IAEnB,IAAK,mBACD,OAAO,2BACAvU,GADP,IAEIjI,YAAakc,EAAO5rB,QAAQH,OAEpC,IAAK,kBACD,OAAO,2BACA8X,GADP,IAEIsT,WAAYW,EAAO5rB,QAAQmsB,QAEnC,IAAK,YACD,IAAIC,EAAQ,eACLzU,EAAMxJ,OAGb,OADAie,EAASR,EAAO5rB,QAAQF,MAAQ8rB,EAAO5rB,QAAQH,KACxC,2BACA8X,GADP,IAEIxJ,MAAOie,IAEf,IAAK,oBACD,OAAO,2BACAzU,GADP,IAEI0U,cAAeT,EAAO5rB,QAAQssB,KAEtC,IAAK,mBACD,IAAIC,EAAM,eACH5U,EAAMzL,MAGb,OADAqgB,EAAOX,EAAO5rB,QAAQF,MAAQ8rB,EAAO5rB,QAAQH,KACtC,2BACA8X,GADP,IAEIzL,KAAMqgB,IAEd,IAAK,gBACD,OAAO,2BACA5U,GADP,IAEIwT,SAAUS,EAAO5rB,QAAQK,OAEjC,IAAK,iBACD,OAAO,2BACAsX,GADP,IAEIyT,cAAeQ,EAAO5rB,QAAQ2I,QAEtC,IAAK,uBACD,OAAO,2BACAgP,GADP,IAEI4G,eAAgBqN,EAAO5rB,QAAQ2I,QAEvC,IAAK,WACD,IAAI6jB,EAAU,GAGd,OAFAA,EAAO,KAAYZ,EAAO5rB,QAAQiH,KAClCulB,EAAO,OAAcZ,EAAO5rB,QAAQ8G,OAC7B,2BACA6Q,GADP,IAEI1Q,KAAMulB,IAEd,IAAK,SACD,OAAO,2BACA7U,GADP,IAEI8U,OAAQ9U,EAAM8U,QAEtB,IAAK,mBACD,OAAO,2BACA9U,GADP,IAEIuK,YAAa0J,EAAO5rB,QAAQH,OAEpC,IAAK,iBACD,IAAI6sB,EAAO,eACJ/U,EAAMhI,YAEb,OAAIic,EAAO5rB,QAAQ2I,MAAMgP,EAAMhI,WAAWE,OAAS8H,EAAMxJ,MAAMwJ,EAAMjI,aAAa/N,QAC9E+qB,EAAQ7c,OAAS8H,EAAM4G,eACvBmO,EAAQzc,OAAS0H,EAAM4G,eAChB,2BACA5G,GADP,IAEIhI,WAAW+c,MAGfA,EAAQ7c,OAAS6c,EAAQ7c,OAAS+b,EAAO5rB,QAAQ2I,MACjD+jB,EAAQzc,OAASyc,EAAQzc,OAAS2b,EAAO5rB,QAAQ2I,MAC1C,2BACAgP,GADP,IAEIhI,WAAW+c,KAGvB,IAAK,sBACD,IAAIC,EAAQ,2BACLhV,EAAMhI,YACNic,EAAO5rB,QAAQO,QAWtB,MARuB,gBAAnBosB,EAAS1f,OAA+C,OAApB0f,EAAS9c,SAC7C8c,EAAS9c,OAAS8H,EAAMiV,YACxBD,EAAS7c,OAAS6H,EAAM8T,aAEL,gBAAnBkB,EAASrf,OAA+C,OAApBqf,EAAS1c,SAC7C0c,EAAS1c,OAAS0H,EAAMiV,YACxBD,EAASzc,OAASyH,EAAM8T,aAEL,mBAAnBkB,EAAS1f,OAAyD,gBAA3B0K,EAAMhI,WAAW1C,MACjD,2BACA0K,GADP,IAEIiV,YAAajV,EAAMhI,WAAWE,OAC9B4b,YAAa9T,EAAMhI,WAAWG,OAC9BH,WAAYgd,IAGT,2BACAhV,GADP,IAEIhI,WAAYgd,IAGxB,IAAK,iBACD,IAAIE,EAAW,2BACRlV,EAAMK,WACN4T,EAAO5rB,QAAQO,QAEtB,OAAO,2BACAoX,GADP,IAEIK,UAAW6U,IAEnB,IAAK,aACD,IAAIC,EAAS,2BACNnV,EAAMI,YACN6T,EAAO5rB,QAAQO,QAEtB,OAAO,2BACAoX,GADP,IAEII,WAAY+U,IAEpB,IAAK,oBACD,OAAO,2BACAnV,GADP,IAEI2J,gBAAiBsK,EAAO5rB,QAAQF,OAExC,IAAK,iBACD,OAAO,2BACA6X,GADP,IAEIqP,UAAW4E,EAAO5rB,QAAQH,OAElC,IAAK,gBACD,OAAO,2BACA8X,GADP,IAEIjX,SAAUkrB,EAAO5rB,QAAQU,WAEjC,IAAK,iBACD,OAAO,2BACAiX,GADP,IAEIoS,UAAW6B,EAAO5rB,QAAQwc,SAElC,QACI,OAAO7E,I,8BCpMboV,GAAQC,aACZrB,GACA/qB,OAAOqsB,8BAAgCrsB,OAAOqsB,gCAIhDC,KAAQC,KAAK,CACXC,OAAQ,CACNC,SAAU,CAAC,uBAAwB,wBAAyB,iBAIhEC,IAASC,OAEL,cAAC,IAAD,CAAUR,MAAOA,GAAjB,SACE,cAAC,GAAD,MAGJ7J,SAASsK,eAAe,W","file":"static/js/main.1078f03a.chunk.js","sourcesContent":["// These actions are part of the verbose boilerplate of redux\r\n// As part of the Flux architecture, these connect the dispatch from a component to the reducers\r\n\r\n// set active GEOID \r\n// currently not used\r\nexport const setGeoid = (geoid) => {\r\n    return {\r\n        type: 'SET_GEOID',\r\n        payload: {\r\n            geoid\r\n        }\r\n    }\r\n}\r\n\r\n// main store for map and tabular data\r\nexport const storeData = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// store GEOJSON and pseudo-hash table\r\nexport const storeGeojson = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_GEOJSON',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// store lisa values with specific variable combination\r\nexport const storeLisaValues = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_LISA_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// store cartogra data, just like lisa\r\nexport const storeCartogramData = (data, name) => {\r\n    return {\r\n        type: 'SET_STORED_CARTOGRAM_DATA',\r\n        payload: {\r\n            data,\r\n            name\r\n        }   \r\n    }\r\n}\r\n\r\n// sets the name of the current data set, usually a geojson\r\nexport const setCurrentData = (data) => {\r\n    return {\r\n        type: 'SET_CURRENT_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- this stored the Geoda Proxy, but was a bad idea\r\nexport const setGeodaProxy = (proxy) => {\r\n    return {\r\n        type: 'SET_GEODA_PROXY',\r\n        payload: {\r\n            proxy\r\n        }\r\n    }\r\n}\r\n\r\n// stores parsed centroid data \r\nexport const setCentroids = (data, name) => {\r\n    return {\r\n        type: 'SET_CENTROIDS',\r\n        payload: {\r\n            data,\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n// stores valid dates in current data set\r\nexport const setDates = (data, name) => {\r\n    return {\r\n        type: 'SET_DATES',\r\n        payload: {\r\n            data,\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- stores the current data parsing function in the store\r\nexport const setDataFunction = (fn) => {\r\n    return {\r\n        type: 'SET_DATA_FUNCTION',\r\n        payload: {\r\n            fn\r\n        }\r\n    }\r\n}\r\n\r\n// stores a pseudo-hash table or lookup table\r\n// the data attached to the geojson is stored in arrays / list,\r\n// so a lookup table is needed to find the key-value pairs\r\nexport const setColumnNames = (data, name) => {\r\n    return {\r\n        type: 'SET_COLUMN_NAMES',\r\n        payload: {\r\n            data,\r\n            name\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// sets the current date as text\r\nexport const setDate = (date) => {\r\n    return {\r\n        type: 'SET_CURR_DATE',\r\n        payload: {\r\n            date\r\n        }\r\n    }\r\n}\r\n\r\n// sets the index of the date within the current dataset(s)\r\nexport const setDateIndex = (index) => {\r\n    return {\r\n        type: 'SET_DATE_INDEX',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// the first valid date in the main data columns (cases, deaths, etc.)\r\nexport const setStartDateIndex = (index) => {\r\n    return {\r\n        type: 'SET_START_DATE_INDEX',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// stores the current bins (bin names / descriptions)\r\n// and breaks (numerical breaks)\r\nexport const setBins = (bins, breaks) => {\r\n    return {\r\n        type: 'SET_BINS',\r\n        payload: {\r\n            bins,\r\n            breaks\r\n        }\r\n    }\r\n}\r\n\r\n// not used -- set map to 3d\r\nexport const set3D = () => {\r\n    return {\r\n        type: 'SET_3D'\r\n    }\r\n}\r\n\r\n// loads data for the data/info sidebar\r\nexport const setDataSidebar = ( data ) => {\r\n    return {\r\n        type: 'SET_DATA_SIDEBAR',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// increments the date by 1, for use with the animation\r\nexport const incrementDate = ( index ) => {\r\n    return {\r\n        type: 'INCREMENT_DATE',\r\n        payload: {\r\n            index\r\n        }\r\n    }\r\n}\r\n\r\n// sets the variables parameters (index and range, numerator, denominator, etc.)\r\nexport const setVariableParams = ( params ) => {\r\n    return {\r\n        type: 'SET_VARIABLE_PARAMS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\n// sets the map parameters (color mode, viz type, etc.)\r\nexport const setMapParams = ( params ) => {\r\n    return {\r\n        type: 'SET_MAP_PARAMS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\n// loads in chart data from current data\r\nexport const setChartData = ( data ) => {\r\n    return {\r\n        type: 'SET_CHART_DATA',\r\n        payload: {\r\n            data\r\n        }\r\n    }\r\n}\r\n\r\n// sets current text-based variable name (eg. Death Count)\r\nexport const setVariableName = ( name ) => {\r\n    return {\r\n        type: 'SET_VARIABLE_NAME',\r\n        payload: {\r\n            name\r\n        }\r\n    }\r\n}\r\n\r\n// sets the anchor element for the inforational tooltip\r\nexport const setAnchorEl = ( anchorEl ) => {\r\n    return {\r\n        type: 'SET_ANCHOR_EL',\r\n        payload: {\r\n            anchorEl\r\n        }\r\n    }\r\n}\r\n\r\n// sets the left, right, and dock panel states\r\nexport const setPanelState = ( params ) => {\r\n    return {\r\n        type: 'SET_PANELS',\r\n        payload: {\r\n            params\r\n        }\r\n    }\r\n}\r\n\r\nexport const setMapLoaded = ( loaded ) => {\r\n    return {\r\n        type: 'SET_MAP_LOADED',\r\n        payload: {\r\n            loaded\r\n        }\r\n    }\r\n}","var Module = window.Module;\r\n\r\nfunction isInt(n) {\r\n  return Number(n) === n && n % 1 === 0;\r\n}\r\n\r\nclass GeodaProxy {\r\n  // file_target is evt.target\r\n  constructor() {\r\n    this.geojson_maps = {};\r\n  }\r\n\r\n  ReadGeojsonMap(map_uid, file_target) {\r\n    //evt.target.result is an ArrayBuffer. In js, \r\n    const uint8_t_arr = new Uint8Array(file_target.result);\r\n    //First we need to allocate the wasm memory. \r\n    const uint8_t_ptr = window.Module._malloc(uint8_t_arr.length);\r\n    //Now that we have a block of memory we can copy the file data into that block\r\n    window.Module.HEAPU8.set(uint8_t_arr, uint8_t_ptr);\r\n    // pass the address of the wasm memory we just allocated to our function\r\n    //window.Module.new_geojsonmap(map_uid, uint8_t_ptr, uint8_t_arr.length);\r\n    window.Module.ccall(\"new_geojsonmap1\", null, [\"string\", \"number\", \"number\"], [map_uid, uint8_t_ptr, uint8_t_arr.length]);\r\n\r\n    //Lastly, according to the docs, we should call ._free here.\r\n    window.Module._free(uint8_t_ptr);\r\n    // store the map and map type\r\n    let map_type = window.Module.get_map_type(map_uid);\r\n    this.geojson_maps[map_uid] = map_type;\r\n    return map_uid;\r\n  }\r\n\r\n  Has(map_uid) {\r\n    return map_uid in this.geojson_maps;\r\n  }\r\n\r\n  List() {\r\n    return this.geojson_maps;\r\n  }\r\n\r\n  GetCentroids(map_uid) {\r\n    let cc = window.Module.get_centroids(map_uid);\r\n    let xx = cc.get_x();\r\n    let yy = cc.get_y();\r\n    var centroids = [];\r\n    for (let i = 0; i < xx.size(); ++i) {\r\n      centroids.push([xx.get(i), yy.get(i)]);\r\n    }\r\n    return centroids;\r\n  }\r\n\r\n  GetNumObs(map_uid) {\r\n    let n = window.Module.get_num_obs(map_uid);\r\n    return n;\r\n  }\r\n\r\n  GetMapType(map_uid) {\r\n    return this.geojson_maps[map_uid];\r\n  }\r\n\r\n  GetNumericCol(map_uid, col_name) {\r\n    // return VectorDouble\r\n    return window.Module.get_numeric_col(map_uid, col_name)\r\n  }\r\n\r\n  CreateRookWeights(map_uid, order, include_lower_order, precision) {\r\n    let w_uid = window.Module.rook_weights(map_uid, order, include_lower_order, precision);\r\n    return w_uid;\r\n  }\r\n\r\n  CreateQueenWeights(map_uid, order, include_lower_order, precision) {\r\n    let w_uid = window.Module.queen_weights(map_uid, order, include_lower_order, precision);\r\n    return w_uid;\r\n  }\r\n\r\n  GetMinDistThreshold(map_uid, is_arc, is_mile) {\r\n    let val = window.Module.min_distance_threshold(map_uid, is_arc, is_mile);\r\n    return val;\r\n  }\r\n\r\n  CreateKnnWeights(map_uid, k, power, is_inverse, is_arc, is_mile) {\r\n    let w = window.Module.knn_weights(map_uid, k, power, is_inverse, is_arc, is_mile);\r\n    return w;\r\n  }\r\n\r\n  CreateDistWeights(map_uid, dist_thres, power, is_inverse, is_arc, is_mile) {\r\n    let w = window.Module.dist_weights(map_uid, dist_thres, power, is_inverse, is_arc, is_mile);\r\n    return w;\r\n  }\r\n\r\n  CreateKernelWeights(map_uid, k, kernel, adaptive_bandwidth, use_kernel_diagonals, is_arc, is_mile) {\r\n    let w = window.Module.kernel_weights(map_uid, k, kernel, adaptive_bandwidth, use_kernel_diagonals, is_arc, is_mile);\r\n    return w;\r\n  }\r\n\r\n  CreateKernelBandwidthWeights(map_uid, dist_thres, kernel, use_kernel_diagonals, is_arc, is_mile) {\r\n    let w = window.Module.kernel_bandwidth_weights(map_uid, dist_thres, kernel, use_kernel_diagonals, is_arc, is_mile);\r\n    return w;\r\n  }\r\n\r\n  local_moran(map_uid, weight_uid, col_name) {\r\n    return window.Module.local_moran(map_uid, weight_uid, col_name);\r\n  }\r\n\r\n  local_moran1(map_uid, weight_uid, values) {\r\n    return window.Module.local_moran1(map_uid, weight_uid, this.toVecDouble(values));\r\n  }\r\n\r\n  local_g(map_uid, weight_uid, col_name) {\r\n    return window.Module.local_g(map_uid, weight_uid, col_name);\r\n  }\r\n\r\n  local_gstar(map_uid, weight_uid, col_name) {\r\n    return window.Module.local_gstar(map_uid, weight_uid, col_name);\r\n  }\r\n\r\n  local_geary(map_uid, weight_uid, col_name) {\r\n    return window.Module.local_geary(map_uid, weight_uid, col_name);\r\n  }\r\n\r\n  local_joincount(map_uid, weight_uid, col_name) {\r\n    return window.Module.local_joincount(map_uid, weight_uid, col_name);\r\n  }\r\n\r\n  GetNeighbors(map_uid, weight_uid, idx) {\r\n    let nbrs = window.Module.get_neighbors(map_uid, weight_uid, idx);\r\n    return this.parseVecInt(nbrs);\r\n  }\r\n\r\n  parseVecInt(vi) {\r\n    let result = [];\r\n    for (let j = 0; j < vi.size(); ++j) {\r\n      result.push(vi.get(j));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  parseVecVecInt(vvi) {\r\n    let result = [];\r\n    for (let i = 0; i < vvi.size(); ++i) {\r\n      let sub = [];\r\n      let vi = vvi.get(i);\r\n      for (let j = 0; j < vi.size(); ++j) {\r\n        sub.push(vi.get(j));\r\n      }\r\n      result.push(sub);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  parseVecDouble(vd) {\r\n    let result = []\r\n    for (let i = 0; i < vd.size(); ++i) {\r\n      result.push(vd.get(i));\r\n    }\r\n    return result;\r\n  }\r\n\r\n\r\n  toVecString(input) {\r\n    let vs = new window.Module.VectorString();\r\n    for (let i = 0; i < input.length; ++i) {\r\n      vs.push_back(input[i]);\r\n    }\r\n    return vs;\r\n  }\r\n\r\n  toVecDouble(input) {\r\n    let vs = new window.Module.VectorDouble();\r\n    for (let i = 0; i < input.length; ++i) {\r\n      if (isNaN(input[i]) || input[i] == Infinity)\r\n        vs.push_back(0);\r\n      else\r\n        vs.push_back(input[i]);\r\n    }\r\n    return vs;\r\n  }\r\n\r\n  redcap(map_uid, weight_uid, k, sel_fields, bound_var, min_bound, method) {\r\n    let col_names = this.toVecString(sel_fields);\r\n    let clusters_vec = window.Module.redcap(map_uid, weight_uid, k, col_names, bound_var, min_bound, method);\r\n    let clusters = this.parseVecVecInt(clusters_vec);\r\n    return clusters;\r\n  }\r\n\r\n  maxp(map_uid, weight_uid, k, sel_fields, bound_var, min_bound, method, tabu_length, cool_rate, n_iter) {\r\n    let col_names = this.toVecString(sel_fields);\r\n    let clusters_vec = window.Module.maxp(map_uid, weight_uid, col_names, bound_var, min_bound, tabu_length, cool_rate, method, k, n_iter);\r\n    let clusters = this.parseVecVecInt(clusters_vec);\r\n    return clusters;\r\n  }\r\n\r\n  custom_breaks(map_uid, break_name, k, sel_field, values) {\r\n    var breaks_vec;\r\n    if (sel_field == null) {\r\n      breaks_vec = window.Module.custom_breaks1(map_uid, k, break_name, this.toVecDouble(values));\r\n    } else {\r\n      breaks_vec = window.Module.custom_breaks(map_uid, k, sel_field, break_name);\r\n    }\r\n    let breaks = this.parseVecDouble(breaks_vec);\r\n    var orig_breaks = breaks;\r\n\r\n    let bins = [];\r\n    let id_array = [];\r\n    for (let i = 0; i < breaks.length; ++i) {\r\n      id_array.push([]);\r\n      let txt = isInt(breaks[i]) ? breaks[i] : breaks[i].toFixed(2);\r\n      bins.push(\"\" + txt);\r\n    }\r\n    id_array.push([]);\r\n    let txt = breaks[breaks.length - 1];\r\n    if (txt != undefined) {\r\n      txt = isInt(txt) ? txt : txt.toFixed(2);\r\n      bins.push(\">\" + txt);\r\n    }\r\n\r\n    breaks.unshift(Number.NEGATIVE_INFINITY);\r\n    breaks.push(Number.POSITIVE_INFINITY);\r\n\r\n    for (let i = 0; i < values.length; ++i) {\r\n      let v = values[i];\r\n      for (let j = 0; j < breaks.length - 1; ++j) {\r\n        let min_val = breaks[j];\r\n        let max_val = breaks[j + 1];\r\n        if (v >= min_val && v < max_val) {\r\n          id_array[j].push(i);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < bins.length; ++i) {\r\n      //bins[i] += \" (\" + id_array[i].length + ')';\r\n    }\r\n\r\n    return {\r\n      'k': k,\r\n      'bins': bins,\r\n      'breaks': orig_breaks,\r\n      'id_array': id_array\r\n    }\r\n  }\r\n\r\n  cartogram(map_uid, values) {\r\n    let cart = window.Module.cartogram(map_uid, this.toVecDouble(values));\r\n    let x = cart.get_x();\r\n    let y = cart.get_y();\r\n    let r = cart.get_radius();\r\n    // rescale x, y [-100,0], [0, 45]\r\n    let min_x = x.get(0);\r\n    let max_x = x.get(0);\r\n    let min_y = y.get(0);\r\n    let max_y = y.get(0);\r\n    for (let i = 0; i < x.size(); ++i) {\r\n      if (min_x > x.get(i)) min_x = x.get(i);\r\n      if (max_x < x.get(i)) max_x = x.get(i);\r\n      if (min_y > y.get(i)) min_y = y.get(i);\r\n      if (max_y < y.get(i)) max_y = y.get(i);\r\n    }\r\n    let scale_x = 100.0 / (max_x - min_x);\r\n    let scale_y = 45.0 / (max_y - min_y);\r\n\r\n\r\n    var result = [];\r\n    for (let i = 0; i < x.size(); ++i) {\r\n      let xx = (x.get(i) - min_x) * scale_x;\r\n      let yy = (y.get(i) - min_y) * scale_y;\r\n      result.push({\r\n        'properties': {\r\n          'id': i\r\n        },\r\n        'position': [x.get(i) / 10000.0, y.get(i) / 10000.0],\r\n        'radius': r.get(i)\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default GeodaProxy","// branchless variant\r\n// const dataFn = (numeratorData, numeratorProperty, index, range, denominatorData, denominatorProperty, denominatorIndex, denominatorRange, scale)  => {\r\n\r\n//     return (\r\n//       (\r\n//         (\r\n//           (\r\n//             (numeratorData[index]||numeratorData[numeratorProperty])\r\n//             -\r\n//             ((range!==null)&&(numeratorData[index-range]))\r\n//           )\r\n          \r\n//           /\r\n//           (range+(range===null))\r\n//         )\r\n//       /\r\n//         (\r\n//           (\r\n//             (\r\n//               (denominatorData[denominatorIndex]||denominatorData[denominatorProperty])\r\n//               -\r\n//               ((denominatorRange!==null)&&(denominatorData[denominatorIndex-denominatorRange]))\r\n//             )\r\n//             /\r\n//             (denominatorRange+(denominatorRange===null))\r\n//           )\r\n//           ||\r\n//             (denominatorData[denominatorProperty])\r\n//           || \r\n//           1\r\n//         )\r\n//       )\r\n//       *\r\n//       scale\r\n//     )\r\n// }\r\n\r\n// export default dataFn;\r\n\r\nconst dataFn = (numeratorData, numeratorProperty, index, range, denominatorData, denominatorProperty, denominatorIndex, denominatorRange, scale)  => {\r\n  if (numeratorData === undefined) {\r\n    return 0;\r\n  } else if (denominatorProperty===null&&range===null){ // whole count or number -- no range, no normalization\r\n    return (numeratorData[numeratorProperty]||numeratorData[index])*scale\r\n  } else if (denominatorProperty===null&&range!==null){ // range number, daily or weekly count -- no normalization\r\n    return (numeratorData[index]-numeratorData[index-range])/range*scale\r\n  } else if (denominatorProperty!==null&&range===null){ // whole count or number normalized -- no range\r\n    return (numeratorData[numeratorProperty]||numeratorData[index])/(denominatorData[denominatorProperty]||denominatorData[denominatorIndex])*scale\r\n  } else if (denominatorProperty!==null&&range!==null&&denominatorRange===null){ // range number, daily or weekly count, normalized to a single value\r\n    return ((numeratorData[index]-numeratorData[index-range])/range)/(denominatorData[denominatorProperty]||denominatorData[denominatorIndex])*scale\r\n  } else if (denominatorProperty!==null&&range!==null&&denominatorRange!==null){ // range number, daily or weekly count, normalized to a range number, daily or weekly count\r\n    return ((numeratorData[index]-numeratorData[index-range])/range)/((denominatorData[denominatorIndex]-denominatorData[denominatorIndex-denominatorRange])/denominatorRange)*scale\r\n  } else {      \r\n    return 0;\r\n  }\r\n}\r\n\r\nexport default dataFn;","const mapFn = (val, bins, colors, maptype) => {\r\n  if (maptype === \"natural_breaks\") {\r\n    if (val == 0) return colors[0];\r\n    for (let i=1; i<bins.length; i++) {\r\n      if (val < bins[i]) {\r\n        return colors[i]\r\n      }\r\n    }\r\n    return colors[0];\r\n  } else if (maptype.includes(\"hinge\")) {\r\n    for (let i=1; i<bins.length; i++) {\r\n      if (val < bins[i]) {\r\n        return colors[i-1]\r\n      }\r\n    }\r\n    return colors[0];\r\n  }\r\n}\r\n\r\nexport default mapFn","import { loadGeojsonToGeoda, getGeoidIndex } from '../utils';\r\nimport { sortBy } from 'lodash';\r\n\r\nasync function getJson(url, gda_proxy){\r\n    const tempData = await fetch(url)\r\n      .then(response => {\r\n        const responseFromJson = response.clone();        \r\n        loadGeojsonToGeoda(responseFromJson, url, gda_proxy);\r\n        return response.json();\r\n      }).then(data => {\r\n        // data.features = sortBy(data.features, [f => f.properties.GEOID])\r\n        return {\r\n          data: data,\r\n          geoidIndex: getGeoidIndex(data.features)\r\n        }\r\n      });        \r\n    return tempData;\r\n}\r\nexport default getJson;","import * as d3 from 'd3-dsv';\r\n\r\nasync function getCSV(url){\r\n    const tempData = await fetch(url)\r\n      .then(response => {\r\n        return response.ok ? response.text() : Promise.reject(response.status);\r\n      }).then(text => {\r\n        let data = d3.csvParse(text, d3.autoType)\r\n        \r\n        return data\r\n      })\r\n    \r\n      return tempData\r\n}\r\n\r\nexport default getCSV","import * as d3 from 'd3-dsv';\r\nimport { findDates } from '../utils';\r\n\r\nasync function getParseCSV(url, joinCol, accumulate){\r\n    const tempData = await fetch(url)\r\n      .then(response => {\r\n        return response.ok ? response.text() : Promise.reject(response.status);\r\n      }).then(text => {\r\n        let data = d3.csvParse(text, d3.autoType)\r\n        let rtn = {};\r\n        let n = data.length;\r\n\r\n        if (accumulate) {\r\n          let indexStart = findDates(Object.keys(data[0]))[1]\r\n          while (n>0){\r\n            n--;\r\n            let vals = Object.values(data[n])\r\n            let tempArr = [];\r\n            let i = indexStart;\r\n            let j = 0;\r\n            while (i<vals.length) {\r\n              if (i===indexStart) {\r\n                tempArr.push(vals[i])\r\n              } else {\r\n                tempArr.push(vals[i]+tempArr[j])\r\n                j++;\r\n              }\r\n              i++;\r\n            }\r\n            for (let i = 0; i < indexStart; i++) {\r\n              tempArr.unshift(vals[i])\r\n            }\r\n            rtn[data[n][joinCol]] = tempArr\r\n          }\r\n        } else {\r\n          while (n>0){\r\n            n--;\r\n            rtn[data[n][joinCol]] = Object.values(data[n])\r\n          }\r\n        }\r\n        return [rtn, Object.keys(data[0])]\r\n      });\r\n    return tempData;\r\n}\r\n\r\nexport default getParseCSV","import { merge } from 'lodash';\r\n\r\nconst mergeData = (featureCollection, featureCollectionJoinCol, joinData, joinDataNames, joinDataCol) => {\r\n    // declare parent dictionaries\r\n    let features = {}\r\n    let dataDict = {}\r\n\r\n    let baseColumnLength = Object.keys(featureCollection.features[0]).length;\r\n\r\n    // declare and prep feature collection object\r\n    let i = featureCollection.features.length;\r\n    let colNumCheck = parseInt(featureCollection.features[0].properties[featureCollectionJoinCol])\r\n    if (Number.isInteger(colNumCheck)) {\r\n      while (i>0) {\r\n        i--;\r\n        features[parseInt(featureCollection.features[i].properties[featureCollectionJoinCol])] = featureCollection.features[i];\r\n        dataDict[parseInt(featureCollection.features[i].properties[featureCollectionJoinCol])] = {};\r\n      }\r\n    } else {\r\n      while (i>0) {\r\n        i--;\r\n        features[featureCollection.features[i].properties[featureCollectionJoinCol]] = featureCollection.features[i];\r\n        dataDict[featureCollection.features[i].properties[featureCollectionJoinCol]] = {};\r\n      }\r\n    }\r\n  \r\n    // // declare data objects\r\n    // for (let n=0; n < joinDataNames.length; n++) {\r\n    //   dataDict[`${joinDataNames[n]}`] = {}\r\n    // }\r\n  \r\n    // loop through data and add to dictionaries\r\n    let n = joinData.length;\r\n    while (n>0) {\r\n      n--;\r\n      let cols = Object.keys(joinData[n][0]);\r\n      i = cols.length;\r\n      while (i>0) {\r\n        i--;\r\n        try {\r\n          dataDict[cols[i]][joinDataNames[n]] = joinData[n][0][cols[i]]\r\n        } catch {}\r\n      }\r\n    }\r\n    \r\n    // // use lodash to merge data\r\n    let merged = merge(features, dataDict)\r\n    // for (let n=1; n < joinDataNames.length; n++){\r\n    //   merged = merge(merged, dataDict[joinDataNames[n]])\r\n    // }\r\n    \r\n    // clean data\r\n    let rtn = [];\r\n    let keys = Object.keys(merged)\r\n    \r\n    for (let i = 0; i < keys.length; i++) {\r\n      // if (Object.keys(merged[keys[i]]).length == (joinDataNames.length+baseColumnLength)) rtn.push(merged[keys[i]])\r\n      rtn.push(merged[keys[i]])\r\n    }\r\n\r\n    return rtn;\r\n}\r\n\r\nexport default mergeData;","const colIndex = (data, table, date) => {\r\n    return data[table].indexOf(date);\r\n}\r\n\r\nexport default colIndex","const colLookup = (columns, dataset, table, property) => {\r\n    try {\r\n        return columns[dataset][table].indexOf(property); \r\n    } catch {\r\n        return null;\r\n    }\r\n}\r\nexport default colLookup;","const findDates = (data) => {\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (Date.parse(data[i])) return [data.slice(i,),i]\r\n    }\r\n    return;\r\n}\r\n\r\nexport default findDates","import { compose } from 'redux';\r\nimport dataFn from './dataFunction';\r\n\r\n// this function loops through the current data set and provides data for GeodaJS to create custom breaks \r\nconst getDataForBins = (tableData, table, nType, numerProp, numerIndex, numerRange, denomTable, dType, denomProp, denomIndex, denomRange, scale) => {\r\n    let t0 = performance.now() // logging performance\r\n\r\n    // declare empty array for return variables\r\n    let rtn = [];\r\n\r\n    // length of data table to loop through\r\n    let n = tableData.length;\r\n\r\n    // this checks if the bins generated should be dynamic (generating for each date) or fixed (to the most recent date)\r\n    if (numerIndex === null && numerProp === null) {\r\n        // if fixed, get the most recent date\r\n        let tempIndex = tableData[0][table].length-1;\r\n        // if the denominator is time series data (eg. deaths / cases this week), make the indices the same (most recent)\r\n        let tempDenomIndex = dType === 'time-series' ? tableData[0][denomTable].length-1 : denomIndex;\r\n\r\n        // loop through, do appropriate calculation. add returned value to rtn array\r\n        while (n>0) {\r\n            n--;\r\n            rtn.unshift(dataFn(tableData[n][table], numerProp, tempIndex, numerRange, tableData[n][denomTable], denomProp, tempDenomIndex, denomRange, scale))\r\n        }\r\n    } else {\r\n       while (n>0) {\r\n            n--;\r\n            rtn.unshift(dataFn(tableData[n][table], numerProp, numerIndex, numerRange, tableData[n][denomTable], denomProp, denomIndex, denomRange, scale))\r\n        }\r\n    }\r\n\r\n    console.log(performance.now() - t0);\r\n\r\n    return rtn;   \r\n}\r\nexport default getDataForBins","import dataFn from './dataFunction';\r\n\r\nconst getDataForCharts = (data, table, startIndex, dates) => {\r\n    let t0 = performance.now()\r\n    let features = Object.keys(data);\r\n    let n = startIndex;\r\n    let rtn = []\r\n    let j = -1;\r\n\r\n    while (n<data[features[0]][table].length) {\r\n        let tempObj = {};\r\n        let sum = 0;\r\n        let i = 0;\r\n\r\n        while (i<features.length) {\r\n            if (data[features[i]][table]!== undefined) sum += data[features[i]][table][n]\r\n            // tempObj[`n${i}`] = data[features[i]][table][n]\r\n            i++;\r\n        }\r\n        tempObj.count = sum\r\n        tempObj.date = dates[n-startIndex]\r\n        if (j===-1) {\r\n            tempObj.dailyNew = sum\r\n        } else {\r\n            tempObj.dailyNew = sum - rtn[j].count\r\n        }\r\n        rtn.push(tempObj);\r\n        n++;\r\n        j++;\r\n    }\r\n    \r\n    console.log(performance.now() - t0);\r\n    return rtn;\r\n\r\n}\r\n\r\nexport default getDataForCharts","import dataFn from './dataFunction';\r\n\r\n// this function loops through the current data set and provides data for GeodaJS to create custom breaks \r\nconst getDataForLisa = (tableData, table, nType, numerProp, numerIndex, numerRange, denomTable, dType, denomProp, denomIndex, denomRange, scale, order) => {\r\n    let t0 = performance.now() // logging performance\r\n\r\n    // declare empty array for return variables\r\n    let tempDict = {};\r\n\r\n    // length of data table to loop through\r\n    let n = tableData.length;\r\n\r\n    // this checks if the bins generated should be dynamic (generating for each date) or fixed (to the most recent date)\r\n    if (numerIndex === null && numerProp === null) {\r\n        // if fixed, get the most recent date\r\n        let tempIndex = tableData[0][table].length-1;\r\n        \r\n        // if the denominator is time series data (eg. deaths / cases this week), make the indices the same (most recent)\r\n        let tempDenomIndex = dType === 'time-series' ? tableData[0][denomTable].length-1 : denomIndex;\r\n\r\n        // loop through, do appropriate calculation. add returned value to rtn array\r\n        while (n>0) {\r\n            n--;\r\n            tempDict[tableData[n].properties.GEOID] = dataFn(tableData[n][table], numerProp, tempIndex, numerRange, tableData[n][denomTable], denomProp, tempDenomIndex, denomRange, scale)\r\n        }\r\n    } else {\r\n       while (n>0) {\r\n            n--;\r\n            tempDict[tableData[n].properties.GEOID] = dataFn(tableData[n][table], numerProp, numerIndex, numerRange, tableData[n][denomTable], denomProp, denomIndex, denomRange, scale)\r\n        }\r\n    }\r\n    \r\n    let rtn = [];\r\n\r\n    n = 0;\r\n    let keys = Object.keys(order)\r\n    while (n<keys.length) {\r\n        rtn.push(tempDict[order[keys[n]]]);\r\n        n++;\r\n    }\r\n\r\n    console.log(performance.now() - t0);\r\n\r\n    return rtn;\r\n    \r\n}\r\nexport default getDataForLisa","const getCurrentWuuid = (gda_proxy, selectedDataset) => {\r\n    var w = gda_proxy.CreateQueenWeights(selectedDataset, 1, 0, 0);\r\n\r\n    return {\r\n      'map_uuid': selectedDataset,\r\n      'w': w,\r\n      'w_uuid': w.get_uid()\r\n    };\r\n}\r\n\r\nexport default getCurrentWuuid","import getCurrentWuuid from './getCurrentWuuid.js';\r\n\r\nconst getLisaValues = (gda_proxy, dataset, data, geoids) => {\r\n  let w = getCurrentWuuid(gda_proxy, dataset);\r\n  let all_zeros = true;\r\n  for (let i=0; i<data.length; ++i) { \r\n    if (data[i] != 0)\r\n      all_zeros = false;\r\n  }\r\n  let clusters = [];\r\n  let sig = [];\r\n\r\n  if (all_zeros) {\r\n    for (let i=0; i<data.length; ++i) { \r\n      clusters.push(0);\r\n      sig.push(0);\r\n    }\r\n  } else {\r\n    var lisa = gda_proxy.local_moran1(w.map_uuid, w.w_uuid, data);\r\n    clusters = gda_proxy.parseVecDouble(lisa.clusters());\r\n    sig = gda_proxy.parseVecDouble(lisa.significances());\r\n  }\r\n  \r\n  return clusters;\r\n}\r\n\r\nexport default getLisaValues;","const getVarId = (currentData, dataParams) => {\r\n    return `${currentData}-${dataParams.numerator}-${dataParams.nIndex}-${dataParams.nRange}-${dataParams.denominator}-${dataParams.dProperty}-${dataParams.dIndex}-${dataParams.dRange}-${dataParams.scale}`\r\n}\r\n\r\nexport default getVarId;","const getGeoidIndex = (features) => {\r\n    let geoidOrder = {};\r\n    let indexOrder = {};\r\n    let i = 0\r\n    while (i<features.length) {\r\n        geoidOrder[features[i].properties.GEOID] = i\r\n        indexOrder[i] = features[i].properties.GEOID\r\n        i++;\r\n    }\r\n\r\n    return {geoidOrder, indexOrder};\r\n}\r\nexport default getGeoidIndex","const loadGeojsonToGeoda = async (data, url, gda_proxy) => {\r\n  const arrayBuffer = await data.arrayBuffer();\r\n\r\n  gda_proxy.ReadGeojsonMap(url.split('/').slice(-1,)[0], {\r\n      result: arrayBuffer,\r\n  });\r\n}\r\n\r\nexport default loadGeojsonToGeoda;","const getCartogramValues = (gda_proxy, dataset, data ) => {\r\n    let cartogramData = gda_proxy.cartogram(dataset, data)\r\n    let tempObj = {}\r\n    for (let i=0; i<cartogramData.length; i++){\r\n        cartogramData[i].value = data[i]\r\n        tempObj[i] = cartogramData[i]\r\n    }\r\n    return tempObj;\r\n}\r\n\r\nexport default getCartogramValues;","export const colorScales = {\r\n    'natural_breaks': [\r\n        [240,240,240],\r\n        [255,255,204],\r\n        [255,237,160],\r\n        [254,217,118],\r\n        [254,178,76],\r\n        [253,141,60],\r\n        [252,78,42],\r\n        [227,26,28],\r\n        [177,0,38],\r\n    ],\r\n    'lisa': [\r\n        [255,255,255],\r\n        [255,0,0],\r\n        [0,0,255],\r\n        [167, 173, 249],\r\n        [244, 173, 168],\r\n        // [70, 70, 70],\r\n        // [153, 153, 153]\r\n    ],\r\n    'hinge15_breaks': [\r\n        [1, 102, 94],\r\n        [90, 180, 172],\r\n        [199, 234, 229],\r\n        [246, 232, 195],\r\n        [216, 179, 101],\r\n        [140, 81, 10],\r\n    ],    \r\n    'uninsured':[\r\n        [240,240,240],\r\n        [247,252,253],\r\n        [224,236,244],\r\n        [191,211,230],\r\n        [158,188,218],\r\n        [140,150,198],\r\n        [140,107,177],\r\n        [136,65,157],\r\n        [129,15,124],\r\n        // [77,0,75],\r\n      ],\r\n    'over65':[\r\n        [240,240,240],\r\n        [247,252,240],\r\n        [224,243,219],\r\n        [204,235,197],\r\n        [168,221,181],\r\n        [123,204,196],\r\n        [78,179,211],\r\n        [43,140,190],\r\n        [8,104,172],\r\n        // [8,64,129],\r\n    ],\r\n    'lifeExp':[\r\n        [240,240,240],\r\n        [247,252,240],\r\n        [224,243,219],\r\n        [204,235,197],\r\n        [168,221,181],\r\n        [123,204,196],\r\n        [78,179,211],\r\n        [43,140,190],\r\n        [8,104,172],\r\n        // [8,64,129],\r\n    ],\r\n    'forecasting': [\r\n        [240, 240, 240],\r\n        [254,232,200],\r\n        [253,187,132],\r\n        [227,74,51],\r\n    ],\r\n    'testings' : [\r\n        [240,240,240],\r\n        [13,8,135],\r\n        [92,1,166],\r\n        [156,23,158],\r\n        [203,70,121],\r\n        [237,121,83],\r\n        [253,180,47],\r\n        [240,249,33],\r\n      ],\r\n      'testingCap':[\r\n        [240,240,240],\r\n        [247,251,255],\r\n        [222,235,247],\r\n        [198,219,239],\r\n        [158,202,225],\r\n        [107,174,214],\r\n        [66,146,198],\r\n        [33,113,181],\r\n        [8,81,156],\r\n        [8,48,107],\r\n      ],\r\n}\r\n\r\nexport const fixedScales = {\r\n    'testing': {\r\n        bins: ['No Data','<3%','5%','10%','15%','20%','>25%'],\r\n        breaks:[0,3,5,10,15,20,25,Math.pow(10, 12)]\r\n    },\r\n    'testingCap': {\r\n        bins: ['No Data','<50','100','150','200','250','300','350','>400'],\r\n        breaks:[0,50,100,150,200,250,300,350,400,Math.pow(10, 12)]\r\n    },\r\n    'lisa':{\r\n        bins: [\"Not significant\", \"High-High\", \"Low-Low\", \"Low-High\", \"High-Low\"] //\"Undefined\", \"Isolated\"\r\n    }\r\n}\r\n\r\nexport const dataPresets = {\r\n    'county_usfacts.geojson': {\r\n        geojson: 'county_usfacts.geojson', \r\n        csv: ['covid_confirmed_usafacts','covid_deaths_usafacts', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', 'FIPS'], \r\n        tableNames: ['cases','deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        accumulate: []\r\n    },\r\n    'county_1p3a.geojson': {\r\n        geojson: 'county_1p3a.geojson', \r\n        csv: ['covid_confirmed_1p3a','covid_deaths_1p3a', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', 'FIPS'], \r\n        tableNames: ['cases','deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        accumulate: ['covid_confirmed_1p3a','covid_deaths_1p3a']\r\n    },\r\n    'county_nyt.geojson': {\r\n        geojson: 'county_nyt.geojson', \r\n        csv: ['covid_confirmed_nyt', 'covid_deaths_nyt', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        joinCols: ['GEOID', 'FIPS'], \r\n        tableNames: ['cases', 'deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        accumulate: []\r\n    },\r\n    'state_1p3a.geojson': {\r\n        geojson: 'state_1p3a.geojson', \r\n        csv: ['covid_confirmed_1p3a_state','covid_deaths_1p3a_state', 'chr_health_context_state', 'chr_life_state', 'chr_health_factors_state', 'covid_testing_1p3a_state', 'covid_wk_pos_1p3a_state', 'covid_tcap_1p3a_state', 'covid_ccpt_1p3a_state'], \r\n        joinCols: ['GEOID', 'FIPS'], \r\n        tableNames: ['cases', 'deaths', 'chr_health_context', 'chr_life', 'chr_health_factors', 'testing', 'testing_wk_pos', 'testing_tcap', 'testing_ccpt'],\r\n        accumulate: ['covid_confirmed_1p3a_state','covid_deaths_1p3a_state']\r\n    } \r\n}\r\n\r\nexport const tooltipInfo = {\r\n  Choropleth: <p>A thematic map used to represent data through various shading patterns on predetermined geographic areas (counties, state).</p>,\r\n  NaturalBreaksFixed: <p>A nonlinear algorithm used to group observations such that the within-group homogeneity is maximized for the latest date, bins fixed over time</p>,\r\n  NaturalBreaks: <p>A nonlinear algorithm used to group observations such that the within-group homogeneity is maximized for every day, bins change over time</p>,\r\n  BoxMap: <p>Mapping counterpart of the idea behind a box plot</p>,\r\n  LocalClustering: <p>A map showing statisically significant spatial cluster and outlier locations, color coded by type.</p>,\r\n  LocalMoran: <p>Local Moran used to identify local clusters and outliers</p>,\r\n  NotSig:\t<p>Area was not statistically signficant as a spatial cluster core or outlier using given parameters.</p>,\r\n  HighHigh: <p>Hot Spot Cluster: area with high values, neighbored by areas with high values</p>,\r\n  LowLow: <p>Cold Spot Cluster: area with low values, neighbored by areas with low values</p>,\r\n  HighLow: <p>Hot Outlier: area with high values, neighbored by areas with low values</p>,\r\n  LowHigh: <p>Low-High\tCold Outlier: area with low values, neighbored by areas with high values</p>,\r\n  PovChldPrc: <p>Percentage of children under age 18 living in poverty</p>,\r\n  IncRt: <p>Ratio of household income at the 80th percentile to income at the 20th percentile</p>,\r\n  MedianHouseholdIncome: <p>The income where half of households in a county earn more and half of households earn less</p>,\r\n  FdInsPrc: <p>Percentage of population who lack adequate access to food</p>,\r\n  UnEmplyPrc: <p>Percentage of population age 16 and older unemployed but seeking work</p>,\r\n  UnInPrc: <p>Percentage of people under age 65 without insurance</p>,\r\n  PrmPhysRt: <p>Ratio of population to primary care physicians</p>,\r\n  PrevHospRt: <p>Rate of hospital stays for ambulatory-care sensitive conditions per 100,000 Medicare enrollees</p>,\r\n  RsiSgrBlckRt: <p>Index of dissimilarity where higher values indicate greater residential segregation between Black and White county residents</p>,\r\n  SvrHsngPrbRt: <p>Percentage of households with at least 1 of 4 housing problems: overcrowding, high housing costs, lack of kitchen facilities, or lack of plumbing facilities</p>,\r\n  Over65YearsPrc: <p>Percentage of people ages 65 and older</p>,\r\n  AdObPrc: <p>Percentage of the adult population (age 20 and older) that reports a body mass index (BMI) greater than or equal to 30 kg/m2</p>,\r\n  AdDibPrc: <p>Percentage of adults aged 20 and above with diagnosed diabetes</p>,\r\n  SmkPrc: <p>Percentage of adults who are current smokers</p>,\r\n  ExcDrkPrc: <p>Percentage of adults reporting binge or heavy drinking</p>,\r\n  DrOverdMrtRt: <p>Number of drug poisoning deaths per 100,000 population</p>,\r\n  LfExpRt: <p>Average number of years a person can expect to live</p>,\r\n  SlfHlthPrc: <p>Percentage of adults reporting fair or poor health</p>,\r\n  SeverityIndex: <p>Indicates the severity of the local covid-19 outbreak, based on cumulative and predicted deaths</p>,\r\n  PredictedDeaths: <p>Predicted number of deaths for a county</p>,\r\n  PredictedDeathsInterval: <p>Margin of error for predicted death counts for a county </p>,\r\n  healthfactor:<p>Health factors represent those things we can modify to improve community conditions and the length and quality of life for residents</p>,\r\n  healthcontext: <p>Community Health Context reflects the existing health behaviors and demographics of individuals in the community that are influenced by the opportunities to live long and well</p>,\r\n  healthlife:<p>Length and Quality of Life reflects the physical and mental well-being of residents within a community through measures representing how long and how well residents live</p>,\r\n  Hypersegregated: <p>American metropolitan areas where black residents experience hypersegregation, see <a href=\"https://www.princeton.edu/news/2015/05/18/hypersegregated-cities-face-tough-road-change\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n  BlackBelt: <p>Southern US counties that were at least 40% Black or African American in the 2000 Census, see <a href=\"https://en.wikipedia.org/wiki/Black_Belt_in_the_American_South\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n  TestingCapacity: <p>New screening (e.g., antigen) and diagnostic (e.g., PCR) testing per capita rates by date. The suggested threshold is >150 daily tests per 100k people.</p>,\r\n  USCongress: <p>Find your representative <a href=\"https://www.govtrack.us/\" target=\"_blank\" rel=\"noopener noreferrer\">here</a></p>,\r\n};","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport {fromJS} from 'immutable';\r\n\r\nimport DeckGL from '@deck.gl/react';\r\nimport {MapView, _GlobeView as GlobeView, FlyToInterpolator} from '@deck.gl/core';\r\nimport { GeoJsonLayer, PolygonLayer, ScatterplotLayer,  IconLayer } from '@deck.gl/layers';\r\n// import {SimpleMeshLayer} from '@deck.gl/mesh-layers';\r\n// import {IcoSphereGeometry} from '@luma.gl/engine';\r\n\r\nimport ReactMapGL, {NavigationControl, GeolocateControl } from 'react-map-gl';\r\nimport Geocoder from 'react-map-gl-geocoder'\r\n\r\nimport { MapTooltipContent } from '../components';\r\nimport { colorScales } from '../config';\r\nimport { setDataSidebar, setMapParams, setMapLoaded } from '../actions';\r\nimport { mapFn, dataFn, getVarId, getCSV } from '../utils';\r\nimport MAP_STYLE from '../config/style.json';\r\n\r\n// const cartoGeom = new IcoSphereGeometry({\r\n//   iterations: 1\r\n// });\r\n\r\nconst ICON_MAPPING = {\r\n    hospital: {x: 0, y: 0, width: 128, height: 128},\r\n    clinic: {x: 128, y: 0, width: 128, height: 128},\r\n  };\r\n\r\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoibGl4dW45MTAiLCJhIjoiY2locXMxcWFqMDAwenQ0bTFhaTZmbnRwaiJ9.VRNeNnyb96Eo-CorkJmIqg';\r\n\r\nconst defaultMapStyle = fromJS(MAP_STYLE);\r\n\r\nconst initialViewState = {\r\n    latitude: 35.850033,\r\n    longitude: -105.6500523,\r\n    zoom: 3.5,\r\n    pitch:0,\r\n    bearing:0\r\n};\r\n\r\nconst DATA_URL = {\r\n    CONTINENTS: `${process.env.PUBLIC_URL}/geojson/world50m.json`,\r\n    BLACKBELT:`${process.env.PUBLIC_URL}/geojson/blackbelt_highlight.geojson`,\r\n    SEG_CITIES:`${process.env.PUBLIC_URL}/geojson/seg_cities.geojson`,\r\n    CONGRESS_DISTRICTS:`${process.env.PUBLIC_URL}/geojson/districts.geojson`,\r\n    CONGRESS_CENTROIDS:`${process.env.PUBLIC_URL}/geojson/district_centroids.geojson`,\r\n    RESERVATIONS:`${process.env.PUBLIC_URL}/geojson/reservations.geojson`\r\n};\r\n\r\nconst HoverDiv = styled.div`\r\n    background:#2b2b2b;\r\n    padding:20px;\r\n    color:white;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius:0.5vh 0.5vh 0 0;\r\n    h3 {\r\n        margin:2px 0;\r\n    }\r\n`;\r\n\r\nconst NavInlineButton = styled.button`\r\n    width:29px;\r\n    height:29px;\r\n    padding:5px;\r\n    margin-bottom:10px;\r\n    display:block;\r\n    background-color: ${props => props.isActive ? 'yellow' : '#f5f5f5'};\r\n    -moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    -webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n    box-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n    border-radius: 4px;\r\n    outline:none;\r\n    border:none;\r\n    transition:250ms all;\r\n`\r\n\r\nconst NavBarBacking = styled.div`\r\nwidth:100%;\r\nheight:50px;\r\nposition:absolute;\r\ntop:0;\r\nleft:0;\r\nbackground:#2b2b2b;\r\n-moz-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\n-webkit-box-shadow: 0 0 2px rgba(0,0,0,.1);\r\nbox-shadow: 0 0 0 2px rgba(0,0,0,.1);\r\n`\r\n\r\nconst viewGlobe = new GlobeView({id: 'globe', controller: false, resolution:1});\r\nconst view = new MapView({repeat: true});\r\n\r\n\r\nconst Map = () => { \r\n    \r\n    const [hoverInfo, setHoverInfo] = useState(false);\r\n    const [highlightGeog, setHighlightGeog] = useState(false);\r\n    const [globalMap, setGlobalMap] = useState(false);\r\n    const [mapStyle, setMapStyle] = useState(defaultMapStyle);\r\n    const [currLisaData, setCurrLisaData] = useState({})\r\n    const [viewState, setViewState] = useState(initialViewState)\r\n    const [cartogramData, setCartogramData] = useState([]);\r\n    const [currVarId, setCurrVarId] = useState(null);\r\n    const [hospitalData, setHospitalData] = useState(null);\r\n    const [clinicData, setClinicData] = useState(null);\r\n\r\n    const storedData = useSelector(state => state.storedData);\r\n    const storedGeojson = useSelector(state => state.storedGeojson);\r\n    const currentData = useSelector(state => state.currentData);\r\n    const storedLisaData = useSelector(state => state.storedLisaData);\r\n    const storedCartogramData = useSelector(state => state.storedCartogramData);\r\n    const panelState = useSelector(state => state.panelState);\r\n\r\n    const dataParams = useSelector(state => state.dataParams);\r\n    const mapParams = useSelector(state => state.mapParams);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        let arr = [];\r\n        if (storedData[currentData] && mapParams.vizType === 'cartogram') {\r\n            for (let i=0; i<storedData[currentData].length; i++) {\r\n                arr.push({id:i})\r\n            }\r\n        }\r\n        setCartogramData(arr)\r\n    }, [storedData, mapParams.vizType])\r\n\r\n    useEffect(() => {\r\n        setCurrVarId(getVarId(currentData, dataParams))\r\n    }, [dataParams, mapParams])\r\n\r\n\r\n    useEffect(() => {\r\n        switch(mapParams.vizType) {\r\n            case '2D': \r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: 35.850033,\r\n                    longitude: -105.6500523,\r\n                    zoom: 3.5,\r\n                    bearing:0,\r\n                    pitch:0\r\n                }));\r\n                break\r\n            case '3D':\r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: 35.850033,\r\n                    longitude: -105.6500523,\r\n                    zoom: 3.5,\r\n                    bearing:-30,\r\n                    pitch:30\r\n                }));\r\n                break\r\n            case 'cartogram':\r\n                setViewState(view => ({\r\n                    ...view,\r\n                    latitude: 11.673,\r\n                    longitude: -31.061,\r\n                    zoom: 4.2,\r\n                    bearing:0,\r\n                    pitch:0\r\n                }));\r\n                break\r\n            default:\r\n                //\r\n        }\r\n    }, [mapParams.vizType])\r\n\r\n    useEffect(() => {\r\n        let tempData = storedLisaData[getVarId(currentData, dataParams)]\r\n        if (tempData !== undefined) setCurrLisaData(tempData);\r\n    }, [storedLisaData, dataParams, mapParams])\r\n\r\n    useEffect(() => {\r\n\r\n        const defaultLayers = defaultMapStyle.get('layers');\r\n\r\n        let tempLayers = defaultLayers.map(layer => {\r\n            if (mapParams.resource.includes(layer.get('id')) || mapParams.overlay.includes(layer.get('id'))) {\r\n                return layer.setIn(['layout', 'visibility'], 'visible');\r\n            } else {\r\n                return layer;\r\n            }\r\n        })\r\n\r\n        setMapStyle(defaultMapStyle.set('layers', tempLayers))\r\n\r\n    }, [mapParams.overlay])\r\n\r\n    useEffect(() => {\r\n        if (hospitalData === null) {\r\n            getCSV('https://raw.githubusercontent.com/covidcaremap/covid19-healthsystemcapacity/master/data/published/us_healthcare_capacity-facility-CovidCareMap.csv')\r\n            .then(values => setHospitalData(values))\r\n        }\r\n\r\n        if (clinicData === null) {\r\n            getCSV(`${process.env.PUBLIC_URL}/csv/health_centers.csv`)\r\n            .then(values => setClinicData(values))\r\n        }\r\n    },[])\r\n    const mapRef = useRef();\r\n    \r\n    const GetFillColor = (f, bins, mapType) => {\r\n        if (!bins.hasOwnProperty(\"bins\")) {\r\n            return [0,0,0]\r\n        } else if (mapType === 'lisa') {\r\n            return colorScales.lisa[currLisaData[storedGeojson[currentData]['geoidOrder'][f.properties.GEOID]]]\r\n        } else {\r\n            return mapFn(dataFn(f[dataParams.numerator], dataParams.nProperty, dataParams.nIndex, dataParams.nRange, f[dataParams.denominator], dataParams.dProperty, dataParams.dIndex, dataParams.dRange, dataParams.scale), bins.breaks, mapParams.colorScale, mapParams.mapType) \r\n        }\r\n    }\r\n    \r\n    const GetHeight = (f, bins) => bins.hasOwnProperty(\"bins\") ? dataFn(f[dataParams.numerator], dataParams.nProperty, dataParams.nIndex, dataParams.nRange, f[dataParams.denominator], dataParams.dProperty, dataParams.dIndex, dataParams.dRange, dataParams.scale)*1000 : 0\r\n    \r\n    const handle3dButton = (using3d) => {\r\n        if (using3d) {\r\n            dispatch(setMapParams({vizType: '2D'}))\r\n            setViewState(view => ({\r\n                ...view,\r\n                bearing:0,\r\n                pitch:0,\r\n                zoom: 3.5,\r\n                transitionInterpolator: new FlyToInterpolator(),\r\n                transitionDuration: 250,\r\n            }))\r\n        } else {\r\n            dispatch(setMapParams({vizType: '3D'}))\r\n            setViewState(view => ({\r\n                ...view,\r\n                bearing:-30,\r\n                pitch:45,\r\n                zoom: 3.5,\r\n                transitionInterpolator: new FlyToInterpolator(),\r\n                transitionDuration: 250,\r\n            }))\r\n        }\r\n    }\r\n    \r\n    const handleGeolocate = (viewState) => {\r\n        setViewState(view => ({\r\n            ...view,\r\n            latitude: viewState.coords.latitude,\r\n            longitude: viewState.coords.longitude,\r\n            zoom: 8,\r\n            transitionInterpolator: new FlyToInterpolator(),\r\n            transitionDuration: 250,\r\n        }))\r\n    }\r\n\r\n    const getCartogramPosition = (data) => data.position;\r\n    const getCartogramScale = (data) => [data.radius, data.radius, data.radius*10];\r\n    const getCartogramFillColor = (val, bins, mapType) => {\r\n        if (!bins.hasOwnProperty(\"bins\")) {\r\n            return [0,0,0]\r\n        // } else if (mapType === 'lisa') {\r\n        //     return colorScales.lisa[currLisaData[storedGeojson[currentData]['geoidOrder'][f.properties.GEOID]]]\r\n        } else {\r\n            return mapFn(val, bins.breaks, mapParams.colorScale, mapParams.mapType) \r\n        }\r\n    }\r\n    const getCartogramTranslation = (data) => [0, 0, data.radius*30];\r\n    // const getCartogramColor = () => mapFn(, bins.breaks, mapParams.colorScale, mapParams.mapType)\r\n    const Layers = [\r\n        new GeoJsonLayer({\r\n            id: 'base continents',\r\n            data: DATA_URL.CONTINENTS,\r\n            pickable: false,\r\n            stroked: false,\r\n            filled: true,\r\n            wireframe: false,\r\n            getFillColor: [30,30,30]\r\n        }),\r\n        new GeoJsonLayer({\r\n            id: 'choropleth',\r\n            data: {\r\n                \"type\": \"FeatureCollection\",\r\n                \"name\": currentData,\r\n                \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\r\n                \"features\": storedData[currentData] ? storedData[currentData] : [],\r\n            },\r\n            visible: mapParams.mapType !== 'cartogram',\r\n            pickable: true,\r\n            stroked: false,\r\n            filled: true,\r\n            wireframe: mapParams.vizType === '3D',\r\n            extruded: mapParams.vizType === '3D',\r\n            opacity: mapParams.vizType === '3D' ? 0.9 : mapParams.resource === '' ? 0.5 : 0.25,\r\n            getFillColor: f => GetFillColor(f, mapParams.bins, mapParams.mapType),\r\n            getElevation: f => GetHeight(f, mapParams.bins, mapParams.mapType),\r\n            updateTriggers: {\r\n                data: currentData,\r\n                getFillColor: [dataParams, mapParams],\r\n                getElevation: [dataParams, mapParams],\r\n            },\r\n            onHover: info => {\r\n                try {\r\n                    setHoverInfo(info)\r\n                } catch {\r\n                    setHoverInfo(null)\r\n                }\r\n            },\r\n            onClick: info => {\r\n                try {\r\n                    dispatch(setDataSidebar(info.object));\r\n                    setHighlightGeog(info.object.properties.GEOID);\r\n                } catch {}\r\n\r\n            }\r\n        }),\r\n        new GeoJsonLayer({\r\n            id: 'highlightLayer',\r\n            data: {\r\n                \"type\": \"FeatureCollection\",\r\n                \"name\": currentData,\r\n                \"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\r\n                \"features\": storedData[currentData] ? storedData[currentData] : [],\r\n            },\r\n            pickable: false,\r\n            stroked: true,\r\n            filled:false,\r\n            getLineColor: f => (highlightGeog === f.properties.GEOID ? [255,255,255] : [255,255,255,0]), \r\n            lineWidthScale: 10,\r\n            getLineWidth: 1,\r\n            lineWidthMinPixels: 2,\r\n            updateTriggers: {\r\n                data: currentData,\r\n                getLineColor: highlightGeog,\r\n            },\r\n        }),\r\n        new IconLayer({\r\n            id: 'hospital-layer',\r\n            data: hospitalData,\r\n            visible: mapParams.resource.includes('hospital'),\r\n            iconAtlas: `${process.env.PUBLIC_URL}/assets/img/icon_atlas.png`,\r\n            iconMapping: ICON_MAPPING,\r\n            getIcon: d => 'hospital',\r\n            getPosition: d => [d.Longitude, d.Latitude],\r\n            sizeUnits: 'meters',\r\n            getSize: 12500,\r\n            sizeMinPixels:6,\r\n            sizeMaxPixels:20,\r\n            updateTriggers: {\r\n                data: hospitalData,\r\n                visible: mapParams\r\n            }\r\n        }),\r\n        new IconLayer({\r\n            id: 'clinics-layer',\r\n            data: clinicData,\r\n            visible: mapParams.resource.includes('clinic'),\r\n            iconAtlas: `${process.env.PUBLIC_URL}/assets/img/icon_atlas.png`,\r\n            iconMapping: ICON_MAPPING,\r\n            getIcon: d => 'clinic',\r\n            getPosition: d => [d.lon, d.lat],\r\n            sizeUnits: 'meters',\r\n            getSize: 12500,\r\n            sizeMinPixels:6,\r\n            sizeMaxPixels:20,\r\n            updateTriggers: {\r\n                data: clinicData,\r\n                visible: mapParams\r\n            }\r\n        }),\r\n        new GeoJsonLayer({\r\n            id: 'blackbelt',\r\n            data: DATA_URL.BLACKBELT,\r\n            pickable: false,\r\n            stroked: false,\r\n            filled:true,\r\n            getLineColor: [0,0,0],\r\n            opacity:0.2,\r\n            visible: mapParams.overlay === \"blackbelt\",\r\n            updateTriggers: {\r\n                visible: mapParams\r\n            },\r\n        }),\r\n        new GeoJsonLayer({\r\n            id: 'segregated cities',\r\n            data: DATA_URL.SEG_CITIES,\r\n            pickable: false,\r\n            stroked: false,\r\n            filled:true,\r\n            getLineColor: [0,0,0],\r\n            opacity:0.2,\r\n            visible: mapParams.overlay === \"segregated_cities\",\r\n            updateTriggers: {\r\n                visible: mapParams\r\n            },\r\n        }),\r\n        new GeoJsonLayer({\r\n            id: 'native american reservations',\r\n            data: DATA_URL.RESERVATIONS,\r\n            pickable: false,\r\n            stroked: false,\r\n            filled:true,\r\n            getLineColor: [0,0,0],\r\n            opacity:0.2,\r\n            visible: mapParams.overlay === \"native_american_reservations\",\r\n            updateTriggers: {\r\n                visible: mapParams\r\n            },\r\n        }),\r\n        new GeoJsonLayer({\r\n            id: 'uscongressional_districts',\r\n            data: DATA_URL.CONGRESS_DISTRICTS,\r\n            pickable: false,\r\n            stroked: true,\r\n            filled:false,\r\n            getLineColor: [0,0,0],\r\n            lineWidthMinPixels:1,\r\n            visible: mapParams.overlay === \"uscongressional_districts\",\r\n            updateTriggers: {\r\n                visible: mapParams\r\n            },\r\n        }),\r\n        new PolygonLayer({\r\n            id: 'background',\r\n            data: [\r\n                // prettier-ignore\r\n                [[-180, 90], [0, 90], [180, 90], [180, -90], [0, -90], [-180, -90]]\r\n            ],\r\n            opacity: 1,\r\n            getPolygon: d => d,\r\n            stroked: false,\r\n            filled: true,\r\n            visible: mapParams.vizType === 'cartogram',\r\n            getFillColor: [10,10,10],\r\n            updateTriggers: {\r\n                visible: mapParams.vizType\r\n            }\r\n        }),\r\n        new ScatterplotLayer({\r\n            id: 'cartogram layer',\r\n            data: cartogramData,\r\n            visible: mapParams.vizType === 'cartogram',\r\n            getPosition: f => storedCartogramData[currVarId][f.id].position,\r\n            getFillColor: f => getCartogramFillColor(storedCartogramData[currVarId][f.id].value, mapParams.bins, mapParams.mapType),\r\n            getRadius: f => storedCartogramData[currVarId][f.id].radius*10,\r\n            transitions: {\r\n                getPosition: 150,\r\n                getFillColor: 150,\r\n                getRadius: 150\r\n            },   \r\n            updateTriggers: {\r\n                getPosition: [storedCartogramData, mapParams, dataParams, currVarId],\r\n                getFillColor: [storedCartogramData, mapParams, dataParams, currVarId],\r\n                getRadius: [storedCartogramData, mapParams, dataParams, currVarId],\r\n                visible: [storedCartogramData, mapParams, dataParams, currVarId]\r\n            }\r\n          }),\r\n        // new SimpleMeshLayer({\r\n        //     id: 'cartogram layer',\r\n        //     data: cartogramData,\r\n        //     // texture: 'texture.png',\r\n        //     sizeScale:10,\r\n        //     visible: mapParams.vizType === 'cartogram',\r\n        //     mesh: cartoGeom,\r\n        //     getPosition:f => getCartogramPosition(storedCartogramData[currVarId][f.id]),\r\n        //     getColor: f => getCartogramFillColor(storedCartogramData[currVarId][f.id].value, mapParams.bins, mapParams.mapType),\r\n        //     getScale: f => getCartogramScale(storedCartogramData[currVarId][f.id]),\r\n        //     // getTranslation: f => getCartogramTranslation(storedCartogramData[currVarId][f.id]),\r\n        //     transitions: {\r\n        //         getPosition: 150,\r\n        //         getColor: 150,\r\n        //         getScale: 150,\r\n        //         getTranslation: 150\r\n        //     },   \r\n        //     updateTriggers: {\r\n        //         getPosition: [mapParams, dataParams, currVarId],\r\n        //         getColor: [mapParams, dataParams, currVarId],\r\n        //         getScale: [mapParams, dataParams, currVarId],\r\n        //         getTranslation: [mapParams, dataParams, currVarId]\r\n        //     }\r\n        //   })\r\n    ]\r\n\r\n    return (\r\n        <div id=\"mapContainer\" style={{position:'fixed',left:0,top:0,width:'100%',height:'100%'}}>\r\n            <DeckGL\r\n                initialViewState={viewState}\r\n                controller={true}\r\n                layers={Layers}\r\n                views={globalMap ? viewGlobe : view} //enable this for globe view\r\n            >\r\n                <ReactMapGL\r\n                    reuseMaps\r\n                    ref={mapRef}\r\n                    mapStyle={mapStyle} //{globalMap || mapParams.vizType === 'cartogram' ? 'mapbox://styles/lixun910/ckhtcdx4b0xyc19qzlt4b5c0d' : 'mapbox://styles/lixun910/ckhkoo8ix29s119ruodgwfxec'}\r\n                    preventStyleDiffing={true}\r\n                    mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                    onLoad={() => dispatch(setMapLoaded(true))}\r\n                    >\r\n                        \r\n                    <Geocoder\r\n                    mapRef={mapRef}\r\n                    onViewportChange={viewState  => setViewState(viewState)} \r\n                    mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n                    position=\"top-right\"\r\n                    style={{transform:'translateY(-5px)'}}\r\n                    />\r\n                    <NavBarBacking />\r\n                        \r\n                    <div style={{position: 'absolute', right: panelState.info ? 317 : 10, bottom: 30, zIndex: 10, transition: '250ms all'}}>\r\n                        {/* <NavInlineButton\r\n                            onClick={() => setGlobalMap(prev => !prev)}\r\n                            isActive={globalMap}\r\n                        >\r\n                            <svg  x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\" >\r\n                                <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                                    <g>\r\n                                        <path d=\"M50-21c-39.2,0-71,31.9-71,71c0,39.2,31.9,71,71,71c39.2,0,71-31.9,71-71C121,10.8,89.2-21,50-21z M50-10.9\r\n                                            c1.7,0,3.7,0.9,6.1,3.5c2.4,2.7,4.9,7,7.1,12.5c2.1,5.4,3.8,12.1,5.1,19.4H31.7c1.2-7.4,3-14,5.1-19.4c2.1-5.6,4.7-9.9,7.1-12.5\r\n                                            C46.3-10,48.3-10.9,50-10.9z M32-8.2c-1.7,2.9-3.3,6.1-4.7,9.7c-2.6,6.7-4.6,14.5-5.9,23.1H-5.3C1.8,9,15.4-3.1,32-8.2z M68-8.2\r\n                                            C84.6-3.1,98.2,9,105.3,24.6H78.6C77.2,16,75.2,8.2,72.7,1.5C71.3-2.1,69.7-5.3,68-8.2z M-8.9,34.8h29.1c-0.4,4.9-0.7,10-0.7,15.2\r\n                                            c0,5.2,0.2,10.3,0.7,15.2H-8.9c-1.3-4.9-2-10-2-15.2C-10.9,44.7-10.2,39.6-8.9,34.8z M30.5,34.8h39c0.5,4.9,0.8,9.9,0.8,15.2\r\n                                            c0,5.3-0.3,10.3-0.8,15.2h-39c-0.5-4.9-0.8-9.9-0.8-15.2C29.7,44.7,30,39.7,30.5,34.8z M79.8,34.8h29.1c1.3,4.9,2,10,2,15.2\r\n                                            c0,5.3-0.7,10.4-2,15.2H79.8c0.4-4.9,0.7-10,0.7-15.2C80.4,44.8,80.2,39.7,79.8,34.8z M-5.3,75.4h26.8c1.3,8.6,3.3,16.4,5.9,23.1\r\n                                            c1.4,3.6,2.9,6.8,4.7,9.7C15.4,103.1,1.8,91-5.3,75.4z M31.7,75.4h36.5c-1.2,7.4-3,14-5.1,19.5c-2.1,5.6-4.7,9.9-7.1,12.5\r\n                                            c-2.4,2.7-4.4,3.5-6.1,3.5s-3.7-0.9-6.1-3.5c-2.4-2.7-4.9-7-7.1-12.5C34.7,89.4,33,82.8,31.7,75.4z M78.6,75.4h26.8\r\n                                            C98.2,91,84.6,103.1,68,108.2c1.7-2.9,3.3-6.1,4.7-9.7C75.2,91.8,77.2,84,78.6,75.4z\"/>\r\n                                    </g>\r\n                                </g>\r\n                            </svg>\r\n                        </NavInlineButton> */}\r\n                        {/* <NavInlineButton\r\n                            onClick={() => handle3dButton(mapParams.use3d)}\r\n                            isActive={mapParams.use3d}\r\n                        >\r\n                            <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                                <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                                    <path d=\"M109,23.7c0-1-0.2-1.9-0.7-2.8c-0.1-0.2-0.3-0.4-0.5-0.7c-0.4-0.6-0.8-1.1-1.3-1.5l0,0L54.1-20.5c-2.3-1.7-5.5-1.7-7.9,0\r\n                                        L-6.2,18.8l0,0c-0.5,0.4-1,0.9-1.3,1.5C-7.7,20.5-7.8,20.7-8,21c-0.6,0.8-0.9,1.8-1,2.8v52.5c0,0,0,0,0,0.5c0.2,1.7,1,3.3,2.2,4.5\r\n                                        v0.3l52.5,39.3l0.9,0.5l0.7,0.4c1.5,0.6,3.2,0.6,4.7,0l0.7-0.4l0.9-0.5l52.5-39.3v-0.3c1.3-1.2,2.1-2.8,2.2-4.5c0,0,0,0,0-0.5\r\n                                        L109,23.7z M4.1,36.8l39.3,29.5v36.1L4.1,72.9V36.8z M56.6,66.3l39.3-29.5v36.1l-39.3,29.5V66.3z M50-7.4l41.5,31.1L50,54.9\r\n                                        L8.5,23.7L50-7.4z\"/>\r\n                                </g>\r\n                            </svg>\r\n                        </NavInlineButton> */}\r\n                        <GeolocateControl\r\n                            positionOptions={{enableHighAccuracy: false}}\r\n                            trackUserLocation={false}\r\n                            onGeolocate={viewState  => handleGeolocate(viewState)}\r\n                            style={{marginBottom: 10}}\r\n                        />\r\n                        <NavigationControl\r\n                            onViewportChange={viewState  => setViewState(viewState)} \r\n                        />\r\n                    </div>\r\n                    <div></div>\r\n                </ReactMapGL >\r\n                {hoverInfo.object && (\r\n                <HoverDiv style={{position: 'absolute', zIndex: 1, pointerEvents: 'none', left: hoverInfo.x, top: hoverInfo.y}}>\r\n                    <MapTooltipContent content={hoverInfo.object} />\r\n                </HoverDiv>\r\n                )}\r\n            </DeckGL>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Map","import styled from 'styled-components';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nexport const StyledDropDown = styled(FormControl)`\r\n  padding:0 0 ${props => props.component === 'radios' ? '20' : '40'}px 0!important;\r\n  color:white;\r\n  padding:0;\r\n  margin: 0 10px 40px 0;\r\n  .MuiInputBase-root {\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n  .MuiFormLabel-root {\r\n    color: white;\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n  .Mui-focused {\r\n    color: white !important;\r\n  }\r\n  .MuiInput-underline:before {\r\n    border-bottom:1px solid rgba(255,255, 255, 0.42);\r\n  }\r\n  .MuiInput-underline:after {\r\n    border-bottom: 2px solid white\r\n  }\r\n  .MuiInputBase-root {\r\n    color: white;\r\n    .MuiSvgIcon-root {\r\n      color: rgba(255,255,255,0.54);\r\n    },\r\n    .MuiPopover-paper {\r\n      color:white;\r\n    }\r\n  }\r\n  .MuiFormGroup-root {\r\n    .MuiFormControlLabel-root{\r\n      color:white;\r\n      span {\r\n        font-family: 'Lato', sans-serif;\r\n      }\r\n      .MuiRadio-root {\r\n        color: rgba(255,255,255,0.54);\r\n      }\r\n    }\r\n  }\r\n  .MuiRadio-root {\r\n    color:white;\r\n  }\r\n  .MuiRadio-colorSecondary.Mui-checked {\r\n    color:white;\r\n  }\r\n`\r\n\r\nexport const SwitchContainer = styled(Grid)`\r\n  padding-top:4px !important;\r\n  p { \r\n    display: inline;\r\n    color:white;\r\n    transform:translateY(5px);\r\n  }\r\n  span.MuiSwitch-track {\r\n      background-color:#ddd;\r\n  }\r\n  .MuiSwitch-colorSecondary.Mui-checked {\r\n      color:#A1E1E3;\r\n  }\r\n  .MuiSwitch-colorSecondary.Mui-checked + .MuiSwitch-track {\r\n      background-color: #A1E1E3;\r\n  }\r\n  .MuiSwitch-colorSecondary:hover {\r\n      background-color:#A1E1E355;\r\n  }\r\n`","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport styled from 'styled-components';\r\nimport { setDate, setVariableParams, incrementDate } from '../actions';\r\nimport { StyledDropDown } from '../styled_components';\r\n// import { getParseCSV, getJson, mergeData, colIndex, getDataForBins } from './utils';\r\n\r\nconst SliderContainer = styled.div`\r\n    color: white;\r\n    box-sizing:border-box;\r\n    padding:0 20px;\r\n    width:100%;\r\n`\r\n\r\nconst DateButton = styled(Button)`\r\n    color:rgb(200,200,200) !important;\r\n    background: none;\r\n    transition: 250ms all;\r\n    border:none !important;\r\n    font-size: 75% !important;\r\n    transition:250ms all;\r\n    &:hover {\r\n        color:white;\r\n        border:none !important;\r\n    }\r\n    &.active {\r\n        cursor: initial;\r\n        font-size: 75%;\r\n        color:black !important;\r\n        background: white !important;\r\n        transition: 250ms all;\r\n        border:none !important;\r\n    }\r\n    .MuiButtonGroup-vertical {\r\n        border:none !important;\r\n    }\r\n    .MuiButton-label {\r\n        justify-content: left !important;\r\n        text-transform:none;\r\n        font-family:'Lato', sans-serif;\r\n        font-weight:bold;\r\n    }\r\n`\r\nconst PlayPauseButton = styled(Button)`\r\n    background:none;\r\n    padding:0;\r\n    margin:0;\r\n    svg {\r\n        width: 75%;\r\n        g {\r\n            fill: white;\r\n        }\r\n    }\r\n    &.MuiButton-text {\r\n        padding:6px 0;\r\n    }\r\n`\r\n\r\nconst LineSlider = styled(Slider)`\r\n    box-sizing:border-box;\r\n    padding-right:8px;\r\n    transform:translateY(34px);\r\n    span.MuiSlider-rail {\r\n        color:white;\r\n        height:1px;\r\n    }\r\n    span.MuiSlider-track {\r\n        color:white;\r\n    }\r\n    span.MuiSlider-thumb {\r\n        color:white;\r\n        .MuiSlider-valueLabel {\r\n            transform:translateY(-10px);\r\n            pointer-events:none;\r\n            span {\r\n                background: none;\r\n            }\r\n        }\r\n    }\r\n    // .MuiSlider-valueLabel span{\r\n    //     transform:translateX(-100%);        \r\n    // }\r\n    span.MuiSlider-thumb.MuiSlider-active {\r\n        box-shadow: 0px 0px 10px rgba(200,200,200,0.5);\r\n    }\r\n`\r\n\r\nconst RangeSlider = styled(Slider)`\r\n    box-sizing:border-box;\r\n    padding-right:8px;\r\n    transform:translateY(34px);\r\n    span.MuiSlider-rail {\r\n        color:white;\r\n        height:1px;\r\n    }\r\n    span.MuiSlider-track {\r\n        color:white;\r\n    }\r\n    span.MuiSlider-thumb {\r\n        color:white;\r\n        .MuiSlider-valueLabel {\r\n            transform:translateY(-10px);\r\n            pointer-events:none;\r\n            span {\r\n                background: none;\r\n            }\r\n        }\r\n    }\r\n    span.MuiSlider-thumb.MuiSlider-active: {\r\n        box-shadow: 0px 0px 10px rgba(200,200,200,0.5);\r\n    }\r\n`\r\n\r\nconst DateSlider = () => {\r\n    const dispatch = useDispatch();  \r\n    \r\n    const currentData = useSelector(state => state.currentData);\r\n    const dates = useSelector(state => state.dates);\r\n    const dataParams = useSelector(state => state.dataParams);\r\n    const startDateIndex = useSelector(state => state.startDateIndex);\r\n    \r\n    const [timerId, setTimerId] = useState(null);\r\n    const [customRange, setCustomRange] = useState(false);\r\n    const [rangeSelectVal, setRangeSelectVal] = useState(7);\r\n    \r\n    const handleChange = (event, newValue) => {\r\n        console.log(newValue)\r\n        if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue, dIndex: newValue}))\r\n        } else if (dataParams.nType === \"time-series\") {\r\n            dispatch(setVariableParams({nIndex: newValue}))\r\n        } else if (dataParams.dType === \"time-series\") {\r\n            dispatch(setVariableParams({dIndex: newValue}))\r\n        } \r\n        dispatch(setDate(dates[currentData][newValue]));\r\n    };\r\n\r\n    const handleRangeChange = (event, newValue) => {   \r\n        console.log(newValue)\r\n        if (dataParams.dRange) {\r\n            dispatch(setVariableParams(\r\n                {\r\n                    nIndex: newValue[1], \r\n                    nRange: newValue[1]-newValue[0],\r\n                    rIndex: newValue[1], \r\n                    rRange: newValue[1]-newValue[0]\r\n                }\r\n            ))\r\n        } else {\r\n            dispatch(setVariableParams(\r\n                {\r\n                    nIndex: newValue[1], \r\n                    nRange: newValue[1]-newValue[0]\r\n                }\r\n            ))\r\n        }\r\n    }\r\n\r\n    const handlePlayPause = (timerId, rate, interval) => {\r\n        if (timerId === null) {\r\n            setTimerId(setInterval(o => dispatch(incrementDate(rate)), interval))\r\n        } else {\r\n            clearInterval(timerId);\r\n            setTimerId(null)\r\n        }\r\n    }\r\n\r\n    const handleRangeButton = (event) => {\r\n        let val = event.target.value;\r\n\r\n        if (val === 'custom') { // if swapping over to a custom range, which will use a 2-part slider to scrub the range\r\n            setCustomRange(true)\r\n            if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n                dispatch(setVariableParams({nRange: 14, dRange: 14}))\r\n            } else if (dataParams.nType === \"time-series\") {\r\n                dispatch(setVariableParams({nRange: 14}))\r\n            } else if (dataParams.dType === \"time-series\") {\r\n                dispatch(setVariableParams({dRange: 14}))\r\n            } \r\n        } else { // use the new value -- null for cumulative, 1 for daily, 7 for weekly\r\n            setCustomRange(false)\r\n            if (dataParams.nType === \"time-series\" && dataParams.dType === \"time-series\") {\r\n                dispatch(setVariableParams({nRange: val, dRange: val}))\r\n            } else if (dataParams.nType === \"time-series\") {\r\n                dispatch(setVariableParams({nRange: val}))\r\n            } else if (dataParams.dType === \"time-series\") {\r\n                dispatch(setVariableParams({dRange: val}))\r\n            }    \r\n        }\r\n        \r\n        setRangeSelectVal(val);\r\n    }\r\n\r\n    const valuetext = (value) => `${dates[currentData][value-startDateIndex]}`;\r\n\r\n    if (dates[currentData] !== undefined) {\r\n        return (\r\n            <SliderContainer style={{visibility: (dataParams.nType === 'time-series' ? 'visible' : 'hidden')}}>\r\n                <Grid container spacing={2}>\r\n                    {/* <Grid item xs={12}>\r\n                        <h4 style={{textAlign:\"center\", color:\"white\"}}>{dates[currentData][dataParams.nIndex]||dates[currentData].slice(-1,)[0]}</h4>\r\n                    </Grid> */}\r\n                    <Grid item xs={1}>\r\n                        <PlayPauseButton id=\"playPause\" onClick={() => handlePlayPause(timerId, 1, 100)}>\r\n                            {timerId === null ? \r\n                                <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                                    <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                                        <g>\r\n                                            <path d=\"M74.4,58.7L40.7,92.2c-7.1,7.2-18.7,4.4-18.7-6.3V14c0-10.7,11.6-13.5,18.7-6.3l33.6,33.5\r\n                                                C79.1,46,79.1,53.8,74.4,58.7z M69.1,53.4c1.9-1.9,1.9-5,0-6.7L35.5,13c-2.1-2.1-6-3.2-6,1.1V86c0,4.3,3.9,3.2,6,1.1L69.1,53.4z\"\r\n                                                />\r\n                                        </g>\r\n                                    </g>\r\n                                </svg>\r\n                                : \r\n                                <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                                    <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                                        <g>\r\n                                            <path d=\"M22.4,0.6c3.4,0,6.8,0,10.3,0c6.5,0,11.8,5.3,11.8,11.8c0,25,0,50.1,0,75.2c0,6.5-5.3,11.8-11.8,11.8\r\n                                                c-3.4,0-6.8,0-10.3,0c-6.5,0-11.8-5.3-11.8-11.8c0-25.1,0-50.2,0-75.2C10.6,5.9,15.9,0.6,22.4,0.6z M22.4,6.5c3.4,0,6.8,0,10.3,0\r\n                                                c3.2,0,5.9,2.6,5.9,5.9c0,25,0,50.1,0,75.2c0,3.2-2.7,5.9-5.9,5.9c-3.4,0-6.8,0-10.3,0c-3.2,0-5.9-2.7-5.9-5.9\r\n                                                c0-25.1,0-50.2,0-75.2C16.5,9.1,19.2,6.5,22.4,6.5z M67.3,6.5c3.4,0,6.8,0,10.2,0s6,2.6,6,5.9c0,25,0,50.1,0,75.2\r\n                                                c0,3.2-2.7,5.9-6,5.9s-6.7,0-10.2,0c-3.3,0-5.9-2.7-5.9-5.9c0-25.1,0-50.2,0-75.2C61.4,9.1,64,6.5,67.3,6.5z M67.3,0.6\r\n                                                c3.4,0,6.8,0,10.2,0c6.5,0,11.8,5.3,11.8,11.8c0,25,0,50.1,0,75.2c0,6.5-5.3,11.8-11.8,11.8c-3.3,0-6.7,0-10.2,0\r\n                                                c-6.5,0-11.8-5.3-11.8-11.8c0-25.1,0-50.2,0-75.2C55.5,5.9,60.8,0.6,67.3,0.6z\"/>\r\n                                        </g>\r\n                                    </g>\r\n                                </svg>\r\n\r\n                            }\r\n                        </PlayPauseButton>\r\n                    </Grid>\r\n                    <Grid item xs={11} lg={9}>\r\n                        {!customRange && <LineSlider \r\n                            value={dataParams.nIndex} \r\n                            valueLabelDisplay=\"on\"\r\n                            onChange={handleChange} \r\n                            getAriaValueText={valuetext}\r\n                            valueLabelFormat={valuetext}\r\n                            aria-labelledby=\"aria-valuetext\"\r\n                            min={startDateIndex}\r\n                            step={1}\r\n                            max={startDateIndex+dates[currentData].length-1}\r\n                        />}\r\n                        {customRange && <RangeSlider \r\n                            value={[dataParams.nIndex-dataParams.nRange, dataParams.nIndex]} \r\n                            valueLabelDisplay=\"on\"\r\n                            onChange={handleRangeChange} \r\n                            getAriaValueText={valuetext}\r\n                            valueLabelFormat={valuetext}\r\n                            aria-labelledby=\"aria-valuetext\"\r\n                            min={startDateIndex}\r\n                            step={1}\r\n                            max={startDateIndex+dates[currentData].length-1}\r\n                        />}\r\n                    </Grid>\r\n                    <Grid item xs={12} lg={2} style={{paddingLeft:'17px'}}>\r\n                        <StyledDropDown>\r\n                            <InputLabel htmlFor=\"date-select\">Date Range</InputLabel>\r\n                            <Select  \r\n                                id=\"date-select\"\r\n                                value={rangeSelectVal}\r\n                                onChange={handleRangeButton}\r\n                            >\r\n                                <MenuItem value={null} key={'cumulative'}>Cumulative</MenuItem>\r\n                                <MenuItem value={1} key={'daily'}>New Daily</MenuItem>\r\n                                <MenuItem value={7} key={'weekly'}>Weekly Average</MenuItem>\r\n                                <MenuItem value={'custom'} key={'customRange'}>Custom Range</MenuItem>\r\n                            </Select>\r\n                        </StyledDropDown>\r\n                    </Grid>\r\n                </Grid>\r\n            </SliderContainer>\r\n        );\r\n    } else {\r\n        return <SliderContainer />\r\n    }\r\n}\r\n\r\nexport default DateSlider","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { SwitchContainer } from '../styled_components';\r\nimport { setMapParams } from '../actions';\r\n\r\nconst LegendContainer = styled.div`\r\n    width:100%;\r\n    padding:20px;\r\n    margin:0;\r\n    box-sizing: border-box;\r\n`\r\n\r\nconst LegendTitle = styled.h3`\r\n    text-align: left;\r\n    font-family:'Playfair Display', serif;\r\n    padding:0 0 10px 0;\r\n    font-weight:normal;\r\n    margin:0;\r\n    color:white;\r\n`\r\n\r\nconst BinLabels = styled.div`\r\n    width:100%;\r\n    display: flex;\r\n    margin-top:0px;\r\n    box-sizing: border-box;\r\n    padding: 0 ${props => props.binLength > 6 ? 100/props.binLength/2-1 : 0}%;\r\n    .bin { \r\n        height:10px;\r\n        display: inline;\r\n        border:0;\r\n        margin:0;\r\n        flex:2;\r\n        color:white;\r\n        font-size:10px;\r\n        text-align: center;\r\n    }\r\n    .bin:nth-of-type(1) {\r\n        transform: ${props => props.firstBinZero ? 'translateX(-45%)' : 'none'};\r\n    }\r\n`\r\nconst BinBars = styled.div`\r\n    width:100%;\r\n    display: flex;\r\n    margin-top:10px;\r\n    box-sizing: border-box;\r\n    .bin { \r\n        height:10px;\r\n        display: inline;\r\n        flex:1;\r\n        border:0;\r\n        margin:0;\r\n    }\r\n    .bin:nth-of-type(1) {\r\n        transform: ${props => props.firstBinZero ? 'scaleX(0.35)' : 'none'};\r\n    }\r\n`\r\n\r\n\r\nconst Legend =  () => {\r\n    const dispatch = useDispatch();\r\n    \r\n    const mapParams = useSelector(state => state.mapParams)\r\n    const dataParams = useSelector(state => state.dataParams)\r\n    const title = useSelector(state => state.currentVariable)\r\n\r\n    const cleanBins = (bins) => {\r\n        if (bins === undefined) {\r\n            return;\r\n        } else if (bins.slice(-1,)[0] !==`>${bins.slice(-2,-1)[0]}`) {\r\n            return bins\r\n        }\r\n        bins.splice(0, 1, `<${bins[0]}`)\r\n        bins.splice(-2, 1)\r\n        return bins\r\n    }\r\n\r\n    const handleSwitch = () => {\r\n        if (mapParams.binMode === 'dynamic') {\r\n            dispatch(setMapParams({binMode:''}))\r\n        } else {\r\n            dispatch(setMapParams({binMode:'dynamic'}))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <LegendContainer>\r\n            <Grid container spacing={2} id='legend-bins-container'>\r\n                <Grid item xs={12} lg={4}>\r\n                    <LegendTitle>\r\n                        {title}\r\n                    </LegendTitle>\r\n                </Grid>\r\n                <Grid item xs={12} lg={6}>\r\n                    <BinBars firstBinZero={`${mapParams.colorScale[0]}` === `240,240,240`}>\r\n                        {\r\n                            mapParams.colorScale !== undefined && \r\n                            mapParams.colorScale.map(color => <div className=\"bin color\" key={`${color[0]}${color[1]}`}style={{backgroundColor:`rgb(${color[0]},${color[1]},${color[2]})`}}></div>)\r\n                        }\r\n                    </BinBars>\r\n                    <BinLabels firstBinZero={`${mapParams.colorScale[0]}` === `240,240,240`} binLength={mapParams.bins.bins.length}>\r\n                        {`${mapParams.colorScale[0]}` === `240,240,240` && <div className=\"bin firstBin\">0</div>}\r\n\r\n                        {\r\n                            mapParams.bins.bins !== undefined && \r\n                            cleanBins(mapParams.bins.bins).map(label => <div className=\"bin label\" key={label}>{label}</div>)\r\n                        }\r\n                    </BinLabels>\r\n                </Grid>\r\n                <SwitchContainer item xs={12} lg={2}>\r\n                    <Switch\r\n                        checked={mapParams.binMode === 'dynamic'}\r\n                        onChange={handleSwitch}\r\n                        name=\"bin chart switch\"\r\n                    />\r\n                    <p>{mapParams.binMode === 'dynamic' ? 'Daily Bins' : 'Fixed Bins'}</p>\r\n                </SwitchContainer>\r\n            </Grid>\r\n        </LegendContainer>\r\n    )\r\n}\r\n\r\nexport default Legend","// This components formats the data for the selected geography\r\n// and displays it in the right side panel.\r\n\r\nimport React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { setPanelState } from '../actions';\r\nimport {dataFn, colLookup} from '../utils';\r\n\r\n// Styled components CSS\r\nconst DataPanelContainer = styled.div`\r\n  position:fixed;\r\n  right:0;\r\n  top:50px;\r\n  height:calc(100vh - 50px);\r\n  min-width:200px;\r\n  background-color: #2b2b2b;\r\n  box-shadow: -2px 0px 5px rgba(0,0,0,0.7);\r\n  padding:20px;\r\n  box-sizing: border-box;\r\n  transition:250ms all;\r\n  font: 'Lato', sans-serif;\r\n  color: white;\r\n  font-size:100%;\r\n  padding:0;\r\n  z-index:5;\r\n  div.container {\r\n    width:100%;\r\n    height:100vh;\r\n    overflow-y:scroll;\r\n    padding:5px 0 0 30px;\r\n    box-sizing:border-box;\r\n    div {\r\n      padding-right:20px;\r\n      box-sizing:border-box;\r\n    }\r\n  }\r\n  button#showHideRight {\r\n    position:absolute;    \r\n    right:95%;\r\n    top:20px;\r\n    width:40px;\r\n    height:40px;\r\n    padding:0;\r\n    margin:0;\r\n    background-color: #2b2b2b;\r\n    box-shadow: 0px 0px 6px rgba(0,0,0,1);\r\n    outline:none;\r\n    border:none;\r\n    cursor: pointer;\r\n    transition:500ms all;\r\n    svg {\r\n      padding:0;\r\n      margin:0;\r\n      fill:white;\r\n      transform:rotate(180deg);\r\n      transition:500ms all;\r\n    }\r\n    :after {\r\n      opacity:0;\r\n      font-weight:bold;\r\n      color:white;\r\n      position: relative;\r\n      top:-30px;\r\n      transition:500ms all;\r\n      content: 'Info';\r\n      right:40px;\r\n      z-index:4;\r\n    }\r\n  }\r\n  button#showHideRight.hidden {\r\n    right:100%;\r\n    svg {\r\n      transform:rotate(0deg);\r\n    }\r\n    :after {\r\n      opacity:1;\r\n    }\r\n  }\r\n`\r\n\r\nconst DataPanel = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // de-structure sidebarData, which houses selected geography data\r\n  const { properties, cases, deaths, predictions,\r\n    chr_health_factors, chr_life, chr_health_context } = useSelector(state => state.sidebarData);\r\n  // name of current data set\r\n  const currentData = useSelector(state => state.currentData);\r\n  // panels open/close state\r\n  const panelState = useSelector(state => state.panelState);\r\n  //column names\r\n  const cols = useSelector(state => state.cols);\r\n\r\n  // helper for predictions data\r\n  const parsePredictedDate = (list) => `${list.slice(-2,)[0]}/${list.slice(-1,)[0]}`\r\n\r\n  // handles panel open/close\r\n  const handleOpenClose = () => panelState.info ? dispatch(setPanelState({info:false})) : dispatch(setPanelState({info:true}))\r\n  \r\n  return (\r\n    <DataPanelContainer style={{transform: (panelState.info ? '' : 'translateX(100%)')}} id=\"data-panel\">\r\n      <div className=\"container\">\r\n        {properties && <h2>{properties.NAME}, {properties.state_name}</h2>}\r\n        {properties && \r\n          <div>\r\n            <p>Population: {properties.population.toLocaleString('en')}</p>\r\n          </div>\r\n        }\r\n        {(cases && deaths) && \r\n          <div>\r\n            <p>\r\n              Total Cases: {cases.slice(-1,)[0].toLocaleString('en')}<br/>\r\n              Total Deaths: {deaths.slice(-1,)[0].toLocaleString('en')}<br/>\r\n              Cases per 100k Population: {dataFn(cases, null, cases.length-1, null, properties, 'population', null, null, 100000).toFixed(2).toLocaleString('en')}<br/>\r\n              Deaths per 100k Population: {dataFn(deaths, null, deaths.length-1, null, properties, 'population', null, null, 100000).toFixed(2).toLocaleString('en')}<br/>\r\n              New Cases per 100k Population: {dataFn(cases, null, cases.length-1, 1, properties, 'population', null, null, 100000).toFixed(2).toLocaleString('en')}<br/>\r\n              New Deaths per 100k Population: {dataFn(deaths, null, deaths.length-1, 1, properties, 'population', null, null, 100000).toFixed(2).toLocaleString('en')}<br/>\r\n              Licensed Hospital Beds: {properties.beds.toLocaleString('en')}<br/>\r\n              Cases per Bed: {dataFn(cases, null, cases.length-1, null, properties, 'beds', null, null, 1).toFixed(2).toLocaleString('en')}<br/>\r\n            </p>\r\n          </div>\r\n        }\r\n        {chr_health_factors &&\r\n          <div>\r\n            <h2>Community Health Factors</h2>\r\n            <p>\r\n              Children in poverty %: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PovChldPrc')]}<br/>\r\n              Income inequality: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'IncRt')]}<br/>\r\n              Median household income: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'MedianHouseholdIncome')].toLocaleString('en')}<br/>\r\n              Food insecurity %: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'FdInsPrc')]}<br/>\r\n              Unemployment %: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'UnEmplyPrc')]}<br/>\r\n              Uninsured %: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'UnInPrc')]}<br/>\r\n              Primary care physicians: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PrmPhysRt')]}<br/>\r\n              Preventable hospital stays: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'PrevHospRt')].toLocaleString('en')}<br/>\r\n              Residential segregation-black/white: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'RsiSgrBlckRt')]}<br/>\r\n              Severe housing problems %: {chr_health_factors[colLookup(cols, currentData, 'chr_health_factors', 'SvrHsngPrbRt')]}<br/>\r\n            </p>\r\n          </div>\r\n        }\r\n        {chr_health_context &&\r\n          <div>\r\n            <h2>Community Health Context</h2>\r\n            <p>\r\n              % 65 and older: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'Over65YearsPrc')]} <br/>\r\n              Adult obesity %: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'AdObPrc')]} <br/>\r\n              Diabetes prevalence %: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'AdDibPrc')]} <br/>\r\n              Adult smoking %: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'SmkPrc')]} <br/>\r\n              Excessive drinking %: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'ExcDrkPrc')]} <br/>\r\n              Drug overdose deaths: {chr_health_context[colLookup(cols, currentData, 'chr_health_context', 'DrOverdMrtRt')]||'0'} <br/>\r\n            </p>\r\n          </div>\r\n        }\r\n        {chr_life && \r\n          <div>\r\n            <h2>Length and Quality of Life</h2>\r\n            <p>\r\n              Life expectancy: {chr_life[colLookup(cols, currentData, 'chr_life', 'LfExpRt')]} <br/>\r\n              Self-rated health %: {chr_life[colLookup(cols, currentData, 'chr_life', 'SlfHlthPrc')]} <br/>\r\n            </p>\r\n          </div>\r\n        }\r\n        {predictions && \r\n          <div>\r\n            <h2>Predictions</h2>\r\n            <p>\r\n              5-Day Severity Index: {['','High','Medium','Low'][predictions[1]]} <br />\r\n              Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[2].split('_'))}: {predictions[2]} <br/>\r\n              Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[4].split('_'))}: {predictions[4]} <br/>\r\n              Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[6].split('_'))}: {predictions[6]} <br/>\r\n              Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[8].split('_'))}: {predictions[8]} <br/>\r\n              Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[10].split('_'))}: {predictions[10]} <br/>\r\n              Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[12].split('_'))}: {predictions[12]} <br/>\r\n              Predicted Deaths by {parsePredictedDate(cols[currentData].predictions[14].split('_'))}: {predictions[14]} <br/>\r\n            </p>\r\n          </div>\r\n        }\r\n        \r\n        {cases && <button onClick={handleOpenClose} id=\"showHideRight\" className={panelState.info ? 'active' : 'hidden'}>\r\n          <svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n            <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n              <path d=\"M38,33.8L23.9,47.9c-1.2,1.2-1.2,3.1,0,4.2L38,66.2l4.2-4.2l-9-9H71v17c0,0.6-0.4,1-1,1H59v6h11\r\n                c3.9,0,7-3.1,7-7V30c0-3.9-3.1-7-7-7H59v6h11c0.6,0,1,0.4,1,1v17H33.2l9-9L38,33.8z\"/>\r\n            </g>\r\n          </svg>\r\n\r\n        </button>}\r\n      </div>\r\n    </DataPanelContainer>\r\n  );\r\n}\r\n\r\nexport default DataPanel;","// this components houses the slider, legend, and bottom dock chart\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { Legend, DateSlider, MainLineChart } from '../components';\r\nimport { setPanelState } from '../actions';\r\n\r\n// helper function to get dock offset\r\nconst getChartHeight = () => { try { return document.querySelector('#main-chart-container').offsetHeight} catch { return 0} }\r\n\r\n// Styled components\r\nconst BottomDrawer = styled.div`\r\n    position: fixed;\r\n    bottom:-${props => props.bottom}px;\r\n    left:50%;\r\n    background:#2b2b2b;\r\n    transform:translateX(-50%);\r\n    width:90vw;\r\n    max-width: 960px;\r\n    box-sizing: border-box;\r\n    padding:0;\r\n    margin:0;\r\n    box-shadow: 0px 0px 5px rgba(0,0,0,0.7);\r\n    border-radius:0.5vh 0.5vh 0 0;\r\n    transition:250ms all;\r\n    hr {\r\n        opacity:0.5;\r\n    }\r\n`\r\nconst OpenCloseButton = styled.button`\r\n    background: none;\r\n    position:absolute;\r\n    right:5px;\r\n    bottom:${props => props.bottom}px;\r\n    width:40px;\r\n    height:40px;\r\n    padding:0;\r\n    transform:${props => props.bottom===5?'rotate(270deg)':'rotate(90deg)'};\r\n    border:none;\r\n    outline:none;\r\n    transition:250ms all;\r\n    svg {\r\n        fill:white;\r\n        width:\r\n    }\r\n    &.hidden {\r\n        bottom:;\r\n        transform:;\r\n    }\r\n`\r\n\r\nconst BottomPanel = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const panelState = useSelector(state => state.panelState);\r\n\r\n    // offset for the bottom panel based on the chart height, \r\n    // managed through props via styled-components\r\n    const [bottomMargin, setBottomMargin] = useState(0);\r\n    const handleBottomOpen = () => {\r\n        if (panelState.chart) {\r\n            setBottomMargin(getChartHeight())\r\n            dispatch(setPanelState({chart:false}))\r\n        } else {\r\n            setBottomMargin(getChartHeight())\r\n            dispatch(setPanelState({chart:true}))\r\n\r\n        }\r\n    }\r\n    \r\n    const handleResize = () => setBottomMargin(getChartHeight())\r\n    window.addEventListener(\"resize\", handleResize);\r\n    \r\n    return (\r\n        <BottomDrawer bottom={panelState.chart ? 0 : bottomMargin }>\r\n            <Legend />\r\n            <DateSlider />\r\n            <hr />\r\n            <MainLineChart />\r\n            <OpenCloseButton onClick={handleBottomOpen} bottom={panelState.chart ? 5 : bottomMargin}>\r\n                <svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n                    <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n                        <path d=\"M38,33.8L23.9,47.9c-1.2,1.2-1.2,3.1,0,4.2L38,66.2l4.2-4.2l-9-9H71v17c0,0.6-0.4,1-1,1H59v6h11\r\n                        c3.9,0,7-3.1,7-7V30c0-3.9-3.1-7-7-7H59v6h11c0.6,0,1,0.4,1,1v17H33.2l9-9L38,33.8z\"/>\r\n                    </g>\r\n                </svg>\r\n            </OpenCloseButton>\r\n        </BottomDrawer>\r\n    )\r\n\r\n}\r\n\r\nexport default BottomPanel","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { setAnchorEl } from '../actions';\r\n\r\nconst TooltipContainer = styled.button`\r\n    width:12.5px;\r\n    height:12.5px;\r\n    background:url('${process.env.PUBLIC_URL}/assets/img/info.png');\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    outline:none;\r\n    border:none;\r\n    padding:0;\r\n    margin:4px;\r\n`\r\n\r\nconst Tooltip = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleMouseOver = (event) => {\r\n        dispatch(setAnchorEl(event.currentTarget))\r\n    }\r\n\r\n    const handleMouseLeave = () => {\r\n        // dispatch(setAnchorEl(null))\r\n    }\r\n\r\n    return (\r\n        <TooltipContainer id={props.id} key={props.id} onMouseEnter={handleMouseOver} onMouseLeave={handleMouseLeave} />\r\n    )\r\n}\r\n\r\nexport default Tooltip","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport { colLookup } from '../utils';\r\nimport Tooltip from './tooltip';\r\nimport { fixedScales, colorScales } from '../config';\r\nimport { StyledDropDown } from '../styled_components';\r\nimport { setVariableParams, setVariableName, setMapParams, setCurrentData, setPanelState } from '../actions';\r\n\r\nconst VariablePanelContainer = styled.div`\r\n  position:fixed;\r\n  left:0;\r\n  top:50px;\r\n  height:auto;\r\n  min-height:calc(100vh - 50px);\r\n  min-width:200px;\r\n  background-color: #2b2b2b;\r\n  box-shadow: 2px 0px 5px rgba(0,0,0,0.7);\r\n  padding:20px;\r\n  box-sizing: border-box;\r\n  transition:250ms all;\r\n  font: 'Lato', sans-serif;\r\n  color:white;\r\n  z-index:50;\r\n  p.note {\r\n    position: absolute;\r\n    bottom:100px;\r\n    width:calc(100% - 40px);\r\n    font-family: 'Lato', sans-serif;\r\n    font-weight:300;\r\n    font-size:90%;\r\n    a {\r\n      color:#FFCE00;\r\n      text-decoration: none;\r\n    }\r\n  }\r\n  div.poweredByGeoda {\r\n    position: absolute;\r\n    bottom: 40px;\r\n    color:white;\r\n    width:100%;\r\n    text-align:center;\r\n    transform:translateX(-20px);\r\n    a {\r\n      color:white;\r\n      margin:0 auto;\r\n      text-decoration: none;\r\n      letter-spacing: 2px;\r\n      font-size:75%;\r\n      img {\r\n        width:23px;\r\n        height:27px;\r\n        transform: translate(-50%,40%);\r\n      }\r\n    }\r\n  }\r\n  button#showHideLeft {\r\n    position:absolute;\r\n    left:95%;\r\n    top:20px;\r\n    width:40px;\r\n    height:40px;\r\n    padding:0;\r\n    margin:0;\r\n    background-color: #2b2b2b;\r\n    box-shadow: 0px 0px 6px rgba(0,0,0,1);\r\n    outline:none;\r\n    border:none;\r\n    cursor: pointer;\r\n    transition:500ms all;\r\n    svg { \r\n      padding:0;\r\n      margin:0;\r\n      fill:white;\r\n      transform:rotate(0deg);\r\n      transition:500ms all;\r\n    }\r\n    :after {\r\n      opacity:0;\r\n      font-weight:bold;\r\n      content: 'Variables';\r\n      color:white;\r\n      position: relative;\r\n      right:-50px;\r\n      top:-30px;\r\n      transition:500ms all;\r\n      z-index:4;\r\n    }\r\n  }\r\n  button#showHideLeft.hidden {\r\n    left:100%;\r\n    svg {\r\n      transform:rotate(180deg);\r\n    }\r\n    :after {\r\n      opacity:1;\r\n    }\r\n  }\r\n`\r\nconst StyledButtonGroup = styled(ButtonGroup)`\r\n  color:white;\r\n  padding-bottom:20px;\r\n  .MuiButtonGroup-grouped {\r\n    color:white;\r\n    border-color:#ffffff77;\r\n    &:hover {\r\n      border-color:white;\r\n    }\r\n    &.active {\r\n      background:white;\r\n      color:#2e2e2e;\r\n    }\r\n  }\r\n`\r\n\r\nconst TwoUp = styled.div`\r\n  width:100%;\r\n  .MuiFormControl-root {\r\n    width:45%;\r\n    min-width:60px;\r\n    margin-right:5px;\r\n  }\r\n`\r\n\r\nconst ControlsContainer = styled.div`\r\n  \r\n`\r\n\r\nconst VariablePanel = (props) => {\r\n  const dispatch = useDispatch();    \r\n  const columnNames = useSelector(state => state.cols);\r\n  const currentData = useSelector(state => state.currentData);\r\n  const currentVariable = useSelector(state => state.currentVariable);\r\n  const mapParams = useSelector(state => state.mapParams);\r\n  const panelState = useSelector(state => state.panelState);\r\n\r\n  const PresetVariables = {\r\n    \"HEADER:cases\":{},\r\n    \"Confirmed Count\": {\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'none',\r\n        dProperty: null,\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:1\r\n    },\r\n    \"Confirmed Count per 100K Population\": {\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'population',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:100000\r\n    },\r\n    \"Confirmed Count per Licensed Bed\": {\r\n        numerator: 'cases',\r\n        nType: 'time-series',\r\n        nProperty: null,\r\n        denominator: 'properties',\r\n        dType: 'characteristic',\r\n        dProperty: 'beds',\r\n        dRange:null,\r\n        dIndex:null,\r\n        scale:1\r\n    },\r\n    \"HEADER:deaths\":{},\r\n    \"Death Count\":{\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'properties',\r\n      dType: 'none',\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1\r\n        \r\n    }, \r\n    \"Death Count per 100K Population\":{\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'properties',\r\n      dType: 'characteristic',\r\n      dProperty: 'population',\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:100000\r\n\r\n    },\r\n    \"Death Count / Confirmed Count\":{\r\n      numerator: 'deaths',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      denominator: 'cases',\r\n      dType: 'time-series',\r\n      dProperty: null,\r\n      scale:1\r\n\r\n    },\r\n    \"HEADER:community health\":{},\r\n    \"Uninsured % (Community Health Factor)\":{\r\n      numerator: 'chr_health_factors',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(columnNames, currentData, 'chr_health_factors', 'UnInPrc'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: 'none',\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: colorScales['uninsured']\r\n\r\n    },\r\n    \"Over 65 Years % (Community Health Context)\":{\r\n      numerator: 'chr_health_context',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(columnNames, currentData, 'chr_health_context', 'Over65YearsPrc'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: 'none',\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: colorScales['over65']\r\n    },\r\n    \"Life expectancy (Length and Quality of Life)\":{\r\n      numerator: 'chr_life',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(columnNames, currentData, 'chr_life', 'LfExpRt'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: 'none',\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n      colorScale: colorScales['lifeExp']\r\n    }\r\n  }\r\n\r\n  const CountyVariables = {\r\n    \"HEADER:forecasting\":{},\r\n    \"Forecasting (5-Day Severity Index)\": {\r\n      numerator: 'predictions',\r\n      nType: 'characteristic',\r\n      nProperty: colLookup(columnNames, currentData, 'predictions', 'severity_index'),\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: 'none',\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n    }\r\n  }\r\n\r\n  const StateVariables = {\r\n    \"HEADER:testing\":{},\r\n    \"7 Day Testing Positivity Rate %\": {\r\n      numerator: 'testing_wk_pos',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: 'none',\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n    },\r\n    \"7 Day Testing Capacity\": {\r\n      numerator: 'testing_tcap',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: 'none',\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n    }, \r\n    \"7 Day Confirmed Cases per Testing %\":{\r\n      numerator: 'testing_ccpt',\r\n      nType: 'time-series',\r\n      nProperty: null,\r\n      nRange: null,\r\n      denominator: 'properties',\r\n      dType: 'none',\r\n      dProperty: null,\r\n      dRange:null,\r\n      dIndex:null,\r\n      scale:1,\r\n    }\r\n  }\r\n\r\n  const handleVariable = (event) => {\r\n    let variable = event.target.value;\r\n    dispatch(setVariableName(variable))\r\n\r\n    let tempParams = \r\n      PresetVariables.hasOwnProperty(variable) ? \r\n        PresetVariables[variable] : \r\n      CountyVariables.hasOwnProperty(variable) ?\r\n        CountyVariables[variable] :\r\n      StateVariables.hasOwnProperty(variable) ?\r\n        StateVariables[variable] :\r\n      null;\r\n\r\n    dispatch(setVariableParams({...tempParams}))\r\n    if (mapParams.mapType === \"natural_breaks\") {\r\n      if (tempParams.hasOwnProperty('colorScale')) {\r\n        dispatch(setMapParams({colorScale: tempParams.colorScale}))\r\n      } else {\r\n        dispatch(setMapParams({colorScale: colorScales['natural_breaks']}))\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDataSource = (event) => {\r\n    dispatch(setCurrentData(event.target.value)) ;  \r\n  };\r\n\r\n  const handleMapType = (event, newValue) => {\r\n    let nBins = newValue === 'hinge15_breaks' ? 6 : 8\r\n    if (newValue === 'lisa') {\r\n      dispatch(\r\n        setMapParams(\r\n          {\r\n            mapType: newValue,\r\n            nBins: 4,\r\n            bins: fixedScales[newValue],\r\n            colorScale: colorScales[newValue]\r\n          }\r\n        )\r\n      )\r\n    } else {\r\n      dispatch(\r\n        setMapParams(\r\n          {\r\n            nBins,\r\n            mapType: newValue\r\n          }\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  const handleMapOverlay = (event) =>{\r\n    dispatch(\r\n      setMapParams(\r\n        {\r\n          overlay: event.target.value\r\n        }\r\n      )\r\n    )\r\n  }\r\n\r\n  const handleMapResource = (event) =>{\r\n    dispatch(\r\n      setMapParams(\r\n        {\r\n          resource: event.target.value\r\n        }\r\n      )\r\n    )\r\n  }\r\n\r\n  const handleOpenClose = () => {\r\n    if (panelState.variables) {\r\n      dispatch(setPanelState({variables:false}))\r\n    } else {\r\n      dispatch(setPanelState({variables:true}))\r\n    }\r\n  }\r\n\r\n  const handleVizTypeButton = (vizType) => {\r\n    if (mapParams.vizType !== vizType) {\r\n      dispatch(setMapParams({vizType}))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <VariablePanelContainer style={{transform: (panelState.variables ? '' : 'translateX(-100%)')}}>\r\n      <ControlsContainer>\r\n        <h2>Data Sources &amp;<br/> Map Variables</h2>\r\n        <StyledDropDown>\r\n          <InputLabel htmlFor=\"data-select\">Data Source</InputLabel>\r\n          <Select  \r\n            id=\"data-select\"\r\n            value={currentData}\r\n            onChange={handleDataSource}\r\n          >\r\n            \r\n          <ListSubheader>county data</ListSubheader>\r\n            <MenuItem value={'county_usfacts.geojson'} key={'county_usfacts.geojson'}>USA Facts</MenuItem>\r\n            <MenuItem value={'county_nyt.geojson'} key={'county_nyt.geojson'}>New York Times</MenuItem>\r\n            <MenuItem value={'county_1p3a.geojson'} key={'county_1p3a.geojson'}>1point3acres</MenuItem>\r\n          <ListSubheader>state data</ListSubheader>\r\n            <MenuItem value={'state_1p3a.geojson'} key={'state_1p3a.geojson'}>1point3acres</MenuItem>\r\n            <MenuItem value={'state_nyt.geojson'} key={'state_nyt.geojson'} disabled>New York Times</MenuItem>\r\n          </Select>\r\n        </StyledDropDown>\r\n        <br />\r\n        <StyledDropDown>\r\n          <InputLabel htmlFor=\"numerator-select\">Select Variable</InputLabel>\r\n          <Select \r\n            value={currentVariable} \r\n            id=\"numerator-select\"\r\n            onChange={handleVariable}\r\n          >\r\n            {\r\n              Object.keys(PresetVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]}>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n            \r\n            {\r\n              currentData.includes(\"county\") && Object.keys(CountyVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]}>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n            \r\n            {\r\n              currentData.includes(\"state\") && Object.keys(StateVariables).map((variable) => {\r\n                if (variable.split(':')[0]===\"HEADER\") {\r\n                  return <ListSubheader key={variable.split(':')[1]}>{variable.split(':')[1]}</ListSubheader>\r\n                } else {\r\n                  return <MenuItem value={variable} key={variable}>{variable}</MenuItem> \r\n                }\r\n              })\r\n            }\r\n          </Select>\r\n        </StyledDropDown>\r\n        <br/>\r\n        <StyledDropDown component=\"Radio\">\r\n          <FormLabel component=\"legend\">Map Type</FormLabel>\r\n          <RadioGroup \r\n            aria-label=\"maptype\" \r\n            name=\"maptype1\" \r\n            onChange={handleMapType} \r\n            value={mapParams.mapType}\r\n            >\r\n            <FormControlLabel \r\n              value=\"natural_breaks\" \r\n              key=\"natural_breaks\" \r\n              control={<Radio />} \r\n              label=\"Natural Breaks\" \r\n            />\r\n            <FormControlLabel \r\n              value=\"hinge15_breaks\" \r\n              key=\"hinge15_breaks\" \r\n              control={<Radio />} \r\n              label=\"Box Map\" \r\n            />\r\n            <FormControlLabel \r\n              value=\"lisa\" \r\n              key=\"lisa\" \r\n              control={<Radio />} \r\n              label=\"Local Moran\" \r\n            />\r\n          </RadioGroup>\r\n        </StyledDropDown>\r\n        <p>Visualization Type</p>\r\n        <StyledButtonGroup color=\"primary\" aria-label=\"text button group\">\r\n          <Button className={mapParams.vizType === '2D' ? 'active' : ''} data-val=\"2D\" key=\"2D-btn\" onClick={() => handleVizTypeButton('2D')}>2D</Button>\r\n          <Button className={mapParams.vizType === '3D' ? 'active' : ''} data-val=\"3D\" key=\"3D-btn\" onClick={() => handleVizTypeButton('3D')}>3D</Button>\r\n          <Button className={mapParams.vizType === 'cartogram' ? 'active' : ''} data-val=\"cartogram\" key=\"cartogram-btn\" onClick={() => handleVizTypeButton('cartogram')}>Cartogram</Button>\r\n        </StyledButtonGroup>\r\n        <br/>\r\n        <TwoUp>\r\n          <StyledDropDown>\r\n            <InputLabel htmlFor=\"overlay-select\">Overlay</InputLabel>\r\n            <Select  \r\n              id=\"overlay-select\"\r\n              value={mapParams.overlay}\r\n              onChange={handleMapOverlay}\r\n            >\r\n              <MenuItem value=\"\" key={'None'}>None</MenuItem> \r\n              <MenuItem value={'native_american_reservations'} key={'native_american_reservations'}>Native American Reservations</MenuItem>\r\n              <MenuItem value={'segregated_cities'} key={'segregated_cities'}>Hypersegregated Cities<Tooltip id=\"Hypersegregated\"/></MenuItem>\r\n              <MenuItem value={'blackbelt'} key={'blackbelt'}>Black Belt Counties<Tooltip id=\"BlackBelt\" /></MenuItem>\r\n              <MenuItem value={'uscongressional_districts'} key={'uscongressional_districts'}>US Congressional Districts <Tooltip id=\"USCongress\" /></MenuItem>\r\n            </Select>\r\n          </StyledDropDown>\r\n          <StyledDropDown>\r\n            <InputLabel htmlFor=\"resource-select\">Resource</InputLabel>\r\n            <Select  \r\n              id=\"resource-select\"\r\n              value={mapParams.resource}\r\n              onChange={handleMapResource}\r\n            >\r\n              <MenuItem value=\"\" key='None'>None</MenuItem> \r\n              <MenuItem value={'clinics_hospitals'} key={'variable1'}>Clinics and Hospitals</MenuItem>\r\n              <MenuItem value={'clinics'} key={'variable2'}>Clinics</MenuItem>\r\n              <MenuItem value={'hospitals'} key={'variable3'}>Hospitals</MenuItem>\r\n            </Select>\r\n          </StyledDropDown>\r\n        </TwoUp>\r\n      </ControlsContainer>\r\n      <p className=\"note\">\r\n        Data is updated with freshest available data at 3pm CST daily, at minimum. \r\n        In case of data discrepancy, local health departments are considered most accurate as per CDC recommendations. \r\n        More information on <a href=\"data.html\">data</a>, <a href=\"methods.html\">methods</a>, \r\n        and <a href=\"FAQ.html\">FAQ</a> at main site.\r\n      </p>\r\n      <div className=\"poweredByGeoda\">\r\n            <a href=\"https://geodacenter.github.io\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              <img src={`${process.env.PUBLIC_URL}/assets/img/geoda-logo.png`} />\r\n              POWERED BY GEODA\r\n            </a>\r\n        </div>\r\n      <button onClick={handleOpenClose} id=\"showHideLeft\" className={panelState.variables ? 'active' : 'hidden'}>\r\n        <svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 100 100\">\r\n          <g transform=\"translate(50 50) scale(0.69 0.69) rotate(0) translate(-50 -50)\">\r\n            <path d=\"M38,33.8L23.9,47.9c-1.2,1.2-1.2,3.1,0,4.2L38,66.2l4.2-4.2l-9-9H71v17c0,0.6-0.4,1-1,1H59v6h11\r\n              c3.9,0,7-3.1,7-7V30c0-3.9-3.1-7-7-7H59v6h11c0.6,0,1,0.4,1,1v17H33.2l9-9L38,33.8z\"/>\r\n          </g>\r\n        </svg>\r\n\r\n      </button>\r\n\r\n    </VariablePanelContainer>\r\n  );\r\n}\r\n\r\nexport default VariablePanel;","import React, {useState} from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {\r\n  LineChart, Line, XAxis, YAxis, ReferenceArea, ReferenceLine, Tooltip, Label, ResponsiveContainer\r\n} from 'recharts';\r\nimport { useSelector } from 'react-redux';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { SwitchContainer } from '../styled_components';\r\nimport styled from 'styled-components';\r\n\r\nconst ChartContainer = styled(Grid)`\r\n    padding:10px 11.5% 20px 20px;\r\n`\r\n\r\nconst ChartTitle = styled.h3`\r\n    text-align: left;\r\n    font-family:'Playfair Display', serif;\r\n    padding:0;\r\n    font-weight:normal;\r\n    margin:0;\r\n    color:white;\r\n`\r\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\nconst millionFormatter = val => { return `${val/1000000}M` };\r\nconst thousandFormatter = val => { return `${val/1000}K` };\r\nconst dateFormatter = val => { \r\n    let tempDate = new Date(val).getMonth();\r\n    return `${monthNames[tempDate]}`\r\n};\r\n\r\nconst CustomTick = props => {\r\n    return <text {...props}>{props.labelFormatter(props.payload.value)}</text>\r\n};\r\n\r\nconst getStartDate = (range, index, data) => {\r\n    if (range === null) {\r\n        try {\r\n            return data.slice(0,1)[0].date\r\n        } catch {\r\n            return null\r\n        }\r\n    } else {\r\n        try {\r\n            return data[index-range].date\r\n        } catch {\r\n            return null\r\n        }\r\n    }\r\n}\r\n\r\nconst getEndDate = (index, data) => {\r\n    try {\r\n        return data[index].date;\r\n    } catch {\r\n        return null;\r\n    }\r\n}\r\n\r\nconst CustomTooltip = props => {\r\n    if (props.active) {\r\n        let data = props.payload\r\n        return (\r\n            <div \r\n                style={{\r\n                    background:'#1a1a1a',\r\n                    padding:'1px 10px',\r\n                    borderRadius:'4px',\r\n                    boxShadow: '0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)'\r\n            \r\n            }}> \r\n            <p style={{color:'white', padding:0,}}>{data[0].payload.date}</p>\r\n                {data.map(data => \r\n                    <p style={{color: data.color, textShadow: '2px 2px 4px #2e2e2e', fontWeight:600}}>{data.name}: {Number.isInteger(data.payload[data.dataKey]) ? \r\n                        data.payload[data.dataKey].toLocaleString('en') \r\n                        : data.payload[data.dataKey]}\r\n                    </p>\r\n                    \r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n    return null;\r\n};\r\n\r\nconst MainLineChart = () => {\r\n    \r\n    const chartData = useSelector(state => state.chartData);\r\n    const dataParams = useSelector(state => state.dataParams);\r\n    const [logChart, setLogChart] = useState(false)\r\n    \r\n\r\n    const handleSwitch = () => {\r\n        setLogChart(prev => !prev);\r\n    }\r\n\r\n    return (\r\n        <ChartContainer container spacing={2} id=\"main-chart-container\">\r\n            <Grid item xs={12}>\r\n                <ChartTitle>Total Cases and Daily Cases</ChartTitle>\r\n            </Grid>\r\n            <Grid item xs={12} style={{height:'20vh'}}>\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <LineChart\r\n                        data={chartData}\r\n                        margin={{\r\n                            top: 20, right: 10, left: 22, bottom: 20,\r\n                        }}\r\n                    >\r\n                        {/* <CartesianGrid strokeDasharray=\"3 3\" /> */}\r\n                        <XAxis \r\n                            dataKey=\"date\"\r\n                            // ticks={['2/1/2020','3/1/2020','4/1/2020','5/1/2020','6/1/2020']}\r\n                            tick={\r\n                                <CustomTick\r\n                                style={{\r\n                                    fill: \"#FFFFFF99\",\r\n                                    fontSize: \"10px\",\r\n                                    fontFamily: \"Lato\",\r\n                                    fontWeight: 600,\r\n                                    transform:'translateY(10px)'\r\n                                }}\r\n                                labelFormatter={dateFormatter}\r\n                                />\r\n                            }\r\n                        />\r\n                        {/* <YAxis type=\"number\" /> */}\r\n                        <YAxis yAxisId=\"left\" type=\"number\" dataKey=\"count\"  scale={logChart ? \"log\" : \"linear\"} domain={[0.01, 'dataMax']} allowDataOverflow \r\n                            ticks={[2000000,4000000,6000000,8000000,10000000]} \r\n                            tick={\r\n                                <CustomTick\r\n                                style={{\r\n                                    fill: \"#D8D8D8\",\r\n                                    fontSize: \"10px\",\r\n                                    fontFamily: \"Lato\",\r\n                                    fontWeight: 600\r\n                                }}\r\n                                labelFormatter={millionFormatter}\r\n                                />\r\n                            }\r\n                            >\r\n                            <Label value=\"Total Cases\" position='insideLeft' style={{marginTop:10, fill:'#D8D8D8', fontFamily: 'Lato', fontWeight: 600}} angle={-90}  />\r\n                        </YAxis>\r\n                        <YAxis yAxisId=\"right\" orientation=\"right\" dataKey=\"dailyNew\" scale={logChart ? \"log\" : \"linear\"} domain={[0.01, 'dataMax']} allowDataOverflow \r\n                            ticks={[20000,40000,60000,80000,100000, 120000, 140000]} \r\n                            tick={\r\n                                <CustomTick\r\n                                    style={{\r\n                                        fill: \"#FFCE00\",\r\n                                        fontSize: \"10px\",\r\n                                        fontFamily: \"Lato\",\r\n                                        fontWeight: 600,\r\n                                    }}\r\n                                    labelFormatter={thousandFormatter}\r\n                                />\r\n                            }\r\n                            >\r\n                            <Label value=\"Daily Cases\" position='insideTopRight' style={{marginTop:10, fill:'#FFCE00', fontFamily: 'Lato', fontWeight: 600}} angle={-90}  />\r\n                        </YAxis>\r\n                        <Tooltip\r\n                            content={CustomTooltip}\r\n                        />\r\n                        <ReferenceArea \r\n                            yAxisId=\"left\"\r\n                            x1={getStartDate(dataParams.nRange, dataParams.nIndex, chartData)}\r\n                            x2={getEndDate(dataParams.nIndex, chartData)} \r\n                            fill=\"white\" \r\n                            fillOpacity={0.15}\r\n                            isAnimationActive={false}\r\n                        />\r\n                        <Line type=\"monotone\" yAxisId=\"left\" dataKey=\"count\" name=\"Total Count\" stroke=\"#D8D8D8\" dot={false} />\r\n                        <Line type=\"monotone\" yAxisId=\"right\" dataKey=\"dailyNew\" name=\"Daily Count\" stroke=\"#FFCE00\" dot={false} />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            </Grid>\r\n            <SwitchContainer item xs={12} style={{position:'absolute', right:0, bottom:40}}>\r\n                <Switch\r\n                    checked={logChart}\r\n                    onChange={handleSwitch}\r\n                    name=\"log chart switch\"\r\n                    inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                />\r\n                <p>{logChart ? 'Log Scale' : 'Linear Scale'}</p>\r\n            </SwitchContainer>\r\n        </ChartContainer>\r\n    );\r\n}\r\n\r\nexport default MainLineChart\r\n\r\n// dataParams.nIndex-(dataParams.nRange||dataParams.nIndex)","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport { tooltipInfo } from '../config';\r\nimport { setAnchorEl } from '../actions';\r\n\r\nconst Popover = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const anchorEl = useSelector(state => state.anchorEl);\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popper' : undefined;\r\n    \r\n    const handleMouseOver = (event) => {\r\n        dispatch(setAnchorEl(anchorEl))\r\n    }\r\n\r\n    const handleMouseLeave = () => {\r\n        dispatch(setAnchorEl(null))\r\n    }\r\n    \r\n    return (\r\n        <Popper \r\n            id={id} \r\n            open={open} \r\n            anchorEl={anchorEl}\r\n            placement=\"left\"\r\n            disablePortal={false}\r\n            modifiers={{\r\n                flip: {\r\n                enabled: true,\r\n                },\r\n                preventOverflow: {\r\n                enabled: true,\r\n                boundariesElement: 'scrollParent',\r\n                }\r\n            }}\r\n            style={{ \r\n                zIndex:10000,\r\n                maxWidth:'200px',\r\n                background:'none',\r\n                padding:0,\r\n                margin:0,\r\n                pointerEvents: 'none'\r\n            }}\r\n            onMouseEnter={handleMouseOver} \r\n            onMouseLeave={handleMouseLeave}\r\n            >\r\n            <div style={{\r\n                background:'black',\r\n                padding:'1px 10px',\r\n                margin:0,\r\n                borderRadius: '4px',\r\n                color:'white',\r\n                transform:'translateX(65%)',\r\n                boxShadow: '0px 5px 5px -3px rgba(0,0,0,0.2), 0px 8px 10px 1px rgba(0,0,0,0.14), 0px 3px 14px 2px rgba(0,0,0,0.12)',\r\n                pointerEvents: 'all'\r\n                }}\r\n                >\r\n                {anchorEl && tooltipInfo[anchorEl.id]}\r\n            </div>\r\n        </Popper>\r\n    )\r\n}\r\n\r\nexport default Popover","import React from 'react';\r\n\r\n// This component handles and formats the map tooltip info. \r\n// The props passed to this component should contain an object of the hovered object (from deck, info.object by default)\r\nconst MapTooltipContent = (props) => {\r\n    // destructure the object for cleaner formatting\r\n    const { properties, cases, deaths, testing } = props.content;\r\n\r\n    // get lengths of time series data for reference below\r\n    let caseN = cases && cases.length-1;\r\n    let deathN = deaths && deaths.length-1;\r\n    let testingN = testing && testing.length-1;\r\n\r\n    // conditional returns for combination of information\r\n    // this is not elegant but a bit more reliable than JSX conditional rendering\r\n    if (properties && cases && deaths){\r\n        return (\r\n            <div>\r\n                <h3>\r\n                    {properties.NAME} {properties.state_name && `, ${properties.state_name}`}\r\n                </h3>\r\n                <div>\r\n                    Cases: {cases[caseN].toLocaleString('en')}<br/>\r\n                    Deaths: {deaths[deathN].toLocaleString('en')}<br/>\r\n                    New Cases: {(cases[caseN]-cases[caseN-1]).toLocaleString('en')}<br/>\r\n                    New Deaths: {(deaths[deathN]-deaths[deathN-1]).toLocaleString('en')}<br/>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapTooltipContent","const NavBar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"nav-logo\">\r\n              <img src={`${process.env.PUBLIC_URL}/favicon/android-icon-192x192.png`} style={{height: '30px', paddingRight: '5px'}} /><a href=\"index.html\">US COVID ATLAS </a>\r\n            </div>\r\n          <ul> \r\n            <li><a href=\"data.html\">DATA</a></li>\r\n            <li><a href=\"api.html\">API</a></li>\r\n            <li><a href=\"methods.html\">METHODS</a></li>\r\n            <li><a href=\"faq.html\">FAQ</a></li>\r\n            <li><a href=\"about.html\">INSIGHTS</a></li>\r\n            <li><a href=\"about.html\">ABOUT</a></li>\r\n            <li><a href=\"contact.html\">CONTACT</a></li>\r\n          </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import styled from 'styled-components';\r\n\r\nconst PreloaderContainer = styled.div`\r\n    position:fixed;\r\n    width:100%;\r\n    height:100%;\r\n    z-index:500;\r\n    top:0;\r\n    left:0;\r\n    background:#2b2b2b;\r\n    transition: 500ms opacity;\r\n    img {\r\n        width:100px;\r\n        height:86px;\r\n        position:fixed;\r\n        left:50%;\r\n        top:50%;\r\n        transform:translate(-50%, -50%);\r\n    }\r\n    svg {\r\n        width:40vw;\r\n        height:40vh;\r\n        position:fixed;\r\n        left:50%;\r\n        top:50%;\r\n        transform:translate(-50%, -50%);\r\n        g {\r\n            rect {\r\n                fill:#EC1E24;\r\n                animation: fade 1s infinite ease-in-out;\r\n            }\r\n            #topLeft {\r\n                animation-delay:0.25s;\r\n            }\r\n            #bottomRight {\r\n                animation-delay:0.5s;\r\n            }\r\n            #bottomLeft {\r\n                animation-delay:0.75s;\r\n            }\r\n        }\r\n    }\r\n    @keyframes fade {\r\n        0% {fill-opacity:1};\r\n        50% {fill-opacity:0.25};\r\n        100% {fill-opacity:1};\r\n    }\r\n    &.fadeOut {\r\n        opacity:0;\r\n        pointer-events:none;\r\n    }\r\n`;\r\n\r\nconst fixedPoints = {\r\n    topRight: {\r\n        y: 13.2\r\n    }\r\n}\r\nconst Preloader = ( props ) => {\r\n\r\n    if (props.loaded) {\r\n        setTimeout(() => {\r\n            document.querySelector('#preloaderContainer').style.display = 'none'\r\n        }, 500)\r\n    }\r\n    return (\r\n        <PreloaderContainer className={props.loaded ? 'fadeOut' : ''} id=\"preloaderContainer\">\r\n            <img src={`${process.env.PUBLIC_URL}/assets/img/preloader.gif`} alt=\"Preloader\" />\r\n            {/* <svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 54.5 50\">\r\n                <g>\r\n                    <rect id=\"topLeft\" y=\"5.5\" width=\"23.4\" height=\"23.4\" rx=\"1\"/>\r\n                    <rect id=\"bottomRight\" x=\"27.3\" y=\"17.1\" width=\"27.3\" height=\"19.5\" rx=\"1\"/>\r\n                    <rect id=\"bottomLeft\" x=\"7.8\" y=\"32.8\" width=\"15.6\" height=\"15.6\" rx=\"1\"/>\r\n                    <rect id=\"topRight\" x=\"27.3\" y=\"1.5\" width=\"11.7\" height=\"11.7\" rx=\"1\"/>\r\n                </g>\r\n            </svg> */}\r\n\r\n        </PreloaderContainer>\r\n    );\r\n};\r\n\r\nexport default Preloader;","import React, { useEffect, useState } from 'react';\r\nimport { setCentroids, storeData, setCurrentData, setDates, setColumnNames, setDate, setDateIndex, setMapParams, setVariableParams, setStartDateIndex, setChartData, storeGeojson, storeLisaValues, storeCartogramData } from './actions';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport GeodaProxy from './GeodaProxy.js';\r\nimport { getParseCSV, getJson, mergeData, colIndex, findDates, getDataForBins, getDataForCharts, dataFn, getLisaValues, getVarId, getGeoids, getDataForLisa, getCartogramValues } from './utils';\r\nimport { Map, VariablePanel, BottomPanel, DataPanel, Popover, NavBar, Preloader } from './components';\r\nimport { colorScales, fixedScales, dataPresets } from './config';\r\n\r\nfunction App() {\r\n  const storedData = useSelector(state => state.storedData);\r\n  const storedGeojson = useSelector(state => state.storedGeojson);\r\n  const storedLisaData = useSelector(state => state.storedLisaData);\r\n  const storedCartogramData = useSelector(state => state.storedCartogramData);\r\n  const currentData = useSelector(state => state.currentData);\r\n  const columnNames = useSelector(state => state.cols);\r\n  const dates = useSelector(state => state.dates);\r\n  const mapParams = useSelector(state => state.mapParams);\r\n  const dataParams = useSelector(state => state.dataParams);\r\n  const startDateIndex = useSelector(state => state.startDateIndex);\r\n  const mapLoaded = useSelector(state => state.mapLoaded)\r\n  \r\n  const [gda_proxy, set_gda_proxy] = useState(null); \r\n  \r\n  const dispatch = useDispatch();  \r\n  \r\n  const getCentroids = (geojson, gda_proxy) =>  dispatch(setCentroids(gda_proxy.GetCentroids(geojson), geojson))\r\n  \r\n  const getDates = (data, table, geojson) =>  {\r\n    let dates = findDates(data[table])\r\n    dispatch(setDates(dates[0], geojson))\r\n    dispatch(setDate(dates[0].slice(-1,)[0]))\r\n    dispatch(setVariableParams({nIndex: colIndex(data, table, dates[0].slice(-1,)[0])}))\r\n    dispatch(setStartDateIndex(dates[1]))\r\n  }\r\n\r\n  const getColumns = (data, names) => {\r\n    let rtn = {};\r\n    for (let i=0; i < data.length; i++) {\r\n      rtn[names[i]] = data[i][1]\r\n    }\r\n  return rtn;\r\n  }\r\n\r\n  async function loadData(geojson, csvs, joinCols, names, accumulate, gda_proxy) {\r\n    const csvPromises = csvs.map(csv => getParseCSV(`${process.env.PUBLIC_URL}/csv/${csv}.csv`, joinCols[1], accumulate.includes(csv)).then(result => {return result}))\r\n    Promise.all([\r\n      getJson(`${process.env.PUBLIC_URL}/geojson/${geojson}`, gda_proxy),\r\n      ...csvPromises\r\n    ]).then(values => {\r\n      dispatch(storeGeojson(values[0]['geoidIndex'], geojson));\r\n      let tempData = mergeData(values[0]['data'], joinCols[0], values.slice(1,), names, joinCols[1]);\r\n      dispatch(storeData(tempData, geojson));\r\n      dispatch(setCurrentData(geojson));\r\n      dispatch(setColumnNames(getColumns(values.slice(1,), names), geojson));\r\n    })    \r\n  }\r\n\r\n  // After runtime is initialized, this loads in gda_proxy to the state\r\n  useEffect(() => {\r\n    const waitForWASM = () => {\r\n      setTimeout(() => {\r\n        if (window.Module === undefined) {\r\n          waitForWASM()\r\n        } else {\r\n          if (gda_proxy === null) {\r\n            set_gda_proxy(new GeodaProxy());\r\n          }\r\n        }\r\n      }, 100)\r\n    }\r\n\r\n    waitForWASM()\r\n  },[window.Module])\r\n\r\n  // on initial load and after gda_proxy has been initialized, this loads in the default data sets (USA Facts)\r\n  useEffect(() => {\r\n    if ((gda_proxy !== null) && (currentData === '')) {\r\n      loadData(\r\n        'county_usfacts.geojson', \r\n        ['covid_confirmed_usafacts','covid_deaths_usafacts', 'berkeley_predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'], \r\n        ['GEOID', 'FIPS'], \r\n        ['cases','deaths', 'predictions', 'chr_health_context', 'chr_life', 'chr_health_factors'],\r\n        [],\r\n        gda_proxy\r\n      )\r\n    }\r\n  },[gda_proxy])\r\n\r\n  useEffect(() => {\r\n    if ((gda_proxy !== null) && (currentData !== '')) {\r\n      if (storedData[currentData] === undefined) {\r\n        loadData(\r\n          dataPresets[currentData].geojson, \r\n          dataPresets[currentData].csv, \r\n          dataPresets[currentData].joinCols,\r\n          dataPresets[currentData].tableNames,  \r\n          dataPresets[currentData].accumulate,\r\n          gda_proxy\r\n        )\r\n      }\r\n    }\r\n  },[currentData])\r\n\r\n\r\n  // whenever the current data changes, this \r\n  useEffect(() => {\r\n    if (currentData != '') {\r\n      if (!dates.hasOwnProperty(currentData)){\r\n        getCentroids(currentData, gda_proxy)\r\n        getDates(columnNames[currentData], 'cases', currentData)\r\n      }\r\n    } \r\n  },[columnNames])\r\n\r\n  useEffect(() => {\r\n    if (storedData[currentData]){\r\n      dispatch(\r\n        setChartData(\r\n          getDataForCharts(\r\n            storedData[currentData],\r\n            'cases',\r\n            startDateIndex,\r\n            dates[currentData]\r\n          )\r\n        )\r\n      )\r\n    }\r\n  }, [startDateIndex])\r\n\r\n  // get lisa values on change, if map type set to lisa\r\n  useEffect(() => {\r\n    console.log('map or data params')\r\n    if (gda_proxy !== null && mapParams.mapType === \"lisa\"){\r\n      let tempId = getVarId(currentData, dataParams)\r\n      if (!(storedLisaData.hasOwnProperty(tempId))) {\r\n        dispatch(\r\n          storeLisaValues(\r\n            getLisaValues(\r\n              gda_proxy, \r\n              currentData, \r\n              getDataForLisa(\r\n                storedData[currentData], \r\n                dataParams.numerator, \r\n                dataParams.nType,\r\n                dataParams.nProperty, \r\n                dataParams.nIndex, \r\n                dataParams.nRange, \r\n                dataParams.denominator, \r\n                dataParams.dType,\r\n                dataParams.dProperty, \r\n                dataParams.dIndex, \r\n                dataParams.dRange, \r\n                dataParams.scale,\r\n                storedGeojson[currentData].indexOrder\r\n              )\r\n            ),\r\n            tempId\r\n          )\r\n        )\r\n      }\r\n    } \r\n    if (gda_proxy !== null && mapParams.vizType === \"cartogram\"){\r\n      let tempId = getVarId(currentData, dataParams)\r\n      if (!(storedCartogramData.hasOwnProperty(tempId))) {\r\n        dispatch(\r\n          storeCartogramData(\r\n            getCartogramValues(\r\n              gda_proxy, \r\n              currentData, \r\n              getDataForLisa(\r\n                storedData[currentData], \r\n                dataParams.numerator, \r\n                dataParams.nType,\r\n                dataParams.nProperty, \r\n                dataParams.nIndex, \r\n                dataParams.nRange, \r\n                dataParams.denominator, \r\n                dataParams.dType,\r\n                dataParams.dProperty, \r\n                dataParams.dIndex, \r\n                dataParams.dRange, \r\n                dataParams.scale,\r\n                storedGeojson[currentData].indexOrder\r\n              )\r\n            ),\r\n            tempId\r\n          )\r\n        )\r\n      }\r\n    }\r\n  }, [dataParams, mapParams])\r\n\r\n  // trigger on parameter change for metric values\r\n  useEffect(() => {\r\n    if (gda_proxy !== null && currentData !== '' && mapParams.mapType !== \"lisa\"){\r\n      if (mapParams.fixedScale !== null) {\r\n        dispatch(\r\n          setMapParams({\r\n            bins: fixedScales[mapParams.fixedScale],\r\n            colorScale: colorScales[mapParams.fixedScale]\r\n          })\r\n        )\r\n      } else {\r\n        let nb = gda_proxy.custom_breaks(\r\n          currentData, \r\n          mapParams.mapType, \r\n          mapParams.nBins, \r\n          null, \r\n          getDataForBins(\r\n            storedData[currentData], \r\n            dataParams.numerator, \r\n            dataParams.nType,\r\n            dataParams.nProperty, \r\n            mapParams.binMode === 'dynamic' ? dataParams.nIndex : null,\r\n            dataParams.nRange, \r\n            dataParams.denominator,\r\n            dataParams.dType,\r\n            dataParams.dProperty, \r\n            mapParams.binMode === 'dynamic' ? dataParams.dIndex : null, \r\n            dataParams.dRange, \r\n            dataParams.scale\r\n          )\r\n        )\r\n\r\n        dispatch(\r\n          setMapParams({\r\n            bins: {\r\n              bins: mapParams.mapType === \"natural_breaks\" ? nb.bins : ['Lower Outlier','< 25%','25-50%','50-75%','>75%','Upper Outlier'],\r\n              breaks: [-Math.pow(10, 12), ...nb.breaks.slice(1,-1), Math.pow(10, 12)]\r\n            },\r\n            colorScale: colorScales[mapParams.mapType]\r\n          })\r\n        )\r\n      }\r\n    }\r\n  }, [dates, dataParams.numerator, dataParams.nProperty, dataParams.nRange, dataParams.denominator, dataParams.dProperty, dataParams.dRange, dataParams.scale, mapParams.mapType])\r\n\r\n  // trigger on date (index) change for dynamic binning\r\n  useEffect(() => {\r\n    if (gda_proxy !== null && mapParams.binMode === 'dynamic' && currentData !== '' && mapParams.mapType !== 'lisa'){\r\n      let nb = gda_proxy.custom_breaks(\r\n        currentData, \r\n        mapParams.mapType,\r\n        mapParams.nBins,\r\n        null, \r\n        getDataForBins(\r\n          storedData[currentData], \r\n          dataParams.numerator, \r\n          dataParams.nType,\r\n          dataParams.nProperty, \r\n          dataParams.nIndex, \r\n          dataParams.nRange, \r\n          dataParams.denominator, \r\n          dataParams.dType,\r\n          dataParams.dProperty, \r\n          dataParams.dIndex, \r\n          dataParams.dRange, \r\n          dataParams.scale\r\n          ), \r\n        )\r\n      dispatch(\r\n        setMapParams({\r\n          bins: {\r\n            bins: mapParams.mapType === \"natural_breaks\" ? nb.bins : ['Lower Outlier','< 25%','25-50%','50-75%','>75%','Upper Outlier'],\r\n            breaks: [-Math.pow(10, 12), ...nb.breaks.slice(1,-1), Math.pow(10, 12)]\r\n          },\r\n          colorScale: colorScales[mapParams.mapType]\r\n        })\r\n      )\r\n    }\r\n\r\n  }, [dataParams.nIndex, dataParams.dIndex, mapParams.binMode])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Preloader loaded={mapLoaded} />\r\n      <NavBar />\r\n      {/* <header className=\"App-header\" style={{position:'fixed', left: '20vw', top:'20px', zIndex:10}}>\r\n        <button onClick={() => console.log(gda_proxy.custom_breaks(\r\n          currentData, \r\n          mapParams.mapType, \r\n          mapParams.nBins, \r\n          null, \r\n          getDataForBins(\r\n            storedData[currentData], \r\n            dataParams.numerator, \r\n            dataParams.nType,\r\n            dataParams.nProperty, \r\n            298,\r\n            dataParams.nRange, \r\n            dataParams.denominator,\r\n            dataParams.dType,\r\n            dataParams.dProperty, \r\n            298, \r\n            dataParams.dRange, \r\n            dataParams.scale\r\n          )\r\n        )\r\n\r\n\r\n        )}>dummy button for testing</button>\r\n      </header> */}\r\n      <div id=\"mainContainer\">\r\n        <Map />\r\n        <VariablePanel />\r\n        <DataPanel />\r\n        <BottomPanel />\r\n        <Popover />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","export const INITIAL_STATE = {\r\n  geodaProxy: null,\r\n  storedData: {},\r\n  storedGeojson: {},\r\n  storedLisaData: {},\r\n  storedCartogramData: {},\r\n  storedCSV: {},\r\n  cols: {},\r\n  currentData: '',\r\n  chartData: [{}],\r\n  centroids: {},\r\n  dates: {},\r\n  currDate: '',\r\n  currDateIndex: '',\r\n  startDateIndex: '',\r\n  currentVariable: 'Confirmed Count per 100K Population',\r\n  currentMethod: 'natural_breaks',\r\n  currentOverlay: '',\r\n  currentResource: '',\r\n  dataParams: {\r\n    numerator: 'cases',\r\n    nType: 'time-series',\r\n    nProperty: null,\r\n    nRange: 7,\r\n    nIndex:null,\r\n    denominator: 'properties',\r\n    dType: 'characteristic',\r\n    dProperty: 'population',\r\n    dRange:null,\r\n    dIndex:null,\r\n    scale:100000,\r\n  },\r\n  mapParams: {\r\n    mapType: 'natural_breaks',\r\n    bins: {\r\n      bins: [],\r\n      breaks: []\r\n    },\r\n    binMode: '',\r\n    fixedScale: null,\r\n    nBins: 8,\r\n    vizType: '2D',\r\n    activeGeoid: '',\r\n    overlay: '',\r\n    resource: '',\r\n    colorScale: [\r\n      [240,240,240],\r\n      [255,255,204],\r\n      [255,237,160],\r\n      [254,217,118],\r\n      [254,178,76],\r\n      [253,141,60],\r\n      [252,78,42],\r\n      [227,26,28],\r\n      [177,0,38],\r\n    ],\r\n  },\r\n  panelState: {\r\n    variables:true,\r\n    info:false,\r\n    chart:true,\r\n  },\r\n  storedRange: null,\r\n  currentGeoid: '',\r\n  sidebarData: {},\r\n  anchorEl: null,\r\n  mapLoaded: false,\r\n};","import { INITIAL_STATE } from '../constants/defaults';\r\n\r\nvar reducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case 'SET_GEOID': \r\n            return {\r\n                ...state,\r\n                currentGeoid: action.payload.geoid\r\n            };\r\n        case 'SET_STORED_DATA':\r\n            let obj = {\r\n                ...state.storedData,\r\n            }\r\n            obj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedData: obj\r\n            };\r\n        case 'SET_STORED_GEOJSON':\r\n            let geojsonObj = {\r\n                ...state.storedGeojson,\r\n            }\r\n            geojsonObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedGeojson: geojsonObj\r\n            };\r\n        case 'SET_STORED_LISA_DATA':\r\n            let lisaObj = {\r\n                ...state.storedLisaData,\r\n            }\r\n            lisaObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedLisaData: lisaObj\r\n            };\r\n        case 'SET_STORED_CARTOGRAM_DATA':\r\n            let cartoObj = {\r\n                ...state.storedCartogramData,\r\n            }\r\n            cartoObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                storedCartogramData: cartoObj\r\n            };\r\n        case 'SET_CENTROIDS':\r\n            let centroidsObj = {\r\n                ...state.centroids,\r\n            }\r\n            centroidsObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                centroids: centroidsObj\r\n            };\r\n        case 'SET_CURRENT_DATA':\r\n            return {\r\n                ...state,\r\n                currentData: action.payload.data\r\n            }\r\n        case 'SET_GEODA_PROXY':\r\n            return {\r\n                ...state,\r\n                geodaProxy: action.payload.proxy\r\n            }\r\n        case 'SET_DATES':\r\n            let datesObj = {\r\n                ...state.dates\r\n            }\r\n            datesObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                dates: datesObj\r\n            }\r\n        case 'SET_DATA_FUNCTION':\r\n            return {\r\n                ...state,\r\n                currentDataFn: action.payload.fn\r\n            }\r\n        case 'SET_COLUMN_NAMES':\r\n            let colObj = {\r\n                ...state.cols\r\n            }\r\n            colObj[action.payload.name] = action.payload.data\r\n            return {\r\n                ...state,\r\n                cols: colObj\r\n            }\r\n        case 'SET_CURR_DATE':\r\n            return {\r\n                ...state,\r\n                currDate: action.payload.date\r\n            }\r\n        case 'SET_DATE_INDEX':\r\n            return {\r\n                ...state,\r\n                currDateIndex: action.payload.index\r\n            }\r\n        case 'SET_START_DATE_INDEX':\r\n            return {\r\n                ...state,\r\n                startDateIndex: action.payload.index\r\n            }\r\n        case 'SET_BINS':\r\n            let binsObj = {};\r\n            binsObj['bins'] =  action.payload.bins;\r\n            binsObj['breaks'] =  action.payload.breaks;\r\n            return {\r\n                ...state,\r\n                bins: binsObj\r\n            }\r\n        case 'SET_3D':\r\n            return {\r\n                ...state,\r\n                use3D: !state.use3D\r\n            }\r\n        case 'SET_DATA_SIDEBAR':\r\n            return {\r\n                ...state,\r\n                sidebarData: action.payload.data\r\n            }\r\n        case 'INCREMENT_DATE':\r\n            let dateObj = {\r\n                ...state.dataParams\r\n            }\r\n            if (action.payload.index+state.dataParams.nIndex > state.dates[state.currentData].length) {\r\n                dateObj.nIndex = state.startDateIndex;\r\n                dateObj.dIndex = state.startDateIndex;\r\n                return {\r\n                    ...state,\r\n                    dataParams:dateObj\r\n                }\r\n            } else {\r\n                dateObj.nIndex = dateObj.nIndex + action.payload.index;\r\n                dateObj.dIndex = dateObj.dIndex + action.payload.index;\r\n                return {\r\n                    ...state,\r\n                    dataParams:dateObj\r\n                }\r\n            }\r\n        case 'SET_VARIABLE_PARAMS':\r\n            let paramObj = {\r\n                ...state.dataParams,\r\n                ...action.payload.params\r\n            }\r\n\r\n            if (paramObj.nType === 'time-series' && paramObj.nIndex === null) {\r\n                paramObj.nIndex = state.storedIndex;\r\n                paramObj.nRange = state.storedRange;\r\n            }\r\n            if (paramObj.dType === 'time-series' && paramObj.dIndex === null) {\r\n                paramObj.dIndex = state.storedIndex;\r\n                paramObj.dRange = state.storedRange;\r\n            }\r\n            if (paramObj.nType === 'characteristic' && state.dataParams.nType === 'time-series') {\r\n                return {\r\n                    ...state,\r\n                    storedIndex: state.dataParams.nIndex,\r\n                    storedRange: state.dataParams.nRange,\r\n                    dataParams: paramObj,\r\n                }\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    dataParams: paramObj \r\n                }\r\n            }\r\n        case 'SET_MAP_PARAMS':\r\n            let mapParamObj = {\r\n                ...state.mapParams,\r\n                ...action.payload.params\r\n            }\r\n            return {\r\n                ...state,\r\n                mapParams: mapParamObj \r\n            }\r\n        case 'SET_PANELS':\r\n            let panelsObj = {\r\n                ...state.panelState,\r\n                ...action.payload.params\r\n            }\r\n            return {\r\n                ...state,\r\n                panelState: panelsObj \r\n            }\r\n        case 'SET_VARIABLE_NAME':\r\n            return {\r\n                ...state,\r\n                currentVariable: action.payload.name\r\n            }\r\n        case 'SET_CHART_DATA':\r\n            return {\r\n                ...state,\r\n                chartData: action.payload.data\r\n            }\r\n        case 'SET_ANCHOR_EL':\r\n            return {\r\n                ...state,\r\n                anchorEl: action.payload.anchorEl\r\n            }\r\n        case 'SET_MAP_LOADED':\r\n            return {\r\n                ...state,\r\n                mapLoaded: action.payload.loaded\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { createStore} from 'redux';\r\nimport reducer from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport WebFont from 'webfontloader';\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\n\r\nWebFont.load({\r\n  google: {\r\n    families: ['Lato:300,400,700,900', 'Playfair Display:ital', 'sans-serif']\r\n  }\r\n});\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}